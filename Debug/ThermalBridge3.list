
ThermalBridge3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800fdb8  0800fdb8  0001fdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010458  08010458  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010458  08010458  00020458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010460  08010460  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010460  08010460  00020460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010464  08010464  00020464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08010468  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004994  200002d8  08010740  000302d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c6c  08010740  00034c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d71  00000000  00000000  0003034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d33  00000000  00000000  000470bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  0004adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e49  00000000  00000000  0004c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3d9  00000000  00000000  0004cee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b78c  00000000  00000000  000682c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093424  00000000  00000000  00083a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060d8  00000000  00000000  00116e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0011cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fda0 	.word	0x0800fda0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800fda0 	.word	0x0800fda0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a26      	ldr	r2, [pc, #152]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <MX_GPIO_Init+0xb8>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_GPIO_Init+0xb8>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_GPIO_Init+0xb8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <MX_GPIO_Init+0xb8>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_GPIO_Init+0xb8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <MX_GPIO_Init+0xbc>)
 8001022:	f001 f801 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_GPIO_Init+0xbc>)
 8001040:	f000 fe6e 	bl	8001d20 <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020800 	.word	0x40020800

08001054 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x50>)
 800105a:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <MX_I2C1_Init+0x54>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_I2C1_Init+0x50>)
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <MX_I2C1_Init+0x58>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_I2C1_Init+0x50>)
 8001072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001076:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_I2C1_Init+0x50>)
 8001092:	f000 ffe3 	bl	800205c <HAL_I2C_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800109c:	f000 f920 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200002f4 	.word	0x200002f4
 80010a8:	40005400 	.word	0x40005400
 80010ac:	00061a80 	.word	0x00061a80

080010b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_I2C_MspInit+0x84>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d12b      	bne.n	800112a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_I2C_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_I2C_MspInit+0x88>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_I2C_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ee:	23c0      	movs	r3, #192	; 0xc0
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f2:	2312      	movs	r3, #18
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fe:	2304      	movs	r3, #4
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <HAL_I2C_MspInit+0x8c>)
 800110a:	f000 fe09 	bl	8001d20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_I2C_MspInit+0x88>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_I2C_MspInit+0x88>)
 8001118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_I2C_MspInit+0x88>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40005400 	.word	0x40005400
 8001138:	40023800 	.word	0x40023800
 800113c:	40020400 	.word	0x40020400

08001140 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001148:	1d39      	adds	r1, r7, #4
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	2201      	movs	r2, #1
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <__io_putchar+0x20>)
 8001152:	f003 fe64 	bl	8004e1e <HAL_UART_Transmit>
  return ch;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20002ecc 	.word	0x20002ecc

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t cnt = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fc2f 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f84d 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f7ff ff0d 	bl	8000f94 <MX_GPIO_Init>
  MX_I2C1_Init();
 800117a:	f7ff ff6b 	bl	8001054 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800117e:	f000 fb8b 	bl	8001898 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001182:	f00a fcb3 	bl	800baec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  mlx_param_init();
 8001186:	f000 f941 	bl	800140c <mlx_param_init>
  printf("mlx init ok\r\n");
 800118a:	481b      	ldr	r0, [pc, #108]	; (80011f8 <main+0x94>)
 800118c:	f00b ff14 	bl	800cfb8 <puts>
	  //HAL_Delay(500);
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	  //HAL_Delay(1000);

	//start = HAL_GetTick();
	mlx_data_read(thermal_data);
 8001190:	481a      	ldr	r0, [pc, #104]	; (80011fc <main+0x98>)
 8001192:	f000 f9e5 	bl	8001560 <mlx_data_read>
	//pinfo("read frame: %d\r\n", HAL_GetTick() - start);
	printf("=================== %d ======================\r\n", cnt++);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	60fa      	str	r2, [r7, #12]
 800119c:	4619      	mov	r1, r3
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <main+0x9c>)
 80011a0:	f00b fea4 	bl	800ceec <iprintf>
	for (int i = 12; i < 13; i++) {
 80011a4:	230c      	movs	r3, #12
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	e01e      	b.n	80011e8 <main+0x84>
	  for (int j = 0; j < MLX90640_COLUMN_NUM; j++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	e012      	b.n	80011d6 <main+0x72>
		printf("%2.2f ", thermal_data[i * MLX90640_COLUMN_NUM + j]);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	015a      	lsls	r2, r3, #5
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a10      	ldr	r2, [pc, #64]	; (80011fc <main+0x98>)
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9c9 	bl	8000558 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <main+0xa0>)
 80011cc:	f00b fe8e 	bl	800ceec <iprintf>
	  for (int j = 0; j < MLX90640_COLUMN_NUM; j++) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3301      	adds	r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b1f      	cmp	r3, #31
 80011da:	dde9      	ble.n	80011b0 <main+0x4c>
	  }
      printf("\r\n");
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <main+0xa4>)
 80011de:	f00b feeb 	bl	800cfb8 <puts>
	for (int i = 12; i < 13; i++) {
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	dddd      	ble.n	80011aa <main+0x46>
	}
	printf("=========================================\r\n");
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <main+0xa8>)
 80011f0:	f00b fee2 	bl	800cfb8 <puts>
  {
 80011f4:	e7cc      	b.n	8001190 <main+0x2c>
 80011f6:	bf00      	nop
 80011f8:	0800fdb8 	.word	0x0800fdb8
 80011fc:	20000348 	.word	0x20000348
 8001200:	0800fdc8 	.word	0x0800fdc8
 8001204:	0800fdf8 	.word	0x0800fdf8
 8001208:	0800fe00 	.word	0x0800fe00
 800120c:	0800fe04 	.word	0x0800fe04

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f00b ffaa 	bl	800d178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <SystemClock_Config+0xc8>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <SystemClock_Config+0xc8>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <SystemClock_Config+0xc8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <SystemClock_Config+0xcc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a20      	ldr	r2, [pc, #128]	; (80012dc <SystemClock_Config+0xcc>)
 800125a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <SystemClock_Config+0xcc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001280:	2319      	movs	r3, #25
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f003 f91d 	bl	80044d4 <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a0:	f000 f81e 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2103      	movs	r1, #3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fb7f 	bl	80049c4 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012cc:	f000 f808 	bl	80012e0 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3750      	adds	r7, #80	; 0x50
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <MLX90640_I2CRead>:
void MLX90640_I2CInit(void) {};
int MLX90640_I2CGeneralReset(void) { return 0; };
void MLX90640_I2CFreqSet(int freq) {};

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	460b      	mov	r3, r1
 80012fa:	81bb      	strh	r3, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef ret;
	uint32_t i;
	uint8_t *p = (uint8_t *)data;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	61bb      	str	r3, [r7, #24]

	ret = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr << 1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead * 2, 1000);
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	b29b      	uxth	r3, r3
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	b299      	uxth	r1, r3
 800130c:	897b      	ldrh	r3, [r7, #10]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	b29b      	uxth	r3, r3
 8001312:	89ba      	ldrh	r2, [r7, #12]
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	9002      	str	r0, [sp, #8]
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2310      	movs	r3, #16
 8001322:	481a      	ldr	r0, [pc, #104]	; (800138c <MLX90640_I2CRead+0xa0>)
 8001324:	f001 f8d8 	bl	80024d8 <HAL_I2C_Mem_Read>
 8001328:	4603      	mov	r3, r0
 800132a:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <MLX90640_I2CRead+0x54>
		perr("HAL_I2C_Mem_Read failed\r\n");
 8001332:	2222      	movs	r2, #34	; 0x22
 8001334:	4916      	ldr	r1, [pc, #88]	; (8001390 <MLX90640_I2CRead+0xa4>)
 8001336:	4817      	ldr	r0, [pc, #92]	; (8001394 <MLX90640_I2CRead+0xa8>)
 8001338:	f00b fdd8 	bl	800ceec <iprintf>
		return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e020      	b.n	8001382 <MLX90640_I2CRead+0x96>
	}

	for (i = 0; i < nMemAddressRead * 2; i += 2) {
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	e016      	b.n	8001374 <MLX90640_I2CRead+0x88>
		uint8_t tmp = p[i + 1];
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	75bb      	strb	r3, [r7, #22]

		p[i + 1] = p[i];
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	441a      	add	r2, r3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	440b      	add	r3, r1
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	701a      	strb	r2, [r3, #0]
		p[i] = tmp;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	7dba      	ldrb	r2, [r7, #22]
 800136c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nMemAddressRead * 2; i += 2) {
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3302      	adds	r3, #2
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	461a      	mov	r2, r3
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	4293      	cmp	r3, r2
 800137e:	d3e2      	bcc.n	8001346 <MLX90640_I2CRead+0x5a>
	}

	return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200002f4 	.word	0x200002f4
 8001390:	08010054 	.word	0x08010054
 8001394:	0800fe30 	.word	0x0800fe30

08001398 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr,uint16_t writeAddress, uint16_t data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af04      	add	r7, sp, #16
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	460b      	mov	r3, r1
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	uint8_t cmd[2];

	cmd[0] = data >> 8;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	733b      	strb	r3, [r7, #12]
	cmd[1] = data & 0x00FF;
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Mem_Write(&hi2c1, (slaveAddr << 1), writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 1000);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	b299      	uxth	r1, r3
 80013c2:	88ba      	ldrh	r2, [r7, #4]
 80013c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2302      	movs	r3, #2
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2310      	movs	r3, #16
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <MLX90640_I2CWrite+0x68>)
 80013d8:	f000 ff84 	bl	80022e4 <HAL_I2C_Mem_Write>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <MLX90640_I2CWrite+0x5c>
		perr("HAL_I2C_Mem_Write failed\r\n");
 80013e6:	223a      	movs	r2, #58	; 0x3a
 80013e8:	4906      	ldr	r1, [pc, #24]	; (8001404 <MLX90640_I2CWrite+0x6c>)
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <MLX90640_I2CWrite+0x70>)
 80013ec:	f00b fd7e 	bl	800ceec <iprintf>
		return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <MLX90640_I2CWrite+0x5e>
	}

	return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002f4 	.word	0x200002f4
 8001404:	08010068 	.word	0x08010068
 8001408:	0800fe54 	.word	0x0800fe54

0800140c <mlx_param_init>:


static paramsMLX90640 g_mlx90640_param;

void mlx_param_init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
	int status;
	static uint16_t g_eeMLX90640[832];

	status = MLX90640_SetRefreshRate(MLX90640_I2C_ADDR, FPS16HZ);
 8001412:	2105      	movs	r1, #5
 8001414:	2033      	movs	r0, #51	; 0x33
 8001416:	f005 fe99 	bl	800714c <MLX90640_SetRefreshRate>
 800141a:	6038      	str	r0, [r7, #0]
	if (status != 0) {
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <mlx_param_init+0x22>
		perr("Set refresh rate failed\r\n");
 8001422:	224b      	movs	r2, #75	; 0x4b
 8001424:	493f      	ldr	r1, [pc, #252]	; (8001524 <mlx_param_init+0x118>)
 8001426:	4840      	ldr	r0, [pc, #256]	; (8001528 <mlx_param_init+0x11c>)
 8001428:	f00b fd60 	bl	800ceec <iprintf>
		return;
 800142c:	e076      	b.n	800151c <mlx_param_init+0x110>
	}

	status = MLX90640_SetChessMode(MLX90640_I2C_ADDR);
 800142e:	2033      	movs	r0, #51	; 0x33
 8001430:	f005 febc 	bl	80071ac <MLX90640_SetChessMode>
 8001434:	6038      	str	r0, [r7, #0]
	if (status != 0) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <mlx_param_init+0x3c>
		perr("Set chess mode failed\r\n");
 800143c:	2251      	movs	r2, #81	; 0x51
 800143e:	4939      	ldr	r1, [pc, #228]	; (8001524 <mlx_param_init+0x118>)
 8001440:	483a      	ldr	r0, [pc, #232]	; (800152c <mlx_param_init+0x120>)
 8001442:	f00b fd53 	bl	800ceec <iprintf>
		return;
 8001446:	e069      	b.n	800151c <mlx_param_init+0x110>
	}

	status = MLX90640_DumpEE(MLX90640_I2C_ADDR, g_eeMLX90640);
 8001448:	4939      	ldr	r1, [pc, #228]	; (8001530 <mlx_param_init+0x124>)
 800144a:	2033      	movs	r0, #51	; 0x33
 800144c:	f005 fcaa 	bl	8006da4 <MLX90640_DumpEE>
 8001450:	6038      	str	r0, [r7, #0]
	if (status != 0) {
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <mlx_param_init+0x58>
		perr("Failed to load system parameters\r\n");
 8001458:	2257      	movs	r2, #87	; 0x57
 800145a:	4932      	ldr	r1, [pc, #200]	; (8001524 <mlx_param_init+0x118>)
 800145c:	4835      	ldr	r0, [pc, #212]	; (8001534 <mlx_param_init+0x128>)
 800145e:	f00b fd45 	bl	800ceec <iprintf>
		return;
 8001462:	e05b      	b.n	800151c <mlx_param_init+0x110>
	}

	printf("dump: \r\n");
 8001464:	4834      	ldr	r0, [pc, #208]	; (8001538 <mlx_param_init+0x12c>)
 8001466:	f00b fda7 	bl	800cfb8 <puts>
	for (int i = 0; i < 16; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	e00b      	b.n	8001488 <mlx_param_init+0x7c>
		printf("%d: %x\r\n", i, g_eeMLX90640[i]);
 8001470:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <mlx_param_init+0x124>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001478:	461a      	mov	r2, r3
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	482f      	ldr	r0, [pc, #188]	; (800153c <mlx_param_init+0x130>)
 800147e:	f00b fd35 	bl	800ceec <iprintf>
	for (int i = 0; i < 16; i++) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	ddf0      	ble.n	8001470 <mlx_param_init+0x64>
	}
	printf("sizeof(g_mlx90640_param) = %d \r\n", sizeof(g_mlx90640_param));
 800148e:	f241 217c 	movw	r1, #4732	; 0x127c
 8001492:	482b      	ldr	r0, [pc, #172]	; (8001540 <mlx_param_init+0x134>)
 8001494:	f00b fd2a 	bl	800ceec <iprintf>

	status = MLX90640_ExtractParameters(g_eeMLX90640, &g_mlx90640_param);
 8001498:	492a      	ldr	r1, [pc, #168]	; (8001544 <mlx_param_init+0x138>)
 800149a:	4825      	ldr	r0, [pc, #148]	; (8001530 <mlx_param_init+0x124>)
 800149c:	f005 fe11 	bl	80070c2 <MLX90640_ExtractParameters>
 80014a0:	6038      	str	r0, [r7, #0]
	if (status != 0) {
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <mlx_param_init+0xaa>
		perr("Parameter extraction failed: %d\r\n", status);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2263      	movs	r2, #99	; 0x63
 80014ac:	491d      	ldr	r1, [pc, #116]	; (8001524 <mlx_param_init+0x118>)
 80014ae:	4826      	ldr	r0, [pc, #152]	; (8001548 <mlx_param_init+0x13c>)
 80014b0:	f00b fd1c 	bl	800ceec <iprintf>
		return;
 80014b4:	e032      	b.n	800151c <mlx_param_init+0x110>
	}

	pinfo("kVdd: %d\r\n", g_mlx90640_param.kVdd);
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <mlx_param_init+0x138>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	2267      	movs	r2, #103	; 0x67
 80014be:	4919      	ldr	r1, [pc, #100]	; (8001524 <mlx_param_init+0x118>)
 80014c0:	4822      	ldr	r0, [pc, #136]	; (800154c <mlx_param_init+0x140>)
 80014c2:	f00b fd13 	bl	800ceec <iprintf>
	pinfo("vdd25: %d\r\n", g_mlx90640_param.vdd25);
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <mlx_param_init+0x138>)
 80014c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014cc:	2268      	movs	r2, #104	; 0x68
 80014ce:	4915      	ldr	r1, [pc, #84]	; (8001524 <mlx_param_init+0x118>)
 80014d0:	481f      	ldr	r0, [pc, #124]	; (8001550 <mlx_param_init+0x144>)
 80014d2:	f00b fd0b 	bl	800ceec <iprintf>
	pinfo("KvPTAT: %f\r\n", g_mlx90640_param.KvPTAT);
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <mlx_param_init+0x138>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f83c 	bl	8000558 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9cd 2300 	strd	r2, r3, [sp]
 80014e8:	2269      	movs	r2, #105	; 0x69
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <mlx_param_init+0x118>)
 80014ec:	4819      	ldr	r0, [pc, #100]	; (8001554 <mlx_param_init+0x148>)
 80014ee:	f00b fcfd 	bl	800ceec <iprintf>
	pinfo("KtPTAT: %f\r\n", g_mlx90640_param.KtPTAT);
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <mlx_param_init+0x138>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f82e 	bl	8000558 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9cd 2300 	strd	r2, r3, [sp]
 8001504:	226a      	movs	r2, #106	; 0x6a
 8001506:	4907      	ldr	r1, [pc, #28]	; (8001524 <mlx_param_init+0x118>)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <mlx_param_init+0x14c>)
 800150a:	f00b fcef 	bl	800ceec <iprintf>
	pinfo("vPTAT25: %d\r\n", g_mlx90640_param.vPTAT25);
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <mlx_param_init+0x138>)
 8001510:	899b      	ldrh	r3, [r3, #12]
 8001512:	226b      	movs	r2, #107	; 0x6b
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <mlx_param_init+0x118>)
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <mlx_param_init+0x150>)
 8001518:	f00b fce8 	bl	800ceec <iprintf>
}
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	0801007c 	.word	0x0801007c
 8001528:	0800fe78 	.word	0x0800fe78
 800152c:	0800fe9c 	.word	0x0800fe9c
 8001530:	200021c4 	.word	0x200021c4
 8001534:	0800febc 	.word	0x0800febc
 8001538:	0800fee8 	.word	0x0800fee8
 800153c:	0800fef0 	.word	0x0800fef0
 8001540:	0800fefc 	.word	0x0800fefc
 8001544:	20000f48 	.word	0x20000f48
 8001548:	0800ff20 	.word	0x0800ff20
 800154c:	0800ff4c 	.word	0x0800ff4c
 8001550:	0800ff60 	.word	0x0800ff60
 8001554:	0800ff74 	.word	0x0800ff74
 8001558:	0800ff8c 	.word	0x0800ff8c
 800155c:	0800ffa4 	.word	0x0800ffa4

08001560 <mlx_data_read>:

void mlx_data_read(float data[MLX90640_PIXEL_NUM])
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	uint32_t start;

	//Read both subpages
	for (int x = 0 ; x < 2 ; x++) {
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
 800156c:	e049      	b.n	8001602 <mlx_data_read+0xa2>
		static uint16_t g_mlx90640Frame[834];
		int status;

		start = HAL_GetTick();
 800156e:	f000 fa95 	bl	8001a9c <HAL_GetTick>
 8001572:	6238      	str	r0, [r7, #32]
		status = MLX90640_GetFrameData(MLX90640_I2C_ADDR, g_mlx90640Frame);
 8001574:	4927      	ldr	r1, [pc, #156]	; (8001614 <mlx_data_read+0xb4>)
 8001576:	2033      	movs	r0, #51	; 0x33
 8001578:	f005 fc27 	bl	8006dca <MLX90640_GetFrameData>
 800157c:	61f8      	str	r0, [r7, #28]
		if (status < 0) {
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da05      	bge.n	8001590 <mlx_data_read+0x30>
			perr("GetFrame Error: %d\r\n", status);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	227a      	movs	r2, #122	; 0x7a
 8001588:	4923      	ldr	r1, [pc, #140]	; (8001618 <mlx_data_read+0xb8>)
 800158a:	4824      	ldr	r0, [pc, #144]	; (800161c <mlx_data_read+0xbc>)
 800158c:	f00b fcae 	bl	800ceec <iprintf>
		}
		pinfo("get frame: %d\r\n", HAL_GetTick() - start);
 8001590:	f000 fa84 	bl	8001a9c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	227c      	movs	r2, #124	; 0x7c
 800159c:	491e      	ldr	r1, [pc, #120]	; (8001618 <mlx_data_read+0xb8>)
 800159e:	4820      	ldr	r0, [pc, #128]	; (8001620 <mlx_data_read+0xc0>)
 80015a0:	f00b fca4 	bl	800ceec <iprintf>

		//start = HAL_GetTick();
		float vdd = MLX90640_GetVdd(g_mlx90640Frame, &g_mlx90640_param);
 80015a4:	491f      	ldr	r1, [pc, #124]	; (8001624 <mlx_data_read+0xc4>)
 80015a6:	481b      	ldr	r0, [pc, #108]	; (8001614 <mlx_data_read+0xb4>)
 80015a8:	f006 fb1e 	bl	8007be8 <MLX90640_GetVdd>
 80015ac:	ed87 0a06 	vstr	s0, [r7, #24]
		//pinfo("get vdd: %d\r\n", HAL_GetTick() - start);

		//start = HAL_GetTick();
		float Ta = MLX90640_GetTa(g_mlx90640Frame, &g_mlx90640_param);
 80015b0:	491c      	ldr	r1, [pc, #112]	; (8001624 <mlx_data_read+0xc4>)
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <mlx_data_read+0xb4>)
 80015b4:	f006 fb90 	bl	8007cd8 <MLX90640_GetTa>
 80015b8:	ed87 0a05 	vstr	s0, [r7, #20]
		//pinfo("get ta: %d\r\n", HAL_GetTick() - start);

		float tr = Ta - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 80015bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80015c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015c8:	edc7 7a04 	vstr	s15, [r7, #16]
		float emissivity = 0.95;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <mlx_data_read+0xc8>)
 80015ce:	60fb      	str	r3, [r7, #12]
		start = HAL_GetTick();
 80015d0:	f000 fa64 	bl	8001a9c <HAL_GetTick>
 80015d4:	6238      	str	r0, [r7, #32]
		MLX90640_CalculateTo(g_mlx90640Frame, &g_mlx90640_param, emissivity, tr, data);
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	edd7 0a04 	vldr	s1, [r7, #16]
 80015dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80015e0:	4910      	ldr	r1, [pc, #64]	; (8001624 <mlx_data_read+0xc4>)
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <mlx_data_read+0xb4>)
 80015e4:	f005 fe04 	bl	80071f0 <MLX90640_CalculateTo>
		pinfo("calculate: %d\r\n", HAL_GetTick() - start);
 80015e8:	f000 fa58 	bl	8001a9c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	228a      	movs	r2, #138	; 0x8a
 80015f4:	4908      	ldr	r1, [pc, #32]	; (8001618 <mlx_data_read+0xb8>)
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <mlx_data_read+0xcc>)
 80015f8:	f00b fc78 	bl	800ceec <iprintf>
	for (int x = 0 ; x < 2 ; x++) {
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	3301      	adds	r3, #1
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	2b01      	cmp	r3, #1
 8001606:	ddb2      	ble.n	800156e <mlx_data_read+0xe>
	}
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20002844 	.word	0x20002844
 8001618:	0801008c 	.word	0x0801008c
 800161c:	0800ffbc 	.word	0x0800ffbc
 8001620:	0800ffdc 	.word	0x0800ffdc
 8001624:	20000f48 	.word	0x20000f48
 8001628:	3f733333 	.word	0x3f733333
 800162c:	0800fff4 	.word	0x0800fff4

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f9d2 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <OTG_FS_IRQHandler+0x10>)
 80016da:	f001 fdce 	bl	800327a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200043f4 	.word	0x200043f4

080016e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return 1;
 80016ec:	2301      	movs	r3, #1
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_kill>:

int _kill(int pid, int sig)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001702:	f00b fd8b 	bl	800d21c <__errno>
 8001706:	4603      	mov	r3, r0
 8001708:	2216      	movs	r2, #22
 800170a:	601a      	str	r2, [r3, #0]
  return -1;
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_exit>:

void _exit (int status)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ffe7 	bl	80016f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800172a:	e7fe      	b.n	800172a <_exit+0x12>

0800172c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e00a      	b.n	8001754 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800173e:	f3af 8000 	nop.w
 8001742:	4601      	mov	r1, r0
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	b2ca      	uxtb	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	dbf0      	blt.n	800173e <_read+0x12>
  }

  return len;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e009      	b.n	800178c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fcdd 	bl	8001140 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf1      	blt.n	8001778 <_write+0x12>
  }
  return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_close>:

int _close(int file)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c6:	605a      	str	r2, [r3, #4]
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f00b fcf0 	bl	800d21c <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20020000 	.word	0x20020000
 8001868:	00000400 	.word	0x00000400
 800186c:	20002ec8 	.word	0x20002ec8
 8001870:	20004c70 	.word	0x20004c70

08001874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART2_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f003 fa58 	bl	8004d84 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f7ff fd01 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20002ecc 	.word	0x20002ecc
 80018e8:	40004400 	.word	0x40004400

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_UART_MspInit+0x84>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12b      	bne.n	8001966 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_UART_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001946:	230c      	movs	r3, #12
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001956:	2307      	movs	r3, #7
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_UART_MspInit+0x8c>)
 8001962:	f000 f9dd 	bl	8001d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40004400 	.word	0x40004400
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ff65 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f00b fc3d 	bl	800d228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fbd9 	bl	8001164 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80019c0:	08010468 	.word	0x08010468
  ldr r2, =_sbss
 80019c4:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80019c8:	20004c6c 	.word	0x20004c6c

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f94f 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fe14 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f967 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f92f 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20002f10 	.word	0x20002f10

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20002f10 	.word	0x20002f10

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff29 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff3e 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff31 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffa2 	bl	8001c58 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e159      	b.n	8001ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8148 	bne.w	8001fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d017      	beq.n	8001e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a2 	beq.w	8001fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x202>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x1fe>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_GPIO_Init+0x2f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a46      	ldr	r2, [pc, #280]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x1f6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x1f2>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f aea2 	bls.w	8001d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e12b      	b.n	80022c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff f814 	bl	80010b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020c0:	f002 fe38 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 80020c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4a81      	ldr	r2, [pc, #516]	; (80022d0 <HAL_I2C_Init+0x274>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d807      	bhi.n	80020e0 <HAL_I2C_Init+0x84>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a80      	ldr	r2, [pc, #512]	; (80022d4 <HAL_I2C_Init+0x278>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e006      	b.n	80020ee <HAL_I2C_Init+0x92>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a7d      	ldr	r2, [pc, #500]	; (80022d8 <HAL_I2C_Init+0x27c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0e7      	b.n	80022c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a78      	ldr	r2, [pc, #480]	; (80022dc <HAL_I2C_Init+0x280>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_I2C_Init+0x274>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d802      	bhi.n	8002130 <HAL_I2C_Init+0xd4>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3301      	adds	r3, #1
 800212e:	e009      	b.n	8002144 <HAL_I2C_Init+0xe8>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a69      	ldr	r2, [pc, #420]	; (80022e0 <HAL_I2C_Init+0x284>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	3301      	adds	r3, #1
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	430b      	orrs	r3, r1
 800214a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002156:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	495c      	ldr	r1, [pc, #368]	; (80022d0 <HAL_I2C_Init+0x274>)
 8002160:	428b      	cmp	r3, r1
 8002162:	d819      	bhi.n	8002198 <HAL_I2C_Init+0x13c>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002172:	1c59      	adds	r1, r3, #1
 8002174:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002178:	400b      	ands	r3, r1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_I2C_Init+0x138>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e59      	subs	r1, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fbb1 f3f3 	udiv	r3, r1, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	e051      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002194:	2304      	movs	r3, #4
 8002196:	e04f      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_I2C_Init+0x168>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e012      	b.n	80021ea <HAL_I2C_Init+0x18e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	0099      	lsls	r1, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Init+0x196>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e022      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <HAL_I2C_Init+0x1bc>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e58      	subs	r0, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	440b      	add	r3, r1
 8002208:	fbb0 f3f3 	udiv	r3, r0, r3
 800220c:	3301      	adds	r3, #1
 800220e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002216:	e00f      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	0099      	lsls	r1, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	6809      	ldr	r1, [r1, #0]
 800223c:	4313      	orrs	r3, r2
 800223e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6911      	ldr	r1, [r2, #16]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68d2      	ldr	r2, [r2, #12]
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	430b      	orrs	r3, r1
 800227a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	000186a0 	.word	0x000186a0
 80022d4:	001e847f 	.word	0x001e847f
 80022d8:	003d08ff 	.word	0x003d08ff
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	460b      	mov	r3, r1
 80022f8:	813b      	strh	r3, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022fe:	f7ff fbcd 	bl	8001a9c <HAL_GetTick>
 8002302:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b20      	cmp	r3, #32
 800230e:	f040 80d9 	bne.w	80024c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2319      	movs	r3, #25
 8002318:	2201      	movs	r2, #1
 800231a:	496d      	ldr	r1, [pc, #436]	; (80024d0 <HAL_I2C_Mem_Write+0x1ec>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fc7f 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
 800232a:	e0cc      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_I2C_Mem_Write+0x56>
 8002336:	2302      	movs	r3, #2
 8002338:	e0c5      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d007      	beq.n	8002360 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	; 0x21
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_I2C_Mem_Write+0x1f0>)
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a2:	88f8      	ldrh	r0, [r7, #6]
 80023a4:	893a      	ldrh	r2, [r7, #8]
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4603      	mov	r3, r0
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fab6 	bl	8002924 <I2C_RequestMemoryWrite>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d052      	beq.n	8002464 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e081      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fd00 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d107      	bne.n	80023ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06b      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b04      	cmp	r3, #4
 800242a:	d11b      	bne.n	8002464 <HAL_I2C_Mem_Write+0x180>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d017      	beq.n	8002464 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1aa      	bne.n	80023c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fcec 	bl	8002e4e <I2C_WaitOnBTFFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00d      	beq.n	8002498 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	2b04      	cmp	r3, #4
 8002482:	d107      	bne.n	8002494 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e016      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e000      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	00100002 	.word	0x00100002
 80024d4:	ffff0000 	.word	0xffff0000

080024d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	817b      	strh	r3, [r7, #10]
 80024ea:	460b      	mov	r3, r1
 80024ec:	813b      	strh	r3, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f2:	f7ff fad3 	bl	8001a9c <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b20      	cmp	r3, #32
 8002502:	f040 8208 	bne.w	8002916 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2319      	movs	r3, #25
 800250c:	2201      	movs	r2, #1
 800250e:	497b      	ldr	r1, [pc, #492]	; (80026fc <HAL_I2C_Mem_Read+0x224>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fb85 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	e1fb      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_I2C_Mem_Read+0x56>
 800252a:	2302      	movs	r3, #2
 800252c:	e1f4      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d007      	beq.n	8002554 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2222      	movs	r2, #34	; 0x22
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a5b      	ldr	r2, [pc, #364]	; (8002700 <HAL_I2C_Mem_Read+0x228>)
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002596:	88f8      	ldrh	r0, [r7, #6]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	8979      	ldrh	r1, [r7, #10]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4603      	mov	r3, r0
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa52 	bl	8002a50 <I2C_RequestMemoryRead>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1b0      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	623b      	str	r3, [r7, #32]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	623b      	str	r3, [r7, #32]
 80025d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e184      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d11b      	bne.n	8002626 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e164      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	2b02      	cmp	r3, #2
 800262c:	d11b      	bne.n	8002666 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	e144      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800267c:	e138      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	2b03      	cmp	r3, #3
 8002684:	f200 80f1 	bhi.w	800286a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	2b01      	cmp	r3, #1
 800268e:	d123      	bne.n	80026d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fc1b 	bl	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e139      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d6:	e10b      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d14e      	bne.n	800277e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2200      	movs	r2, #0
 80026e8:	4906      	ldr	r1, [pc, #24]	; (8002704 <HAL_I2C_Mem_Read+0x22c>)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa98 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e10e      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
 80026fa:	bf00      	nop
 80026fc:	00100002 	.word	0x00100002
 8002700:	ffff0000 	.word	0xffff0000
 8002704:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800277c:	e0b8      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	2200      	movs	r2, #0
 8002786:	4966      	ldr	r1, [pc, #408]	; (8002920 <HAL_I2C_Mem_Read+0x448>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fa49 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0bf      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	2200      	movs	r2, #0
 80027e2:	494f      	ldr	r1, [pc, #316]	; (8002920 <HAL_I2C_Mem_Read+0x448>)
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fa1b 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e091      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002868:	e042      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fb2e 	bl	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e04c      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d118      	bne.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f aec2 	bne.w	800267e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00010004 	.word	0x00010004

08002924 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	817b      	strh	r3, [r7, #10]
 8002936:	460b      	mov	r3, r1
 8002938:	813b      	strh	r3, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2200      	movs	r2, #0
 8002956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f960 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002974:	d103      	bne.n	800297e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e05f      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	492d      	ldr	r1, [pc, #180]	; (8002a4c <I2C_RequestMemoryWrite+0x128>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f998 	bl	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04c      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa02 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02b      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e021      	b.n	8002a40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f9dc 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d107      	bne.n	8002a32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e005      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	00010002 	.word	0x00010002

08002a50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	460b      	mov	r3, r1
 8002a64:	813b      	strh	r3, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f8c2 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab0:	d103      	bne.n	8002aba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0aa      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002acc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	4952      	ldr	r1, [pc, #328]	; (8002c1c <I2C_RequestMemoryRead+0x1cc>)
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f8fa 	bl	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e097      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f964 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d107      	bne.n	8002b22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e076      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2c:	893b      	ldrh	r3, [r7, #8]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	e021      	b.n	8002b7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	6a39      	ldr	r1, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f93e 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d107      	bne.n	8002b6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e050      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	6a39      	ldr	r1, [r7, #32]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f923 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d107      	bne.n	8002ba4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e035      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f82b 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bde:	d103      	bne.n	8002be8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e013      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bec:	897b      	ldrh	r3, [r7, #10]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	4906      	ldr	r1, [pc, #24]	; (8002c1c <I2C_RequestMemoryRead+0x1cc>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f863 	bl	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	00010002 	.word	0x00010002

08002c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c30:	e025      	b.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d021      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7fe ff2f 	bl	8001a9c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e023      	b.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10d      	bne.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	e00c      	b.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d0b6      	beq.n	8002c32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cdc:	e051      	b.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cec:	d123      	bne.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e046      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d021      	beq.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fe fead 	bl	8001a9c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e020      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10c      	bne.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e00b      	b.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	43da      	mvns	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d18d      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd8:	e02d      	b.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8ce 	bl	8002f7c <I2C_IsAcknowledgeFailed>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02d      	b.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d021      	beq.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe fe53 	bl	8001a9c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d1ca      	bne.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e5a:	e02d      	b.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f88d 	bl	8002f7c <I2C_IsAcknowledgeFailed>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e02d      	b.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d021      	beq.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e74:	f7fe fe12 	bl	8001a9c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d302      	bcc.n	8002e8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e007      	b.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d1ca      	bne.n	8002e5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002edc:	e042      	b.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d119      	bne.n	8002f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0210 	mvn.w	r2, #16
 8002ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e029      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7fe fdbc 	bl	8001a9c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d116      	bne.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e007      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d1b5      	bne.n	8002ede <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f92:	d11b      	bne.n	8002fcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0204 	orr.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fdc:	b08f      	sub	sp, #60	; 0x3c
 8002fde:	af0a      	add	r7, sp, #40	; 0x28
 8002fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e10f      	b.n	800320c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f008 ff50 	bl	800beac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f002 fb81 	bl	8005732 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	687e      	ldr	r6, [r7, #4]
 8003038:	466d      	mov	r5, sp
 800303a:	f106 0410 	add.w	r4, r6, #16
 800303e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800304a:	e885 0003 	stmia.w	r5, {r0, r1}
 800304e:	1d33      	adds	r3, r6, #4
 8003050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003052:	6838      	ldr	r0, [r7, #0]
 8003054:	f002 fa58 	bl	8005508 <USB_CoreInit>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0d0      	b.n	800320c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fb6f 	bl	8005754 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e04a      	b.n	8003112 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	333d      	adds	r3, #61	; 0x3d
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	333c      	adds	r3, #60	; 0x3c
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	b298      	uxth	r0, r3
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	3344      	adds	r3, #68	; 0x44
 80030b8:	4602      	mov	r2, r0
 80030ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3340      	adds	r3, #64	; 0x40
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3348      	adds	r3, #72	; 0x48
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	334c      	adds	r3, #76	; 0x4c
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3354      	adds	r3, #84	; 0x54
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	3301      	adds	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3af      	bcc.n	800307c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e044      	b.n	80031ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3b5      	bcc.n	8003122 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	687e      	ldr	r6, [r7, #4]
 80031be:	466d      	mov	r5, sp
 80031c0:	f106 0410 	add.w	r4, r6, #16
 80031c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80031d4:	1d33      	adds	r3, r6, #4
 80031d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d8:	6838      	ldr	r0, [r7, #0]
 80031da:	f002 fb07 	bl	80057ec <USB_DevInit>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e00d      	b.n	800320c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f003 fc56 	bl	8006ab6 <USB_DevDisconnect>

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003214 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_PCD_Start+0x1c>
 800322c:	2302      	movs	r3, #2
 800322e:	e020      	b.n	8003272 <HAL_PCD_Start+0x5e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	2b01      	cmp	r3, #1
 800323e:	d109      	bne.n	8003254 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003244:	2b01      	cmp	r3, #1
 8003246:	d005      	beq.n	8003254 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f002 fa59 	bl	8005710 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f003 fc06 	bl	8006a74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800327a:	b590      	push	{r4, r7, lr}
 800327c:	b08d      	sub	sp, #52	; 0x34
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f003 fcc4 	bl	8006c1e <USB_GetMode>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	f040 848a 	bne.w	8003bb2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 fc28 	bl	8006af8 <USB_ReadInterrupts>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8480 	beq.w	8003bb0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fc15 	bl	8006af8 <USB_ReadInterrupts>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d107      	bne.n	80032e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f002 0202 	and.w	r2, r2, #2
 80032e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fc03 	bl	8006af8 <USB_ReadInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d161      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0210 	bic.w	r2, r2, #16
 800330a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	0c5b      	lsrs	r3, r3, #17
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	2b02      	cmp	r3, #2
 8003336:	d124      	bne.n	8003382 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d035      	beq.n	80033b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800334e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	6a38      	ldr	r0, [r7, #32]
 8003358:	f003 fa3a 	bl	80067d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003368:	441a      	add	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6a1a      	ldr	r2, [r3, #32]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337a:	441a      	add	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
 8003380:	e016      	b.n	80033b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	0c5b      	lsrs	r3, r3, #17
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	2b06      	cmp	r3, #6
 800338c:	d110      	bne.n	80033b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003394:	2208      	movs	r2, #8
 8003396:	4619      	mov	r1, r3
 8003398:	6a38      	ldr	r0, [r7, #32]
 800339a:	f003 fa19 	bl	80067d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033aa:	441a      	add	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0210 	orr.w	r2, r2, #16
 80033be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fb97 	bl	8006af8 <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033d4:	f040 80a7 	bne.w	8003526 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fb9c 	bl	8006b1e <USB_ReadDevAllOutEpInterrupt>
 80033e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033e8:	e099      	b.n	800351e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 808e 	beq.w	8003512 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fbc0 	bl	8006b86 <USB_ReadDevOutEPInterrupt>
 8003406:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341e:	461a      	mov	r2, r3
 8003420:	2301      	movs	r3, #1
 8003422:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fec2 	bl	80041b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	2308      	movs	r3, #8
 8003446:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 ff98 	bl	8004380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003466:	461a      	mov	r2, r3
 8003468:	2310      	movs	r3, #16
 800346a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d030      	beq.n	80034d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d109      	bne.n	8003496 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003494:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d108      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f008 fdef 	bl	800c0a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	2302      	movs	r3, #2
 80034d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ee:	461a      	mov	r2, r3
 80034f0:	2320      	movs	r3, #32
 80034f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350a:	461a      	mov	r2, r3
 800350c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003510:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	3301      	adds	r3, #1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f af62 	bne.w	80033ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fae4 	bl	8006af8 <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800353a:	f040 80db 	bne.w	80036f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f003 fb05 	bl	8006b52 <USB_ReadDevAllInEpInterrupt>
 8003548:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800354e:	e0cd      	b.n	80036ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80c2 	beq.w	80036e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f003 fb2b 	bl	8006bc2 <USB_ReadDevInEPInterrupt>
 800356c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d057      	beq.n	8003628 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	2201      	movs	r2, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	43db      	mvns	r3, r3
 8003592:	69f9      	ldr	r1, [r7, #28]
 8003594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003598:	4013      	ands	r3, r2
 800359a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a8:	461a      	mov	r2, r3
 80035aa:	2301      	movs	r3, #1
 80035ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d132      	bne.n	800361c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	334c      	adds	r3, #76	; 0x4c
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4403      	add	r3, r0
 80035d6:	3348      	adds	r3, #72	; 0x48
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4419      	add	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4403      	add	r3, r0
 80035ea:	334c      	adds	r3, #76	; 0x4c
 80035ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d113      	bne.n	800361c <HAL_PCD_IRQHandler+0x3a2>
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3354      	adds	r3, #84	; 0x54
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d108      	bne.n	800361c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003614:	461a      	mov	r2, r3
 8003616:	2101      	movs	r1, #1
 8003618:	f003 fb32 	bl	8006c80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	b2db      	uxtb	r3, r3
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f008 fcc3 	bl	800bfae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	461a      	mov	r2, r3
 8003640:	2308      	movs	r3, #8
 8003642:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365a:	461a      	mov	r2, r3
 800365c:	2310      	movs	r3, #16
 800365e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003676:	461a      	mov	r2, r3
 8003678:	2340      	movs	r3, #64	; 0x40
 800367a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d023      	beq.n	80036ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003688:	6a38      	ldr	r0, [r7, #32]
 800368a:	f002 fa13 	bl	8005ab4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800368e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	3338      	adds	r3, #56	; 0x38
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	3304      	adds	r3, #4
 80036a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	78db      	ldrb	r3, [r3, #3]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f008 fd06 	bl	800c0c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	461a      	mov	r2, r3
 80036ca:	2302      	movs	r3, #2
 80036cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fcdb 	bl	8004096 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	3301      	adds	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f47f af2e 	bne.w	8003550 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 f9fd 	bl	8006af8 <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003708:	d122      	bne.n	8003750 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003724:	2b01      	cmp	r3, #1
 8003726:	d108      	bne.n	800373a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003730:	2100      	movs	r1, #0
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fec2 	bl	80044bc <HAL_PCDEx_LPM_Callback>
 8003738:	e002      	b.n	8003740 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f008 fca4 	bl	800c088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800374e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f003 f9cf 	bl	8006af8 <USB_ReadInterrupts>
 800375a:	4603      	mov	r3, r0
 800375c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003764:	d112      	bne.n	800378c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f008 fc60 	bl	800c03c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800378a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f003 f9b1 	bl	8006af8 <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	f040 80b7 	bne.w	8003912 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2110      	movs	r1, #16
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 f978 	bl	8005ab4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c8:	e046      	b.n	8003858 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d6:	461a      	mov	r2, r3
 80037d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003810:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800382c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003830:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003850:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	3301      	adds	r3, #1
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385e:	429a      	cmp	r2, r3
 8003860:	d3b3      	bcc.n	80037ca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003870:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003874:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388e:	f043 030b 	orr.w	r3, r3, #11
 8003892:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a4:	f043 030b 	orr.w	r3, r3, #11
 80038a8:	6453      	str	r3, [r2, #68]	; 0x44
 80038aa:	e015      	b.n	80038d8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038be:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d2:	f043 030b 	orr.w	r3, r3, #11
 80038d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038fc:	461a      	mov	r2, r3
 80038fe:	f003 f9bf 	bl	8006c80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f003 f8ee 	bl	8006af8 <USB_ReadInterrupts>
 800391c:	4603      	mov	r3, r0
 800391e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003926:	d124      	bne.n	8003972 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f003 f984 	bl	8006c3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f002 f939 	bl	8005bae <USB_GetDevSpeed>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	f001 f9e8 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 800394c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	4620      	mov	r0, r4
 8003958:	f001 fe38 	bl	80055cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f008 fb4e 	bl	800bffe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003970:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f003 f8be 	bl	8006af8 <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d10a      	bne.n	800399c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f008 fb2b 	bl	800bfe2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f002 0208 	and.w	r2, r2, #8
 800399a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 f8a9 	bl	8006af8 <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d122      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039bc:	2301      	movs	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	e014      	b.n	80039ec <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	4613      	mov	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fb27 	bl	8004034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	3301      	adds	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3e5      	bcc.n	80039c2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 f87c 	bl	8006af8 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0a:	d13b      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a10:	e02b      	b.n	8003a6a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3340      	adds	r3, #64	; 0x40
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d115      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	da12      	bge.n	8003a64 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	333f      	adds	r3, #63	; 0x3f
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fae8 	bl	8004034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	3301      	adds	r3, #1
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3ce      	bcc.n	8003a12 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 f835 	bl	8006af8 <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a98:	d155      	bne.n	8003b46 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e045      	b.n	8003b2c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d12e      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ac8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da2b      	bge.n	8003b26 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ada:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d121      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b22:	6053      	str	r3, [r2, #4]
            break;
 8003b24:	e007      	b.n	8003b36 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	3301      	adds	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d3b4      	bcc.n	8003aa0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 ffd4 	bl	8006af8 <USB_ReadInterrupts>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d10a      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f008 fac5 	bl	800c0ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 ffbe 	bl	8006af8 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d115      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f008 fab5 	bl	800c108 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e000      	b.n	8003bb2 <HAL_PCD_IRQHandler+0x938>
      return;
 8003bb0:	bf00      	nop
    }
  }
}
 8003bb2:	3734      	adds	r7, #52	; 0x34
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}

08003bb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_PCD_SetAddress+0x1a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e013      	b.n	8003bfa <HAL_PCD_SetAddress+0x42>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f002 ff1c 	bl	8006a28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4603      	mov	r3, r0
 8003c12:	70fb      	strb	r3, [r7, #3]
 8003c14:	460b      	mov	r3, r1
 8003c16:	803b      	strh	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	da0f      	bge.n	8003c48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	3338      	adds	r3, #56	; 0x38
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	705a      	strb	r2, [r3, #1]
 8003c46:	e00f      	b.n	8003c68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3304      	adds	r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c74:	883a      	ldrh	r2, [r7, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	78ba      	ldrb	r2, [r7, #2]
 8003c7e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c92:	78bb      	ldrb	r3, [r7, #2]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d102      	bne.n	8003c9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_PCD_EP_Open+0xaa>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e00e      	b.n	8003cca <HAL_PCD_EP_Open+0xc8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68f9      	ldr	r1, [r7, #12]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 ff9c 	bl	8005bf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da0f      	bge.n	8003d06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	3338      	adds	r3, #56	; 0x38
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	705a      	strb	r2, [r3, #1]
 8003d04:	e00f      	b.n	8003d26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 020f 	and.w	r2, r3, #15
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_PCD_EP_Close+0x6e>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e00e      	b.n	8003d5e <HAL_PCD_EP_Close+0x8c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68f9      	ldr	r1, [r7, #12]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 ffda 	bl	8005d08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b086      	sub	sp, #24
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	460b      	mov	r3, r1
 8003d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d76:	7afb      	ldrb	r3, [r7, #11]
 8003d78:	f003 020f 	and.w	r2, r3, #15
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da8:	7afb      	ldrb	r3, [r7, #11]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d102      	bne.n	8003dc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dc2:	7afb      	ldrb	r3, [r7, #11]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	6979      	ldr	r1, [r7, #20]
 8003dda:	f002 fab9 	bl	8006350 <USB_EP0StartXfer>
 8003dde:	e008      	b.n	8003df2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	6979      	ldr	r1, [r7, #20]
 8003dee:	f002 f867 	bl	8005ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 020f 	and.w	r2, r3, #15
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
 8003e3e:	f003 020f 	and.w	r2, r3, #15
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	3338      	adds	r3, #56	; 0x38
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	3304      	adds	r3, #4
 8003e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e6c:	7afb      	ldrb	r3, [r7, #11]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d102      	bne.n	8003e86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e86:	7afb      	ldrb	r3, [r7, #11]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6979      	ldr	r1, [r7, #20]
 8003e9e:	f002 fa57 	bl	8006350 <USB_EP0StartXfer>
 8003ea2:	e008      	b.n	8003eb6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6979      	ldr	r1, [r7, #20]
 8003eb2:	f002 f805 	bl	8005ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d901      	bls.n	8003ede <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e050      	b.n	8003f80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da0f      	bge.n	8003f06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 020f 	and.w	r2, r3, #15
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	3338      	adds	r3, #56	; 0x38
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	3304      	adds	r3, #4
 8003efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	705a      	strb	r2, [r3, #1]
 8003f04:	e00d      	b.n	8003f22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_PCD_EP_SetStall+0x82>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e01e      	b.n	8003f80 <HAL_PCD_EP_SetStall+0xc0>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f002 fc95 	bl	8006880 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	b2d9      	uxtb	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f70:	461a      	mov	r2, r3
 8003f72:	f002 fe85 	bl	8006c80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 020f 	and.w	r2, r3, #15
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d901      	bls.n	8003fa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e042      	b.n	800402c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da0f      	bge.n	8003fce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3338      	adds	r3, #56	; 0x38
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	705a      	strb	r2, [r3, #1]
 8003fcc:	e00f      	b.n	8003fee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_PCD_EP_ClrStall+0x86>
 800400a:	2302      	movs	r3, #2
 800400c:	e00e      	b.n	800402c <HAL_PCD_EP_ClrStall+0xa4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	4618      	mov	r0, r3
 800401e:	f002 fc9d 	bl	800695c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0c      	bge.n	8004062 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3338      	adds	r3, #56	; 0x38
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	3304      	adds	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e00c      	b.n	800407c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	4618      	mov	r0, r3
 8004084:	f002 fabc 	bl	8006600 <USB_EPStopXfer>
 8004088:	4603      	mov	r3, r0
 800408a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800408c:	7afb      	ldrb	r3, [r7, #11]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b08a      	sub	sp, #40	; 0x28
 800409a:	af02      	add	r7, sp, #8
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	3338      	adds	r3, #56	; 0x38
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	3304      	adds	r3, #4
 80040bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d901      	bls.n	80040ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e06c      	b.n	80041a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d902      	bls.n	80040ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3303      	adds	r3, #3
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f2:	e02b      	b.n	800414c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	429a      	cmp	r2, r3
 8004108:	d902      	bls.n	8004110 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3303      	adds	r3, #3
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6919      	ldr	r1, [r3, #16]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004128:	b2db      	uxtb	r3, r3
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f002 fb10 	bl	8006754 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1a      	ldr	r2, [r3, #32]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	441a      	add	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d809      	bhi.n	8004176 <PCD_WriteEmptyTxFifo+0xe0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1a      	ldr	r2, [r3, #32]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800416a:	429a      	cmp	r2, r3
 800416c:	d203      	bcs.n	8004176 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1be      	bne.n	80040f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	429a      	cmp	r2, r3
 8004180:	d811      	bhi.n	80041a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	43db      	mvns	r3, r3
 800419c:	6939      	ldr	r1, [r7, #16]
 800419e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a2:	4013      	ands	r3, r2
 80041a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	333c      	adds	r3, #60	; 0x3c
 80041c8:	3304      	adds	r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d17b      	bne.n	80042de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4a61      	ldr	r2, [pc, #388]	; (8004378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	f240 80b9 	bls.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80b3 	beq.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	461a      	mov	r2, r3
 8004214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004218:	6093      	str	r3, [r2, #8]
 800421a:	e0a7      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	2320      	movs	r3, #32
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e098      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 8093 	bne.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4a4b      	ldr	r2, [pc, #300]	; (8004378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d90f      	bls.n	800426e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426a:	6093      	str	r3, [r2, #8]
 800426c:	e07e      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	440b      	add	r3, r1
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d114      	bne.n	80042d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042b8:	461a      	mov	r2, r3
 80042ba:	2101      	movs	r1, #1
 80042bc:	f002 fce0 	bl	8006c80 <USB_EP0_OutStart>
 80042c0:	e006      	b.n	80042d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f007 fe4e 	bl	800bf78 <HAL_PCD_DataOutStageCallback>
 80042dc:	e046      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4a26      	ldr	r2, [pc, #152]	; (800437c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d124      	bne.n	8004330 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	e032      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	2320      	movs	r3, #32
 8004320:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f007 fe25 	bl	800bf78 <HAL_PCD_DataOutStageCallback>
 800432e:	e01d      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d114      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004358:	461a      	mov	r2, r3
 800435a:	2100      	movs	r1, #0
 800435c:	f002 fc90 	bl	8006c80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f007 fe06 	bl	800bf78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	4f54300a 	.word	0x4f54300a
 800437c:	4f54310a 	.word	0x4f54310a

08004380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	333c      	adds	r3, #60	; 0x3c
 8004398:	3304      	adds	r3, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <PCD_EP_OutSetupPacket_int+0x88>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d90e      	bls.n	80043d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f007 fdbd 	bl	800bf54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <PCD_EP_OutSetupPacket_int+0x88>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d90c      	bls.n	80043fc <PCD_EP_OutSetupPacket_int+0x7c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d108      	bne.n	80043fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043f4:	461a      	mov	r2, r3
 80043f6:	2101      	movs	r1, #1
 80043f8:	f002 fc42 	bl	8006c80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	4f54300a 	.word	0x4f54300a

0800440c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
 8004418:	4613      	mov	r3, r2
 800441a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800442a:	883b      	ldrh	r3, [r7, #0]
 800442c:	0419      	lsls	r1, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	430a      	orrs	r2, r1
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
 8004438:	e028      	b.n	800448c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e00d      	b.n	800446a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3340      	adds	r3, #64	; 0x40
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	3301      	adds	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	3b01      	subs	r3, #1
 8004470:	429a      	cmp	r2, r3
 8004472:	d3ec      	bcc.n	800444e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004474:	883b      	ldrh	r3, [r7, #0]
 8004476:	0418      	lsls	r0, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6819      	ldr	r1, [r3, #0]
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	3b01      	subs	r3, #1
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4302      	orrs	r2, r0
 8004484:	3340      	adds	r3, #64	; 0x40
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	887a      	ldrh	r2, [r7, #2]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e267      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d075      	beq.n	80045de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d00c      	beq.n	8004518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fe:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004506:	2b08      	cmp	r3, #8
 8004508:	d112      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450a:	4b82      	ldr	r3, [pc, #520]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004516:	d10b      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	4b7e      	ldr	r3, [pc, #504]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d05b      	beq.n	80045dc <HAL_RCC_OscConfig+0x108>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d157      	bne.n	80045dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e242      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x74>
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x98>
 8004552:	4b70      	ldr	r3, [pc, #448]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6f      	ldr	r2, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6c      	ldr	r2, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 800456c:	4b69      	ldr	r3, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a68      	ldr	r2, [pc, #416]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b66      	ldr	r3, [pc, #408]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a65      	ldr	r2, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd fa86 	bl	8001a9c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd fa82 	bl	8001a9c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e207      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xc0>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fd fa72 	bl	8001a9c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fd fa6e 	bl	8001a9c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1f3      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0xe8>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1c7      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_OscConfig+0x244>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fd fa27 	bl	8001a9c <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004652:	f7fd fa23 	bl	8001a9c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a8      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4925      	ldr	r1, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCC_OscConfig+0x244>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd fa06 	bl	8001a9c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004694:	f7fd fa02 	bl	8001a9c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e187      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d036      	beq.n	800472c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x248>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fd f9e6 	bl	8001a9c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fd f9e2 	bl	8001a9c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e167      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x200>
 80046f2:	e01b      	b.n	800472c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCC_OscConfig+0x248>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fd f9cf 	bl	8001a9c <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	e00e      	b.n	8004720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004702:	f7fd f9cb 	bl	8001a9c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d907      	bls.n	8004720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e150      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004714:	40023800 	.word	0x40023800
 8004718:	42470000 	.word	0x42470000
 800471c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ea      	bne.n	8004702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8097 	beq.w	8004868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b81      	ldr	r3, [pc, #516]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	4b7d      	ldr	r3, [pc, #500]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a7c      	ldr	r2, [pc, #496]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b7a      	ldr	r3, [pc, #488]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	4b77      	ldr	r3, [pc, #476]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004776:	4b74      	ldr	r3, [pc, #464]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a73      	ldr	r2, [pc, #460]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fd f98b 	bl	8001a9c <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fd f987 	bl	8001a9c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e10c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x2ea>
 80047b0:	4b64      	ldr	r3, [pc, #400]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a63      	ldr	r2, [pc, #396]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e01c      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x30c>
 80047c6:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a5e      	ldr	r2, [pc, #376]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b5c      	ldr	r3, [pc, #368]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a5b      	ldr	r2, [pc, #364]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047e0:	4b58      	ldr	r3, [pc, #352]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a57      	ldr	r2, [pc, #348]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	4b55      	ldr	r3, [pc, #340]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a54      	ldr	r2, [pc, #336]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 0304 	bic.w	r3, r3, #4
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd f94c 	bl	8001a9c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fd f948 	bl	8001a9c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0cb      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481e:	4b49      	ldr	r3, [pc, #292]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ee      	beq.n	8004808 <HAL_RCC_OscConfig+0x334>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fd f936 	bl	8001a9c <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fd f932 	bl	8001a9c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0b5      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484a:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ee      	bne.n	8004834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485c:	4b39      	ldr	r3, [pc, #228]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80a1 	beq.w	80049b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004872:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d05c      	beq.n	8004938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d141      	bne.n	800490a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b31      	ldr	r3, [pc, #196]	; (800494c <HAL_RCC_OscConfig+0x478>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fd f906 	bl	8001a9c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fd f902 	bl	8001a9c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e087      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	3b01      	subs	r3, #1
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	491b      	ldr	r1, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x478>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fd f8db 	bl	8001a9c <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fd f8d7 	bl	8001a9c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e05c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x416>
 8004908:	e054      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCC_OscConfig+0x478>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd f8c4 	bl	8001a9c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fd f8c0 	bl	8001a9c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e045      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x444>
 8004936:	e03d      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e038      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004944:	40023800 	.word	0x40023800
 8004948:	40007000 	.word	0x40007000
 800494c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004950:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_RCC_OscConfig+0x4ec>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d028      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d121      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d11a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004988:	4293      	cmp	r3, r2
 800498a:	d111      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	3b01      	subs	r3, #1
 800499a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0cc      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b68      	ldr	r3, [pc, #416]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90c      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b65      	ldr	r3, [pc, #404]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0b8      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a18:	4b59      	ldr	r3, [pc, #356]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a30:	4b53      	ldr	r3, [pc, #332]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a52      	ldr	r2, [pc, #328]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	494d      	ldr	r1, [pc, #308]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d044      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d119      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e07f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e067      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b37      	ldr	r3, [pc, #220]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4934      	ldr	r1, [pc, #208]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fc fff2 	bl	8001a9c <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fc ffee 	bl	8001a9c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e04f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d20c      	bcs.n	8004b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e032      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4916      	ldr	r1, [pc, #88]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	490e      	ldr	r1, [pc, #56]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4a:	f000 f821 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490a      	ldr	r1, [pc, #40]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fc ff52 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023c00 	.word	0x40023c00
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0801009c 	.word	0x0801009c
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	20000004 	.word	0x20000004

08004b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b090      	sub	sp, #64	; 0x40
 8004b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	f200 80a1 	bhi.w	8004cfc <HAL_RCC_GetSysClockFreq+0x16c>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc2:	e09b      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004bc8:	e09b      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bca:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bce:	e098      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd0:	4b4f      	ldr	r3, [pc, #316]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bda:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d028      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b4a      	ldr	r3, [pc, #296]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	2200      	movs	r2, #0
 8004bee:	623b      	str	r3, [r7, #32]
 8004bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bfc:	fb03 f201 	mul.w	r2, r3, r1
 8004c00:	2300      	movs	r3, #0
 8004c02:	fb00 f303 	mul.w	r3, r0, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	4a43      	ldr	r2, [pc, #268]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c0a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c10:	460a      	mov	r2, r1
 8004c12:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c16:	4413      	add	r3, r2
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	61fa      	str	r2, [r7, #28]
 8004c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c2a:	f7fc f835 	bl	8000c98 <__aeabi_uldivmod>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4613      	mov	r3, r2
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c36:	e053      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c38:	4b35      	ldr	r3, [pc, #212]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	099b      	lsrs	r3, r3, #6
 8004c3e:	2200      	movs	r2, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	617a      	str	r2, [r7, #20]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c4a:	f04f 0b00 	mov.w	fp, #0
 8004c4e:	4652      	mov	r2, sl
 8004c50:	465b      	mov	r3, fp
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c60:	0150      	lsls	r0, r2, #5
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	ebb2 080a 	subs.w	r8, r2, sl
 8004c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c82:	ebb2 0408 	subs.w	r4, r2, r8
 8004c86:	eb63 0509 	sbc.w	r5, r3, r9
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	00eb      	lsls	r3, r5, #3
 8004c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c98:	00e2      	lsls	r2, r4, #3
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	461d      	mov	r5, r3
 8004c9e:	eb14 030a 	adds.w	r3, r4, sl
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	eb45 030b 	adc.w	r3, r5, fp
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	028b      	lsls	r3, r1, #10
 8004cba:	4621      	mov	r1, r4
 8004cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	028a      	lsls	r2, r1, #10
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	60fa      	str	r2, [r7, #12]
 8004cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd4:	f7fb ffe0 	bl	8000c98 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4613      	mov	r3, r2
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	3301      	adds	r3, #1
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3740      	adds	r7, #64	; 0x40
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	00f42400 	.word	0x00f42400
 8004d18:	017d7840 	.word	0x017d7840

08004d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000000 	.word	0x20000000

08004d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d38:	f7ff fff0 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0a9b      	lsrs	r3, r3, #10
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4903      	ldr	r1, [pc, #12]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40023800 	.word	0x40023800
 8004d58:	080100ac 	.word	0x080100ac

08004d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d60:	f7ff ffdc 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0b5b      	lsrs	r3, r3, #13
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	080100ac 	.word	0x080100ac

08004d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e03f      	b.n	8004e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fd9e 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	; 0x24
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f929 	bl	8005020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08a      	sub	sp, #40	; 0x28
 8004e22:	af02      	add	r7, sp, #8
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d17c      	bne.n	8004f38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_UART_Transmit+0x2c>
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e075      	b.n	8004f3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_UART_Transmit+0x3e>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e06e      	b.n	8004f3a <HAL_UART_Transmit+0x11c>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2221      	movs	r2, #33	; 0x21
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e72:	f7fc fe13 	bl	8001a9c <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	88fa      	ldrh	r2, [r7, #6]
 8004e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8c:	d108      	bne.n	8004ea0 <HAL_UART_Transmit+0x82>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e003      	b.n	8004ea8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004eb0:	e02a      	b.n	8004f08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f840 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e036      	b.n	8004f3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	e007      	b.n	8004efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1cf      	bne.n	8004eb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2140      	movs	r1, #64	; 0x40
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f810 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e006      	b.n	8004f3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e000      	b.n	8004f3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b090      	sub	sp, #64	; 0x40
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f52:	e050      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d04c      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f62:	f7fc fd9b 	bl	8001a9c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d241      	bcs.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f92:	637a      	str	r2, [r7, #52]	; 0x34
 8004f94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc6:	623a      	str	r2, [r7, #32]
 8004fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	69f9      	ldr	r1, [r7, #28]
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e5      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e00f      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4013      	ands	r3, r2
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	429a      	cmp	r2, r3
 8005004:	bf0c      	ite	eq
 8005006:	2301      	moveq	r3, #1
 8005008:	2300      	movne	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	429a      	cmp	r2, r3
 8005012:	d09f      	beq.n	8004f54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3740      	adds	r7, #64	; 0x40
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005024:	b0c0      	sub	sp, #256	; 0x100
 8005026:	af00      	add	r7, sp, #0
 8005028:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	68d9      	ldr	r1, [r3, #12]
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	ea40 0301 	orr.w	r3, r0, r1
 8005048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	431a      	orrs	r2, r3
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	431a      	orrs	r2, r3
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005078:	f021 010c 	bic.w	r1, r1, #12
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005086:	430b      	orrs	r3, r1
 8005088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509a:	6999      	ldr	r1, [r3, #24]
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	ea40 0301 	orr.w	r3, r0, r1
 80050a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b8f      	ldr	r3, [pc, #572]	; (80052ec <UART_SetConfig+0x2cc>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d005      	beq.n	80050c0 <UART_SetConfig+0xa0>
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b8d      	ldr	r3, [pc, #564]	; (80052f0 <UART_SetConfig+0x2d0>)
 80050bc:	429a      	cmp	r2, r3
 80050be:	d104      	bne.n	80050ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c0:	f7ff fe4c 	bl	8004d5c <HAL_RCC_GetPCLK2Freq>
 80050c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050c8:	e003      	b.n	80050d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ca:	f7ff fe33 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 80050ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	f040 810c 	bne.w	80052f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050f2:	4622      	mov	r2, r4
 80050f4:	462b      	mov	r3, r5
 80050f6:	1891      	adds	r1, r2, r2
 80050f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050fa:	415b      	adcs	r3, r3
 80050fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005102:	4621      	mov	r1, r4
 8005104:	eb12 0801 	adds.w	r8, r2, r1
 8005108:	4629      	mov	r1, r5
 800510a:	eb43 0901 	adc.w	r9, r3, r1
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005122:	4690      	mov	r8, r2
 8005124:	4699      	mov	r9, r3
 8005126:	4623      	mov	r3, r4
 8005128:	eb18 0303 	adds.w	r3, r8, r3
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005130:	462b      	mov	r3, r5
 8005132:	eb49 0303 	adc.w	r3, r9, r3
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005146:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800514a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800514e:	460b      	mov	r3, r1
 8005150:	18db      	adds	r3, r3, r3
 8005152:	653b      	str	r3, [r7, #80]	; 0x50
 8005154:	4613      	mov	r3, r2
 8005156:	eb42 0303 	adc.w	r3, r2, r3
 800515a:	657b      	str	r3, [r7, #84]	; 0x54
 800515c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005164:	f7fb fd98 	bl	8000c98 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4b61      	ldr	r3, [pc, #388]	; (80052f4 <UART_SetConfig+0x2d4>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	011c      	lsls	r4, r3, #4
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005180:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005190:	415b      	adcs	r3, r3
 8005192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005198:	4641      	mov	r1, r8
 800519a:	eb12 0a01 	adds.w	sl, r2, r1
 800519e:	4649      	mov	r1, r9
 80051a0:	eb43 0b01 	adc.w	fp, r3, r1
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b8:	4692      	mov	sl, r2
 80051ba:	469b      	mov	fp, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	eb1a 0303 	adds.w	r3, sl, r3
 80051c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051c6:	464b      	mov	r3, r9
 80051c8:	eb4b 0303 	adc.w	r3, fp, r3
 80051cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051e4:	460b      	mov	r3, r1
 80051e6:	18db      	adds	r3, r3, r3
 80051e8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ea:	4613      	mov	r3, r2
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	647b      	str	r3, [r7, #68]	; 0x44
 80051f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051fa:	f7fb fd4d 	bl	8000c98 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4611      	mov	r1, r2
 8005204:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <UART_SetConfig+0x2d4>)
 8005206:	fba3 2301 	umull	r2, r3, r3, r1
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2264      	movs	r2, #100	; 0x64
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	1acb      	subs	r3, r1, r3
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800521a:	4b36      	ldr	r3, [pc, #216]	; (80052f4 <UART_SetConfig+0x2d4>)
 800521c:	fba3 2302 	umull	r2, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005228:	441c      	add	r4, r3
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522e:	2200      	movs	r2, #0
 8005230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005234:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	1891      	adds	r1, r2, r2
 8005242:	63b9      	str	r1, [r7, #56]	; 0x38
 8005244:	415b      	adcs	r3, r3
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800524c:	4641      	mov	r1, r8
 800524e:	1851      	adds	r1, r2, r1
 8005250:	6339      	str	r1, [r7, #48]	; 0x30
 8005252:	4649      	mov	r1, r9
 8005254:	414b      	adcs	r3, r1
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005264:	4659      	mov	r1, fp
 8005266:	00cb      	lsls	r3, r1, #3
 8005268:	4651      	mov	r1, sl
 800526a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800526e:	4651      	mov	r1, sl
 8005270:	00ca      	lsls	r2, r1, #3
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	4603      	mov	r3, r0
 8005278:	4642      	mov	r2, r8
 800527a:	189b      	adds	r3, r3, r2
 800527c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005280:	464b      	mov	r3, r9
 8005282:	460a      	mov	r2, r1
 8005284:	eb42 0303 	adc.w	r3, r2, r3
 8005288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005298:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800529c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052a0:	460b      	mov	r3, r1
 80052a2:	18db      	adds	r3, r3, r3
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a6:	4613      	mov	r3, r2
 80052a8:	eb42 0303 	adc.w	r3, r2, r3
 80052ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052b6:	f7fb fcef 	bl	8000c98 <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <UART_SetConfig+0x2d4>)
 80052c0:	fba3 1302 	umull	r1, r3, r3, r2
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	2164      	movs	r1, #100	; 0x64
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	3332      	adds	r3, #50	; 0x32
 80052d2:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <UART_SetConfig+0x2d4>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 0207 	and.w	r2, r3, #7
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4422      	add	r2, r4
 80052e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e8:	e106      	b.n	80054f8 <UART_SetConfig+0x4d8>
 80052ea:	bf00      	nop
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40011400 	.word	0x40011400
 80052f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800530a:	4642      	mov	r2, r8
 800530c:	464b      	mov	r3, r9
 800530e:	1891      	adds	r1, r2, r2
 8005310:	6239      	str	r1, [r7, #32]
 8005312:	415b      	adcs	r3, r3
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800531a:	4641      	mov	r1, r8
 800531c:	1854      	adds	r4, r2, r1
 800531e:	4649      	mov	r1, r9
 8005320:	eb43 0501 	adc.w	r5, r3, r1
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	00eb      	lsls	r3, r5, #3
 800532e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005332:	00e2      	lsls	r2, r4, #3
 8005334:	4614      	mov	r4, r2
 8005336:	461d      	mov	r5, r3
 8005338:	4643      	mov	r3, r8
 800533a:	18e3      	adds	r3, r4, r3
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005340:	464b      	mov	r3, r9
 8005342:	eb45 0303 	adc.w	r3, r5, r3
 8005346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005366:	4629      	mov	r1, r5
 8005368:	008b      	lsls	r3, r1, #2
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005370:	4621      	mov	r1, r4
 8005372:	008a      	lsls	r2, r1, #2
 8005374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005378:	f7fb fc8e 	bl	8000c98 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b60      	ldr	r3, [pc, #384]	; (8005504 <UART_SetConfig+0x4e4>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011c      	lsls	r4, r3, #4
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	61b9      	str	r1, [r7, #24]
 80053a4:	415b      	adcs	r3, r3
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ac:	4641      	mov	r1, r8
 80053ae:	1851      	adds	r1, r2, r1
 80053b0:	6139      	str	r1, [r7, #16]
 80053b2:	4649      	mov	r1, r9
 80053b4:	414b      	adcs	r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c4:	4659      	mov	r1, fp
 80053c6:	00cb      	lsls	r3, r1, #3
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ce:	4651      	mov	r1, sl
 80053d0:	00ca      	lsls	r2, r1, #3
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	4642      	mov	r2, r8
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e0:	464b      	mov	r3, r9
 80053e2:	460a      	mov	r2, r1
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005404:	4649      	mov	r1, r9
 8005406:	008b      	lsls	r3, r1, #2
 8005408:	4641      	mov	r1, r8
 800540a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540e:	4641      	mov	r1, r8
 8005410:	008a      	lsls	r2, r1, #2
 8005412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005416:	f7fb fc3f 	bl	8000c98 <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4611      	mov	r1, r2
 8005420:	4b38      	ldr	r3, [pc, #224]	; (8005504 <UART_SetConfig+0x4e4>)
 8005422:	fba3 2301 	umull	r2, r3, r3, r1
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2264      	movs	r2, #100	; 0x64
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	3332      	adds	r3, #50	; 0x32
 8005434:	4a33      	ldr	r2, [pc, #204]	; (8005504 <UART_SetConfig+0x4e4>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005440:	441c      	add	r4, r3
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	673b      	str	r3, [r7, #112]	; 0x70
 800544a:	677a      	str	r2, [r7, #116]	; 0x74
 800544c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	415b      	adcs	r3, r3
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005460:	4641      	mov	r1, r8
 8005462:	1851      	adds	r1, r2, r1
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	4649      	mov	r1, r9
 8005468:	414b      	adcs	r3, r1
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005478:	4659      	mov	r1, fp
 800547a:	00cb      	lsls	r3, r1, #3
 800547c:	4651      	mov	r1, sl
 800547e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005482:	4651      	mov	r1, sl
 8005484:	00ca      	lsls	r2, r1, #3
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	4603      	mov	r3, r0
 800548c:	4642      	mov	r2, r8
 800548e:	189b      	adds	r3, r3, r2
 8005490:	66bb      	str	r3, [r7, #104]	; 0x68
 8005492:	464b      	mov	r3, r9
 8005494:	460a      	mov	r2, r1
 8005496:	eb42 0303 	adc.w	r3, r2, r3
 800549a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	663b      	str	r3, [r7, #96]	; 0x60
 80054a6:	667a      	str	r2, [r7, #100]	; 0x64
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054b4:	4649      	mov	r1, r9
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	4641      	mov	r1, r8
 80054ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054be:	4641      	mov	r1, r8
 80054c0:	008a      	lsls	r2, r1, #2
 80054c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054c6:	f7fb fbe7 	bl	8000c98 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <UART_SetConfig+0x4e4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	; 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	3332      	adds	r3, #50	; 0x32
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <UART_SetConfig+0x4e4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4422      	add	r2, r4
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005504:	51eb851f 	.word	0x51eb851f

08005508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005508:	b084      	sub	sp, #16
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	f107 001c 	add.w	r0, r7, #28
 8005516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	2b01      	cmp	r3, #1
 800551e:	d122      	bne.n	8005566 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d105      	bne.n	800555a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 fbee 	bl	8006d3c <USB_CoreReset>
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]
 8005564:	e01a      	b.n	800559c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f001 fbe2 	bl	8006d3c <USB_CoreReset>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800557c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38
 800558e:	e005      	b.n	800559c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d10b      	bne.n	80055ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f043 0206 	orr.w	r2, r3, #6
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f043 0220 	orr.w	r2, r3, #32
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c6:	b004      	add	sp, #16
 80055c8:	4770      	bx	lr
	...

080055cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d165      	bne.n	80056ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a41      	ldr	r2, [pc, #260]	; (80056e8 <USB_SetTurnaroundTime+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d906      	bls.n	80055f6 <USB_SetTurnaroundTime+0x2a>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a40      	ldr	r2, [pc, #256]	; (80056ec <USB_SetTurnaroundTime+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d202      	bcs.n	80055f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055f0:	230f      	movs	r3, #15
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e062      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a3c      	ldr	r2, [pc, #240]	; (80056ec <USB_SetTurnaroundTime+0x120>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d306      	bcc.n	800560c <USB_SetTurnaroundTime+0x40>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a3b      	ldr	r2, [pc, #236]	; (80056f0 <USB_SetTurnaroundTime+0x124>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d202      	bcs.n	800560c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005606:	230e      	movs	r3, #14
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e057      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a38      	ldr	r2, [pc, #224]	; (80056f0 <USB_SetTurnaroundTime+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d306      	bcc.n	8005622 <USB_SetTurnaroundTime+0x56>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <USB_SetTurnaroundTime+0x128>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d202      	bcs.n	8005622 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800561c:	230d      	movs	r3, #13
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e04c      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4a33      	ldr	r2, [pc, #204]	; (80056f4 <USB_SetTurnaroundTime+0x128>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d306      	bcc.n	8005638 <USB_SetTurnaroundTime+0x6c>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4a32      	ldr	r2, [pc, #200]	; (80056f8 <USB_SetTurnaroundTime+0x12c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d802      	bhi.n	8005638 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005632:	230c      	movs	r3, #12
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e041      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4a2f      	ldr	r2, [pc, #188]	; (80056f8 <USB_SetTurnaroundTime+0x12c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d906      	bls.n	800564e <USB_SetTurnaroundTime+0x82>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <USB_SetTurnaroundTime+0x130>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d802      	bhi.n	800564e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005648:	230b      	movs	r3, #11
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e036      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4a2a      	ldr	r2, [pc, #168]	; (80056fc <USB_SetTurnaroundTime+0x130>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d906      	bls.n	8005664 <USB_SetTurnaroundTime+0x98>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4a29      	ldr	r2, [pc, #164]	; (8005700 <USB_SetTurnaroundTime+0x134>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d802      	bhi.n	8005664 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800565e:	230a      	movs	r3, #10
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e02b      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4a26      	ldr	r2, [pc, #152]	; (8005700 <USB_SetTurnaroundTime+0x134>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d906      	bls.n	800567a <USB_SetTurnaroundTime+0xae>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4a25      	ldr	r2, [pc, #148]	; (8005704 <USB_SetTurnaroundTime+0x138>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d202      	bcs.n	800567a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005674:	2309      	movs	r3, #9
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e020      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4a21      	ldr	r2, [pc, #132]	; (8005704 <USB_SetTurnaroundTime+0x138>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d306      	bcc.n	8005690 <USB_SetTurnaroundTime+0xc4>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4a20      	ldr	r2, [pc, #128]	; (8005708 <USB_SetTurnaroundTime+0x13c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d802      	bhi.n	8005690 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800568a:	2308      	movs	r3, #8
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e015      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <USB_SetTurnaroundTime+0x13c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d906      	bls.n	80056a6 <USB_SetTurnaroundTime+0xda>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a1c      	ldr	r2, [pc, #112]	; (800570c <USB_SetTurnaroundTime+0x140>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d202      	bcs.n	80056a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80056a0:	2307      	movs	r3, #7
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e00a      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80056a6:	2306      	movs	r3, #6
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e007      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056b2:	2309      	movs	r3, #9
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e001      	b.n	80056bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056b8:	2309      	movs	r3, #9
 80056ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	029b      	lsls	r3, r3, #10
 80056d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80056d4:	431a      	orrs	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	00d8acbf 	.word	0x00d8acbf
 80056ec:	00e4e1c0 	.word	0x00e4e1c0
 80056f0:	00f42400 	.word	0x00f42400
 80056f4:	01067380 	.word	0x01067380
 80056f8:	011a499f 	.word	0x011a499f
 80056fc:	01312cff 	.word	0x01312cff
 8005700:	014ca43f 	.word	0x014ca43f
 8005704:	016e3600 	.word	0x016e3600
 8005708:	01a6ab1f 	.word	0x01a6ab1f
 800570c:	01e84800 	.word	0x01e84800

08005710 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f043 0201 	orr.w	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d115      	bne.n	80057a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005782:	2001      	movs	r0, #1
 8005784:	f7fc f996 	bl	8001ab4 <HAL_Delay>
      ms++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fa45 	bl	8006c1e <USB_GetMode>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d01e      	beq.n	80057d8 <USB_SetCurrentMode+0x84>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b31      	cmp	r3, #49	; 0x31
 800579e:	d9f0      	bls.n	8005782 <USB_SetCurrentMode+0x2e>
 80057a0:	e01a      	b.n	80057d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d115      	bne.n	80057d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057b4:	2001      	movs	r0, #1
 80057b6:	f7fc f97d 	bl	8001ab4 <HAL_Delay>
      ms++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3301      	adds	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fa2c 	bl	8006c1e <USB_GetMode>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <USB_SetCurrentMode+0x84>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b31      	cmp	r3, #49	; 0x31
 80057d0:	d9f0      	bls.n	80057b4 <USB_SetCurrentMode+0x60>
 80057d2:	e001      	b.n	80057d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e005      	b.n	80057e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b32      	cmp	r3, #50	; 0x32
 80057dc:	d101      	bne.n	80057e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057ec:	b084      	sub	sp, #16
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e009      	b.n	8005820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	3340      	adds	r3, #64	; 0x40
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	2200      	movs	r2, #0
 8005818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	3301      	adds	r3, #1
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b0e      	cmp	r3, #14
 8005824:	d9f2      	bls.n	800580c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11c      	bne.n	8005866 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800583a:	f043 0302 	orr.w	r3, r3, #2
 800583e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
 8005864:	e00b      	b.n	800587e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005884:	461a      	mov	r2, r3
 8005886:	2300      	movs	r3, #0
 8005888:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	4619      	mov	r1, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005898:	461a      	mov	r2, r3
 800589a:	680b      	ldr	r3, [r1, #0]
 800589c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d10c      	bne.n	80058be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058aa:	2100      	movs	r1, #0
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f965 	bl	8005b7c <USB_SetDevSpeed>
 80058b2:	e008      	b.n	80058c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058b4:	2101      	movs	r1, #1
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f960 	bl	8005b7c <USB_SetDevSpeed>
 80058bc:	e003      	b.n	80058c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058be:	2103      	movs	r1, #3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f95b 	bl	8005b7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058c6:	2110      	movs	r1, #16
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f8f3 	bl	8005ab4 <USB_FlushTxFifo>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f91f 	bl	8005b1c <USB_FlushRxFifo>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	461a      	mov	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	461a      	mov	r2, r3
 80058fc:	2300      	movs	r3, #0
 80058fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005906:	461a      	mov	r2, r3
 8005908:	2300      	movs	r3, #0
 800590a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	e043      	b.n	800599a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005928:	d118      	bne.n	800595c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	461a      	mov	r2, r3
 800593e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e013      	b.n	800596e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	461a      	mov	r2, r3
 8005954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e008      	b.n	800596e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	461a      	mov	r2, r3
 800596a:	2300      	movs	r3, #0
 800596c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	461a      	mov	r2, r3
 800597c:	2300      	movs	r3, #0
 800597e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	461a      	mov	r2, r3
 800598e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005992:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	3301      	adds	r3, #1
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3b7      	bcc.n	8005912 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e043      	b.n	8005a30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059be:	d118      	bne.n	80059f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	461a      	mov	r2, r3
 80059d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e013      	b.n	8005a04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	461a      	mov	r2, r3
 80059ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e008      	b.n	8005a04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	461a      	mov	r2, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	461a      	mov	r2, r3
 8005a24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d3b7      	bcc.n	80059a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f043 0210 	orr.w	r2, r3, #16
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <USB_DevInit+0x2c4>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f043 0208 	orr.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d107      	bne.n	8005aa0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aac:	b004      	add	sp, #16
 8005aae:	4770      	bx	lr
 8005ab0:	803c3800 	.word	0x803c3800

08005ab4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <USB_FlushTxFifo+0x64>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e01b      	b.n	8005b0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	daf2      	bge.n	8005ac2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	019b      	lsls	r3, r3, #6
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <USB_FlushTxFifo+0x64>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e006      	b.n	8005b0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d0f0      	beq.n	8005aec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	00030d40 	.word	0x00030d40

08005b1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <USB_FlushRxFifo+0x5c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e018      	b.n	8005b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	daf2      	bge.n	8005b28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2210      	movs	r2, #16
 8005b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <USB_FlushRxFifo+0x5c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e006      	b.n	8005b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d0f0      	beq.n	8005b4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	00030d40 	.word	0x00030d40

08005b7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0306 	and.w	r3, r3, #6
 8005bc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
 8005bd2:	e00a      	b.n	8005bea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d002      	beq.n	8005be0 <USB_GetDevSpeed+0x32>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b06      	cmp	r3, #6
 8005bde:	d102      	bne.n	8005be6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005be0:	2302      	movs	r3, #2
 8005be2:	75fb      	strb	r3, [r7, #23]
 8005be4:	e001      	b.n	8005bea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005be6:	230f      	movs	r3, #15
 8005be8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d13a      	bne.n	8005c8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	2101      	movs	r1, #1
 8005c26:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	68f9      	ldr	r1, [r7, #12]
 8005c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c32:	4313      	orrs	r3, r2
 8005c34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d155      	bne.n	8005cf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	791b      	ldrb	r3, [r3, #4]
 8005c66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	059b      	lsls	r3, r3, #22
 8005c6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c70:	4313      	orrs	r3, r2
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e036      	b.n	8005cf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	68f9      	ldr	r1, [r7, #12]
 8005ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11a      	bne.n	8005cf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	791b      	ldrb	r3, [r3, #4]
 8005cdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d161      	bne.n	8005de8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3a:	d11f      	bne.n	8005d7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	2101      	movs	r1, #1
 8005db2:	fa01 f303 	lsl.w	r3, r1, r3
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	0159      	lsls	r1, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	440b      	add	r3, r1
 8005dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dde:	4619      	mov	r1, r3
 8005de0:	4b35      	ldr	r3, [pc, #212]	; (8005eb8 <USB_DeactivateEndpoint+0x1b0>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]
 8005de6:	e060      	b.n	8005eaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfe:	d11f      	bne.n	8005e40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e60:	4013      	ands	r3, r2
 8005e62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	2101      	movs	r1, #1
 8005e76:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7a:	041b      	lsls	r3, r3, #16
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e84:	4013      	ands	r3, r2
 8005e86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	0159      	lsls	r1, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	440b      	add	r3, r1
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <USB_DeactivateEndpoint+0x1b4>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	ec337800 	.word	0xec337800
 8005ebc:	eff37800 	.word	0xeff37800

08005ec0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	; 0x28
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	f040 815c 	bne.w	800619a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d132      	bne.n	8005f50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	0cdb      	lsrs	r3, r3, #19
 8005f4a:	04db      	lsls	r3, r3, #19
 8005f4c:	6113      	str	r3, [r2, #16]
 8005f4e:	e074      	b.n	800603a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	0cdb      	lsrs	r3, r3, #19
 8005f6c:	04db      	lsls	r3, r3, #19
 8005f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6999      	ldr	r1, [r3, #24]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	440b      	add	r3, r1
 8005fac:	1e59      	subs	r1, r3, #1
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fb8:	4b9d      	ldr	r3, [pc, #628]	; (8006230 <USB_EPStartXfer+0x370>)
 8005fba:	400b      	ands	r3, r1
 8005fbc:	69b9      	ldr	r1, [r7, #24]
 8005fbe:	0148      	lsls	r0, r1, #5
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	4401      	add	r1, r0
 8005fc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fe2:	69b9      	ldr	r1, [r7, #24]
 8005fe4:	0148      	lsls	r0, r1, #5
 8005fe6:	69f9      	ldr	r1, [r7, #28]
 8005fe8:	4401      	add	r1, r0
 8005fea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d11f      	bne.n	800603a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006014:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006018:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006038:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d14b      	bne.n	80060d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d009      	beq.n	800605c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	461a      	mov	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	791b      	ldrb	r3, [r3, #4]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d128      	bne.n	80060b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d110      	bne.n	8006096 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	e00f      	b.n	80060b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e133      	b.n	8006340 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	791b      	ldrb	r3, [r3, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d015      	beq.n	800612c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 811b 	beq.w	8006340 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	2101      	movs	r1, #1
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	69f9      	ldr	r1, [r7, #28]
 8006122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006126:	4313      	orrs	r3, r2
 8006128:	634b      	str	r3, [r1, #52]	; 0x34
 800612a:	e109      	b.n	8006340 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d110      	bne.n	800615e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e00f      	b.n	800617e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6919      	ldr	r1, [r3, #16]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	b298      	uxth	r0, r3
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	4603      	mov	r3, r0
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fade 	bl	8006754 <USB_WritePacket>
 8006198:	e0d2      	b.n	8006340 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b4:	0cdb      	lsrs	r3, r3, #19
 80061b6:	04db      	lsls	r3, r3, #19
 80061b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d126      	bne.n	8006234 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	0148      	lsls	r0, r1, #5
 8006200:	69f9      	ldr	r1, [r7, #28]
 8006202:	4401      	add	r1, r0
 8006204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006208:	4313      	orrs	r3, r2
 800620a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622a:	6113      	str	r3, [r2, #16]
 800622c:	e03a      	b.n	80062a4 <USB_EPStartXfer+0x3e4>
 800622e:	bf00      	nop
 8006230:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4413      	add	r3, r2
 800623e:	1e5a      	subs	r2, r3, #1
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	8afa      	ldrh	r2, [r7, #22]
 8006250:	fb03 f202 	mul.w	r2, r3, r2
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	8afb      	ldrh	r3, [r7, #22]
 8006268:	04d9      	lsls	r1, r3, #19
 800626a:	4b38      	ldr	r3, [pc, #224]	; (800634c <USB_EPStartXfer+0x48c>)
 800626c:	400b      	ands	r3, r1
 800626e:	69b9      	ldr	r1, [r7, #24]
 8006270:	0148      	lsls	r0, r1, #5
 8006272:	69f9      	ldr	r1, [r7, #28]
 8006274:	4401      	add	r1, r0
 8006276:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800627a:	4313      	orrs	r3, r2
 800627c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	0148      	lsls	r0, r1, #5
 8006298:	69f9      	ldr	r1, [r7, #28]
 800629a:	4401      	add	r1, r0
 800629c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062a0:	4313      	orrs	r3, r2
 80062a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10d      	bne.n	80062c6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6919      	ldr	r1, [r3, #16]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	460a      	mov	r2, r1
 80062c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	791b      	ldrb	r3, [r3, #4]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d128      	bne.n	8006320 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d110      	bne.n	8006300 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00f      	b.n	8006320 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800633e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	1ff80000 	.word	0x1ff80000

08006350 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	f040 80ce 	bne.w	800650e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d132      	bne.n	80063e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800639c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d8:	0cdb      	lsrs	r3, r3, #19
 80063da:	04db      	lsls	r3, r3, #19
 80063dc:	6113      	str	r3, [r2, #16]
 80063de:	e04e      	b.n	800647e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	0cdb      	lsrs	r3, r3, #19
 80063fc:	04db      	lsls	r3, r3, #19
 80063fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800641e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006422:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646e:	6939      	ldr	r1, [r7, #16]
 8006470:	0148      	lsls	r0, r1, #5
 8006472:	6979      	ldr	r1, [r7, #20]
 8006474:	4401      	add	r1, r0
 8006476:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d11e      	bne.n	80064c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	461a      	mov	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e097      	b.n	80065f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8083 	beq.w	80065f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	6979      	ldr	r1, [r7, #20]
 8006504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006508:	4313      	orrs	r3, r2
 800650a:	634b      	str	r3, [r1, #52]	; 0x34
 800650c:	e071      	b.n	80065f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006528:	0cdb      	lsrs	r3, r3, #19
 800652a:	04db      	lsls	r3, r3, #19
 800652c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006548:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800654c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006550:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a0:	6939      	ldr	r1, [r7, #16]
 80065a2:	0148      	lsls	r0, r1, #5
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	4401      	add	r1, r0
 80065a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065ac:	4313      	orrs	r3, r2
 80065ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d10d      	bne.n	80065d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6919      	ldr	r1, [r3, #16]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	460a      	mov	r2, r1
 80065d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d14a      	bne.n	80066b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006636:	f040 8086 	bne.w	8006746 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006658:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800665c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006680:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f242 7210 	movw	r2, #10000	; 0x2710
 800668e:	4293      	cmp	r3, r2
 8006690:	d902      	bls.n	8006698 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	75fb      	strb	r3, [r7, #23]
          break;
 8006696:	e056      	b.n	8006746 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b0:	d0e7      	beq.n	8006682 <USB_EPStopXfer+0x82>
 80066b2:	e048      	b.n	8006746 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066cc:	d13b      	bne.n	8006746 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	7812      	ldrb	r2, [r2, #0]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006722:	4293      	cmp	r3, r2
 8006724:	d902      	bls.n	800672c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
          break;
 800672a:	e00c      	b.n	8006746 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006744:	d0e7      	beq.n	8006716 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
}
 8006748:	4618      	mov	r0, r3
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006754:	b480      	push	{r7}
 8006756:	b089      	sub	sp, #36	; 0x24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4611      	mov	r1, r2
 8006760:	461a      	mov	r2, r3
 8006762:	460b      	mov	r3, r1
 8006764:	71fb      	strb	r3, [r7, #7]
 8006766:	4613      	mov	r3, r2
 8006768:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006776:	2b00      	cmp	r3, #0
 8006778:	d123      	bne.n	80067c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800677a:	88bb      	ldrh	r3, [r7, #4]
 800677c:	3303      	adds	r3, #3
 800677e:	089b      	lsrs	r3, r3, #2
 8006780:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006782:	2300      	movs	r3, #0
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	e018      	b.n	80067ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	031a      	lsls	r2, r3, #12
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	4413      	add	r3, r2
 8006790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006794:	461a      	mov	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	3301      	adds	r3, #1
 80067a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3301      	adds	r3, #1
 80067b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	3301      	adds	r3, #1
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d3e2      	bcc.n	8006788 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3724      	adds	r7, #36	; 0x24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b08b      	sub	sp, #44	; 0x2c
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	089b      	lsrs	r3, r3, #2
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	623b      	str	r3, [r7, #32]
 80067fa:	e014      	b.n	8006826 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	601a      	str	r2, [r3, #0]
    pDest++;
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	3301      	adds	r3, #1
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	3301      	adds	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	3301      	adds	r3, #1
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	3301      	adds	r3, #1
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	3301      	adds	r3, #1
 8006824:	623b      	str	r3, [r7, #32]
 8006826:	6a3a      	ldr	r2, [r7, #32]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	429a      	cmp	r2, r3
 800682c:	d3e6      	bcc.n	80067fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800682e:	8bfb      	ldrh	r3, [r7, #30]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01e      	beq.n	8006872 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683e:	461a      	mov	r2, r3
 8006840:	f107 0310 	add.w	r3, r7, #16
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	fa22 f303 	lsr.w	r3, r2, r3
 8006854:	b2da      	uxtb	r2, r3
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	701a      	strb	r2, [r3, #0]
      i++;
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	3301      	adds	r3, #1
 800685e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	3301      	adds	r3, #1
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006866:	8bfb      	ldrh	r3, [r7, #30]
 8006868:	3b01      	subs	r3, #1
 800686a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800686c:	8bfb      	ldrh	r3, [r7, #30]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1ea      	bne.n	8006848 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006874:	4618      	mov	r0, r3
 8006876:	372c      	adds	r7, #44	; 0x2c
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d12c      	bne.n	80068f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	db12      	blt.n	80068d4 <USB_EPSetStall+0x54>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00f      	beq.n	80068d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	e02b      	b.n	800694e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	db12      	blt.n	800692e <USB_EPSetStall+0xae>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00f      	beq.n	800692e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800692c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800694c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d128      	bne.n	80069ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006996:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	791b      	ldrb	r3, [r3, #4]
 800699c:	2b03      	cmp	r3, #3
 800699e:	d003      	beq.n	80069a8 <USB_EPClearStall+0x4c>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	791b      	ldrb	r3, [r3, #4]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d138      	bne.n	8006a1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e027      	b.n	8006a1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	791b      	ldrb	r3, [r3, #4]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d003      	beq.n	80069fa <USB_EPClearStall+0x9e>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d10f      	bne.n	8006a1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a62:	4313      	orrs	r3, r2
 8006a64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a8e:	f023 0303 	bic.w	r3, r3, #3
 8006a92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa2:	f023 0302 	bic.w	r3, r3, #2
 8006aa6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ad0:	f023 0303 	bic.w	r3, r3, #3
 8006ad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae4:	f043 0302 	orr.w	r3, r3, #2
 8006ae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	0c1b      	lsrs	r3, r3, #16
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	4013      	ands	r3, r2
 8006b74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	b29b      	uxth	r3, r3
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b087      	sub	sp, #28
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf2:	01db      	lsls	r3, r3, #7
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c10:	68bb      	ldr	r3, [r7, #8]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c58:	f023 0307 	bic.w	r3, r3, #7
 8006c5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	333c      	adds	r3, #60	; 0x3c
 8006c96:	3304      	adds	r3, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <USB_EP0_OutStart+0xb8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d90a      	bls.n	8006cba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb4:	d101      	bne.n	8006cba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e037      	b.n	8006d2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce8:	f043 0318 	orr.w	r3, r3, #24
 8006cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cfc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d02:	7afb      	ldrb	r3, [r7, #11]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d10f      	bne.n	8006d28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	4f54300a 	.word	0x4f54300a

08006d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <USB_CoreReset+0x64>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e01b      	b.n	8006d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	daf2      	bge.n	8006d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f043 0201 	orr.w	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <USB_CoreReset+0x64>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d901      	bls.n	8006d84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e006      	b.n	8006d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d0f0      	beq.n	8006d72 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	00030d40 	.word	0x00030d40

08006da4 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 8006db0:	79f8      	ldrb	r0, [r7, #7]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f44f 7250 	mov.w	r2, #832	; 0x340
 8006db8:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8006dbc:	f7fa fa96 	bl	80012ec <MLX90640_I2CRead>
 8006dc0:	4603      	mov	r3, r0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <MLX90640_GetFrameData>:
    
    return MLX90640_NO_ERROR;    
}
    
int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b0a6      	sub	sp, #152	; 0x98
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	6039      	str	r1, [r7, #0]
 8006dd4:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    
    while(dataReady == 0)
 8006de8:	e016      	b.n	8006e18 <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 8006dea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006dee:	79f8      	ldrb	r0, [r7, #7]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006df6:	f7fa fa79 	bl	80012ec <MLX90640_I2CRead>
 8006dfa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if(error != MLX90640_NO_ERROR)
 8006dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <MLX90640_GetFrameData+0x42>
        {
            return error;
 8006e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e0a:	e093      	b.n	8006f34 <MLX90640_GetFrameData+0x16a>
        }    
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister); 
 8006e0c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    while(dataReady == 0)
 8006e18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0e4      	beq.n	8006dea <MLX90640_GetFrameData+0x20>
    }      
    
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	2230      	movs	r2, #48	; 0x30
 8006e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fa fab5 	bl	8001398 <MLX90640_I2CWrite>
 8006e2e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 8006e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3a:	d102      	bne.n	8006e42 <MLX90640_GetFrameData+0x78>
    {
        return error;
 8006e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e40:	e078      	b.n	8006f34 <MLX90640_GetFrameData+0x16a>
    }
                     
    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData); 
 8006e42:	79f8      	ldrb	r0, [r7, #7]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e4e:	f7fa fa4d 	bl	80012ec <MLX90640_I2CRead>
 8006e52:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 8006e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 8006e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e62:	e067      	b.n	8006f34 <MLX90640_GetFrameData+0x16a>
    }                       
    
    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data); 
 8006e64:	f107 030c 	add.w	r3, r7, #12
 8006e68:	79f8      	ldrb	r0, [r7, #7]
 8006e6a:	2240      	movs	r2, #64	; 0x40
 8006e6c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006e70:	f7fa fa3c 	bl	80012ec <MLX90640_I2CRead>
 8006e74:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 8006e78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <MLX90640_GetFrameData+0xbc>
    {
        return error;
 8006e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e84:	e056      	b.n	8006f34 <MLX90640_GetFrameData+0x16a>
    }     
        
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8006e86:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 8006e8a:	79f8      	ldrb	r0, [r7, #7]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f248 010d 	movw	r1, #32781	; 0x800d
 8006e92:	f7fa fa2b 	bl	80012ec <MLX90640_I2CRead>
 8006e96:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    frameData[832] = controlRegister1;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8006ea0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006ea4:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 8006ea6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8006eb0:	f002 0201 	and.w	r2, r2, #1
 8006eb4:	b292      	uxth	r2, r2
 8006eb6:	801a      	strh	r2, [r3, #0]
    
    if(error != MLX90640_NO_ERROR)
 8006eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8006ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec4:	e036      	b.n	8006f34 <MLX90640_GetFrameData+0x16a>
    }
    
    error = ValidateAuxData(data);
 8006ec6:	f107 030c 	add.w	r3, r7, #12
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f867 	bl	8006f9e <ValidateAuxData>
 8006ed0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == MLX90640_NO_ERROR)
 8006ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d11b      	bne.n	8006f14 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8006ee2:	e013      	b.n	8006f0c <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 8006ee4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8006ee8:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8006eec:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006ef0:	0052      	lsls	r2, r2, #1
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	3398      	adds	r3, #152	; 0x98
 8006efa:	443b      	add	r3, r7
 8006efc:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8006f00:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8006f02:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8006f06:	3301      	adds	r3, #1
 8006f08:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8006f0c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8006f10:	2b3f      	cmp	r3, #63	; 0x3f
 8006f12:	d9e7      	bls.n	8006ee4 <MLX90640_GetFrameData+0x11a>
        }
    }        
    
    error = ValidateFrameData(frameData);
 8006f14:	6838      	ldr	r0, [r7, #0]
 8006f16:	f000 f811 	bl	8006f3c <ValidateFrameData>
 8006f1a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if (error != MLX90640_NO_ERROR)
 8006f1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <MLX90640_GetFrameData+0x162>
    {
        return error;
 8006f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f2a:	e003      	b.n	8006f34 <MLX90640_GetFrameData+0x16a>
    }
    
    return frameData[833];    
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8006f32:	881b      	ldrh	r3, [r3, #0]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3798      	adds	r7, #152	; 0x98
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
    
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	e01c      	b.n	8006f88 <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10d      	bne.n	8006f7c <ValidateFrameData+0x40>
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d102      	bne.n	8006f7c <ValidateFrameData+0x40>
 8006f76:	f06f 0307 	mvn.w	r3, #7
 8006f7a:	e00a      	b.n	8006f92 <ValidateFrameData+0x56>
        line = line + 1;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	3320      	adds	r3, #32
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f8e:	dbde      	blt.n	8006f4e <ValidateFrameData+0x12>
    }    
        
    return MLX90640_NO_ERROR;    
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b089      	sub	sp, #36	; 0x24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
    
    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;    
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d102      	bne.n	8006fb8 <ValidateAuxData+0x1a>
 8006fb2:	f06f 0307 	mvn.w	r3, #7
 8006fb6:	e07e      	b.n	80070b6 <ValidateAuxData+0x118>
    
    for(int i=8; i<19; i++)
 8006fb8:	2308      	movs	r3, #8
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e00e      	b.n	8006fdc <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d102      	bne.n	8006fd6 <ValidateAuxData+0x38>
 8006fd0:	f06f 0307 	mvn.w	r3, #7
 8006fd4:	e06f      	b.n	80070b6 <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b12      	cmp	r3, #18
 8006fe0:	dded      	ble.n	8006fbe <ValidateAuxData+0x20>
    }
    
    for(int i=20; i<23; i++)
 8006fe2:	2314      	movs	r3, #20
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	e00e      	b.n	8007006 <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d102      	bne.n	8007000 <ValidateAuxData+0x62>
 8006ffa:	f06f 0307 	mvn.w	r3, #7
 8006ffe:	e05a      	b.n	80070b6 <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	3301      	adds	r3, #1
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b16      	cmp	r3, #22
 800700a:	dded      	ble.n	8006fe8 <ValidateAuxData+0x4a>
    }
    
    for(int i=24; i<33; i++)
 800700c:	2318      	movs	r3, #24
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e00e      	b.n	8007030 <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007020:	4293      	cmp	r3, r2
 8007022:	d102      	bne.n	800702a <ValidateAuxData+0x8c>
 8007024:	f06f 0307 	mvn.w	r3, #7
 8007028:	e045      	b.n	80070b6 <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	3301      	adds	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b20      	cmp	r3, #32
 8007034:	dded      	ble.n	8007012 <ValidateAuxData+0x74>
    }
    
    for(int i=40; i<51; i++)
 8007036:	2328      	movs	r3, #40	; 0x28
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e00e      	b.n	800705a <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	4413      	add	r3, r2
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800704a:	4293      	cmp	r3, r2
 800704c:	d102      	bne.n	8007054 <ValidateAuxData+0xb6>
 800704e:	f06f 0307 	mvn.w	r3, #7
 8007052:	e030      	b.n	80070b6 <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3301      	adds	r3, #1
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b32      	cmp	r3, #50	; 0x32
 800705e:	dded      	ble.n	800703c <ValidateAuxData+0x9e>
    }
    
    for(int i=52; i<55; i++)
 8007060:	2334      	movs	r3, #52	; 0x34
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	e00e      	b.n	8007084 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007074:	4293      	cmp	r3, r2
 8007076:	d102      	bne.n	800707e <ValidateAuxData+0xe0>
 8007078:	f06f 0307 	mvn.w	r3, #7
 800707c:	e01b      	b.n	80070b6 <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b36      	cmp	r3, #54	; 0x36
 8007088:	dded      	ble.n	8007066 <ValidateAuxData+0xc8>
    }
    
    for(int i=56; i<64; i++)
 800708a:	2338      	movs	r3, #56	; 0x38
 800708c:	60bb      	str	r3, [r7, #8]
 800708e:	e00e      	b.n	80070ae <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800709e:	4293      	cmp	r3, r2
 80070a0:	d102      	bne.n	80070a8 <ValidateAuxData+0x10a>
 80070a2:	f06f 0307 	mvn.w	r3, #7
 80070a6:	e006      	b.n	80070b6 <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b3f      	cmp	r3, #63	; 0x3f
 80070b2:	dded      	ble.n	8007090 <ValidateAuxData+0xf2>
    }
    
    return MLX90640_NO_ERROR;
 80070b4:	2300      	movs	r3, #0
    
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3724      	adds	r7, #36	; 0x24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <MLX90640_ExtractParameters>:
    
int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
    int error = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fe94 	bl	8007e00 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 febc 	bl	8007e58 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 ff44 	bl	8007f70 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 ff52 	bl	8007f94 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 ff6a 	bl	8007fcc <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 ff7e 	bl	8007ffc <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 ff98 	bl	8008038 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f002 fa64 	bl	80095d8 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 f84c 	bl	80081b0 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fbd0 	bl	80088c0 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fe08 	bl	8008d38 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f002 f84c 	bl	80091c8 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f002 fb8c 	bl	8009850 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f002 fc28 	bl	8009990 <ExtractDeviatingPixels>
 8007140:	60f8      	str	r0, [r7, #12]
    
    return error;
 8007142:	68fb      	ldr	r3, [r7, #12]

}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	460a      	mov	r2, r1
 8007156:	71fb      	strb	r3, [r7, #7]
 8007158:	4613      	mov	r3, r2
 800715a:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    uint16_t value;
    int error;
    
    //value = (refreshRate & 0x07)<<7;
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
 800715c:	79bb      	ldrb	r3, [r7, #6]
 800715e:	b29b      	uxth	r3, r3
 8007160:	01db      	lsls	r3, r3, #7
 8007162:	817b      	strh	r3, [r7, #10]
    value &= ~MLX90640_CTRL_REFRESH_MASK;
 8007164:	897b      	ldrh	r3, [r7, #10]
 8007166:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800716a:	817b      	strh	r3, [r7, #10]
    
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800716c:	f107 0308 	add.w	r3, r7, #8
 8007170:	79f8      	ldrb	r0, [r7, #7]
 8007172:	2201      	movs	r2, #1
 8007174:	f248 010d 	movw	r1, #32781	; 0x800d
 8007178:	f7fa f8b8 	bl	80012ec <MLX90640_I2CRead>
 800717c:	60f8      	str	r0, [r7, #12]
    if(error == MLX90640_NO_ERROR)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10e      	bne.n	80071a2 <MLX90640_SetRefreshRate+0x56>
    {
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
 8007184:	893b      	ldrh	r3, [r7, #8]
 8007186:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800718a:	b29a      	uxth	r2, r3
 800718c:	897b      	ldrh	r3, [r7, #10]
 800718e:	4313      	orrs	r3, r2
 8007190:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 8007192:	897a      	ldrh	r2, [r7, #10]
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	f248 010d 	movw	r1, #32781	; 0x800d
 800719a:	4618      	mov	r0, r3
 800719c:	f7fa f8fc 	bl	8001398 <MLX90640_I2CWrite>
 80071a0:	60f8      	str	r0, [r7, #12]
    }    
    
    return error;
 80071a2:	68fb      	ldr	r3, [r7, #12]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    uint16_t value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 80071b6:	f107 0308 	add.w	r3, r7, #8
 80071ba:	79f8      	ldrb	r0, [r7, #7]
 80071bc:	2201      	movs	r2, #1
 80071be:	f248 010d 	movw	r1, #32781	; 0x800d
 80071c2:	f7fa f893 	bl	80012ec <MLX90640_I2CRead>
 80071c6:	60f8      	str	r0, [r7, #12]
    
    if(error == 0)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <MLX90640_SetChessMode+0x3a>
    {
        value = (controlRegister1 | MLX90640_CTRL_MEAS_MODE_MASK);
 80071ce:	893b      	ldrh	r3, [r7, #8]
 80071d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071d4:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);        
 80071d6:	897a      	ldrh	r2, [r7, #10]
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	f248 010d 	movw	r1, #32781	; 0x800d
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fa f8da 	bl	8001398 <MLX90640_I2CWrite>
 80071e4:	60f8      	str	r0, [r7, #12]
    }    
    
    return error;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <MLX90640_CalculateTo>:
    return modeRAM; 
}

//------------------------------------------------------------------------------
void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 80071f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f4:	b0a0      	sub	sp, #128	; 0x80
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6178      	str	r0, [r7, #20]
 80071fa:	6139      	str	r1, [r7, #16]
 80071fc:	ed87 0a03 	vstr	s0, [r7, #12]
 8007200:	edc7 0a02 	vstr	s1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 800720c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 8007210:	6939      	ldr	r1, [r7, #16]
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f000 fce8 	bl	8007be8 <MLX90640_GetVdd>
 8007218:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
    ta = MLX90640_GetTa(frameData, params);
 800721c:	6939      	ldr	r1, [r7, #16]
 800721e:	6978      	ldr	r0, [r7, #20]
 8007220:	f000 fd5a 	bl	8007cd8 <MLX90640_GetTa>
 8007224:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
    
    ta4 = (ta + 273.15);
 8007228:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800722a:	f7f9 f995 	bl	8000558 <__aeabi_f2d>
 800722e:	a3e6      	add	r3, pc, #920	; (adr r3, 80075c8 <MLX90640_CalculateTo+0x3d8>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f9 f832 	bl	800029c <__adddf3>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4610      	mov	r0, r2
 800723e:	4619      	mov	r1, r3
 8007240:	f7f9 fcda 	bl	8000bf8 <__aeabi_d2f>
 8007244:	4603      	mov	r3, r0
 8007246:	667b      	str	r3, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 8007248:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800724c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007250:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 8007254:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007258:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800725c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    tr4 = (tr + 273.15);
 8007260:	68b8      	ldr	r0, [r7, #8]
 8007262:	f7f9 f979 	bl	8000558 <__aeabi_f2d>
 8007266:	a3d8      	add	r3, pc, #864	; (adr r3, 80075c8 <MLX90640_CalculateTo+0x3d8>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f816 	bl	800029c <__adddf3>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4610      	mov	r0, r2
 8007276:	4619      	mov	r1, r3
 8007278:	f7f9 fcbe 	bl	8000bf8 <__aeabi_d2f>
 800727c:	4603      	mov	r3, r0
 800727e:	663b      	str	r3, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 8007280:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007288:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 800728c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007290:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007294:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 8007298:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800729c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80072a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80072a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80072a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ac:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80072b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    
    ktaScale = POW2(params->ktaScale);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f9 f928 	bl	8000514 <__aeabi_ui2d>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	ec43 2b11 	vmov	d1, r2, r3
 80072cc:	ed9f 0bb8 	vldr	d0, [pc, #736]	; 80075b0 <MLX90640_CalculateTo+0x3c0>
 80072d0:	f007 fe0e 	bl	800eef0 <pow>
 80072d4:	ec53 2b10 	vmov	r2, r3, d0
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	f7f9 fc8c 	bl	8000bf8 <__aeabi_d2f>
 80072e0:	4603      	mov	r3, r0
 80072e2:	65bb      	str	r3, [r7, #88]	; 0x58
    kvScale = POW2(params->kvScale);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ea:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f9 f910 	bl	8000514 <__aeabi_ui2d>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	ec43 2b11 	vmov	d1, r2, r3
 80072fc:	ed9f 0bac 	vldr	d0, [pc, #688]	; 80075b0 <MLX90640_CalculateTo+0x3c0>
 8007300:	f007 fdf6 	bl	800eef0 <pow>
 8007304:	ec53 2b10 	vmov	r2, r3, d0
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	f7f9 fc74 	bl	8000bf8 <__aeabi_d2f>
 8007310:	4603      	mov	r3, r0
 8007312:	657b      	str	r3, [r7, #84]	; 0x54
    alphaScale = POW2(params->alphaScale);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800731a:	4618      	mov	r0, r3
 800731c:	f7f9 f8fa 	bl	8000514 <__aeabi_ui2d>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	ec43 2b11 	vmov	d1, r2, r3
 8007328:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 80075b0 <MLX90640_CalculateTo+0x3c0>
 800732c:	f007 fde0 	bl	800eef0 <pow>
 8007330:	ec53 2b10 	vmov	r2, r3, d0
 8007334:	4610      	mov	r0, r2
 8007336:	4619      	mov	r1, r3
 8007338:	f7f9 fc5e 	bl	8000bf8 <__aeabi_d2f>
 800733c:	4603      	mov	r3, r0
 800733e:	653b      	str	r3, [r7, #80]	; 0x50
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007346:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80075c0 <MLX90640_CalculateTo+0x3d0>
 800734a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800734e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735e:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 8007362:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007366:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800737c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007384:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007388:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 800738c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800739c:	461a      	mov	r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    
//------------------------- Gain calculation -----------------------------------    
    
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f203 6314 	addw	r3, r3, #1556	; 0x614
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b21b      	sxth	r3, r3
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    
    irDataCP[0] = (int16_t)frameData[776] * gain;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b21b      	sxth	r3, r3
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007410:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007418:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b21b      	sxth	r3, r3
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800742e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	4618      	mov	r0, r3
 800743e:	f7f9 f88b 	bl	8000558 <__aeabi_f2d>
 8007442:	4604      	mov	r4, r0
 8007444:	460d      	mov	r5, r1
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744c:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	edd3 6a08 	vldr	s13, [r3, #32]
 800745e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007462:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8007466:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800746a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	ee17 0a90 	vmov	r0, s15
 800747e:	f7f9 f86b 	bl	8000558 <__aeabi_f2d>
 8007482:	4680      	mov	r8, r0
 8007484:	4689      	mov	r9, r1
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	4618      	mov	r0, r3
 800748c:	f7f9 f864 	bl	8000558 <__aeabi_f2d>
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007496:	f7f9 f85f 	bl	8000558 <__aeabi_f2d>
 800749a:	a347      	add	r3, pc, #284	; (adr r3, 80075b8 <MLX90640_CalculateTo+0x3c8>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f7f8 fefa 	bl	8000298 <__aeabi_dsub>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4650      	mov	r0, sl
 80074aa:	4659      	mov	r1, fp
 80074ac:	f7f9 f8ac 	bl	8000608 <__aeabi_dmul>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4610      	mov	r0, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	4b41      	ldr	r3, [pc, #260]	; (80075c4 <MLX90640_CalculateTo+0x3d4>)
 80074be:	f7f8 feed 	bl	800029c <__adddf3>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4640      	mov	r0, r8
 80074c8:	4649      	mov	r1, r9
 80074ca:	f7f9 f89d 	bl	8000608 <__aeabi_dmul>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	f7f8 fedf 	bl	8000298 <__aeabi_dsub>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4610      	mov	r0, r2
 80074e0:	4619      	mov	r1, r3
 80074e2:	f7f9 fb89 	bl	8000bf8 <__aeabi_d2f>
 80074e6:	4603      	mov	r3, r0
 80074e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( mode ==  params->calibrationModeEE)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074f0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d16b      	bne.n	80075d0 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7f9 f82c 	bl	8000558 <__aeabi_f2d>
 8007500:	4604      	mov	r4, r0
 8007502:	460d      	mov	r5, r1
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	edd3 6a08 	vldr	s13, [r3, #32]
 800751c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007520:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8007524:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800752c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007538:	ee17 0a90 	vmov	r0, s15
 800753c:	f7f9 f80c 	bl	8000558 <__aeabi_f2d>
 8007540:	4680      	mov	r8, r0
 8007542:	4689      	mov	r9, r1
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	4618      	mov	r0, r3
 800754a:	f7f9 f805 	bl	8000558 <__aeabi_f2d>
 800754e:	4682      	mov	sl, r0
 8007550:	468b      	mov	fp, r1
 8007552:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007554:	f7f9 f800 	bl	8000558 <__aeabi_f2d>
 8007558:	a317      	add	r3, pc, #92	; (adr r3, 80075b8 <MLX90640_CalculateTo+0x3c8>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f8 fe9b 	bl	8000298 <__aeabi_dsub>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4650      	mov	r0, sl
 8007568:	4659      	mov	r1, fp
 800756a:	f7f9 f84d 	bl	8000608 <__aeabi_dmul>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <MLX90640_CalculateTo+0x3d4>)
 800757c:	f7f8 fe8e 	bl	800029c <__adddf3>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4640      	mov	r0, r8
 8007586:	4649      	mov	r1, r9
 8007588:	f7f9 f83e 	bl	8000608 <__aeabi_dmul>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4620      	mov	r0, r4
 8007592:	4629      	mov	r1, r5
 8007594:	f7f8 fe80 	bl	8000298 <__aeabi_dsub>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4610      	mov	r0, r2
 800759e:	4619      	mov	r1, r3
 80075a0:	f7f9 fb2a 	bl	8000bf8 <__aeabi_d2f>
 80075a4:	4603      	mov	r3, r0
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30
 80075a8:	e071      	b.n	800768e <MLX90640_CalculateTo+0x49e>
 80075aa:	bf00      	nop
 80075ac:	f3af 8000 	nop.w
 80075b0:	00000000 	.word	0x00000000
 80075b4:	40000000 	.word	0x40000000
 80075b8:	66666666 	.word	0x66666666
 80075bc:	400a6666 	.word	0x400a6666
 80075c0:	42200000 	.word	0x42200000
 80075c4:	3ff00000 	.word	0x3ff00000
 80075c8:	66666666 	.word	0x66666666
 80075cc:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7f8 ffc0 	bl	8000558 <__aeabi_f2d>
 80075d8:	4604      	mov	r4, r0
 80075da:	460d      	mov	r5, r1
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f4:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 80075f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	edd3 6a08 	vldr	s13, [r3, #32]
 8007602:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007606:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 800760a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800760e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	ee17 0a90 	vmov	r0, s15
 8007622:	f7f8 ff99 	bl	8000558 <__aeabi_f2d>
 8007626:	4680      	mov	r8, r0
 8007628:	4689      	mov	r9, r1
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	4618      	mov	r0, r3
 8007630:	f7f8 ff92 	bl	8000558 <__aeabi_f2d>
 8007634:	4682      	mov	sl, r0
 8007636:	468b      	mov	fp, r1
 8007638:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800763a:	f7f8 ff8d 	bl	8000558 <__aeabi_f2d>
 800763e:	a33e      	add	r3, pc, #248	; (adr r3, 8007738 <MLX90640_CalculateTo+0x548>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f8 fe28 	bl	8000298 <__aeabi_dsub>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4650      	mov	r0, sl
 800764e:	4659      	mov	r1, fp
 8007650:	f7f8 ffda 	bl	8000608 <__aeabi_dmul>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4610      	mov	r0, r2
 800765a:	4619      	mov	r1, r3
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	4b37      	ldr	r3, [pc, #220]	; (8007740 <MLX90640_CalculateTo+0x550>)
 8007662:	f7f8 fe1b 	bl	800029c <__adddf3>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4640      	mov	r0, r8
 800766c:	4649      	mov	r1, r9
 800766e:	f7f8 ffcb 	bl	8000608 <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f8 fe0d 	bl	8000298 <__aeabi_dsub>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f7f9 fab7 	bl	8000bf8 <__aeabi_d2f>
 800768a:	4603      	mov	r3, r0
 800768c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 800768e:	2300      	movs	r3, #0
 8007690:	677b      	str	r3, [r7, #116]	; 0x74
 8007692:	e29a      	b.n	8007bca <MLX90640_CalculateTo+0x9da>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8007694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007696:	2b00      	cmp	r3, #0
 8007698:	da00      	bge.n	800769c <MLX90640_CalculateTo+0x4ac>
 800769a:	331f      	adds	r3, #31
 800769c:	115b      	asrs	r3, r3, #5
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da00      	bge.n	80076a8 <MLX90640_CalculateTo+0x4b8>
 80076a6:	333f      	adds	r3, #63	; 0x3f
 80076a8:	119b      	asrs	r3, r3, #6
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 80076b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	bfb8      	it	lt
 80076c2:	425b      	neglt	r3, r3
 80076c4:	b25a      	sxtb	r2, r3
 80076c6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80076ca:	4053      	eors	r3, r2
 80076cc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 80076d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076d2:	3302      	adds	r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	da00      	bge.n	80076da <MLX90640_CalculateTo+0x4ea>
 80076d8:	3303      	adds	r3, #3
 80076da:	109b      	asrs	r3, r3, #2
 80076dc:	461a      	mov	r2, r3
 80076de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e0:	3303      	adds	r3, #3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da00      	bge.n	80076e8 <MLX90640_CalculateTo+0x4f8>
 80076e6:	3303      	adds	r3, #3
 80076e8:	109b      	asrs	r3, r3, #2
 80076ea:	425b      	negs	r3, r3
 80076ec:	441a      	add	r2, r3
 80076ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f0:	3301      	adds	r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da00      	bge.n	80076f8 <MLX90640_CalculateTo+0x508>
 80076f6:	3303      	adds	r3, #3
 80076f8:	109b      	asrs	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da00      	bge.n	8007704 <MLX90640_CalculateTo+0x514>
 8007702:	3303      	adds	r3, #3
 8007704:	109b      	asrs	r3, r3, #2
 8007706:	425b      	negs	r3, r3
 8007708:	4413      	add	r3, r2
 800770a:	b2da      	uxtb	r2, r3
 800770c:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	f1c3 0301 	rsb	r3, r3, #1
 8007716:	b2db      	uxtb	r3, r3
 8007718:	fb12 f303 	smulbb	r3, r2, r3
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        
        if(mode == 0)
 8007722:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10c      	bne.n	8007744 <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern; 
 800772a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800772e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007732:	e00b      	b.n	800774c <MLX90640_CalculateTo+0x55c>
 8007734:	f3af 8000 	nop.w
 8007738:	66666666 	.word	0x66666666
 800773c:	400a6666 	.word	0x400a6666
 8007740:	3ff00000 	.word	0x3ff00000
        }
        else 
        {
          pattern = chessPattern; 
 8007744:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007748:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        }               
        
        if(pattern == frameData[833])
 800774c:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8007756:	8812      	ldrh	r2, [r2, #0]
 8007758:	4293      	cmp	r3, r2
 800775a:	f040 8233 	bne.w	8007bc4 <MLX90640_CalculateTo+0x9d4>
        {    
            irData = (int16_t)frameData[pixelNumber] * gain;
 800775e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b21b      	sxth	r3, r3
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007772:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            
            kta = params->kta[pixelNumber]/ktaScale;
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007782:	4413      	add	r3, r2
 8007784:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8007788:	f993 3000 	ldrsb.w	r3, [r3]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007794:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            kv = params->kv[pixelNumber]/kvScale;
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a4:	4413      	add	r3, r2
 80077a6:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80077aa:	f993 3000 	ldrsb.w	r3, [r3]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80077b6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80077ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077be:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 80077c2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80077c4:	f7f8 fec8 	bl	8000558 <__aeabi_f2d>
 80077c8:	4604      	mov	r4, r0
 80077ca:	460d      	mov	r5, r1
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	4413      	add	r3, r2
 80077d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077e4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80077e8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80077ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80077f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80077f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007804:	ee17 0a90 	vmov	r0, s15
 8007808:	f7f8 fea6 	bl	8000558 <__aeabi_f2d>
 800780c:	4680      	mov	r8, r0
 800780e:	4689      	mov	r9, r1
 8007810:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007812:	f7f8 fea1 	bl	8000558 <__aeabi_f2d>
 8007816:	4682      	mov	sl, r0
 8007818:	468b      	mov	fp, r1
 800781a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800781c:	f7f8 fe9c 	bl	8000558 <__aeabi_f2d>
 8007820:	a3ba      	add	r3, pc, #744	; (adr r3, 8007b0c <MLX90640_CalculateTo+0x91c>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 fd37 	bl	8000298 <__aeabi_dsub>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4650      	mov	r0, sl
 8007830:	4659      	mov	r1, fp
 8007832:	f7f8 fee9 	bl	8000608 <__aeabi_dmul>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4610      	mov	r0, r2
 800783c:	4619      	mov	r1, r3
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	4bb1      	ldr	r3, [pc, #708]	; (8007b08 <MLX90640_CalculateTo+0x918>)
 8007844:	f7f8 fd2a 	bl	800029c <__adddf3>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f8 feda 	bl	8000608 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fd1c 	bl	8000298 <__aeabi_dsub>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4610      	mov	r0, r2
 8007866:	4619      	mov	r1, r3
 8007868:	f7f9 f9c6 	bl	8000bf8 <__aeabi_d2f>
 800786c:	4603      	mov	r3, r0
 800786e:	67fb      	str	r3, [r7, #124]	; 0x7c
            
            if(mode !=  params->calibrationModeEE)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007876:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800787a:	429a      	cmp	r2, r3
 800787c:	d023      	beq.n	80078c6 <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007884:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8007888:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	3b01      	subs	r3, #1
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800789c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80078a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078aa:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 80078ae:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80078cc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	3380      	adds	r3, #128	; 0x80
 80078d4:	443b      	add	r3, r7
 80078d6:	3b54      	subs	r3, #84	; 0x54
 80078d8:	edd3 7a00 	vldr	s15, [r3]
 80078dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80078e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078e8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            irData = irData / emissivity;
 80078ec:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80078f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80078f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 80078fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80078fe:	f7f8 fe2b 	bl	8000558 <__aeabi_f2d>
 8007902:	a37d      	add	r3, pc, #500	; (adr r3, 8007af8 <MLX90640_CalculateTo+0x908>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fe7e 	bl	8000608 <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4614      	mov	r4, r2
 8007912:	461d      	mov	r5, r3
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007918:	3324      	adds	r3, #36	; 0x24
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4413      	add	r3, r2
 800791e:	885b      	ldrh	r3, [r3, #2]
 8007920:	4618      	mov	r0, r3
 8007922:	f7f8 fe07 	bl	8000534 <__aeabi_i2d>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4620      	mov	r0, r4
 800792c:	4629      	mov	r1, r5
 800792e:	f7f8 ff95 	bl	800085c <__aeabi_ddiv>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	f7f9 f95d 	bl	8000bf8 <__aeabi_d2f>
 800793e:	4603      	mov	r3, r0
 8007940:	63fb      	str	r3, [r7, #60]	; 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007948:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800794c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8007950:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800795c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007960:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007968:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 800796c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007970:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007974:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800797c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8007980:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007984:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007988:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800798c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007994:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            Sx = sqrtf(sqrtf(Sx)) * params->ksTo[1];
 8007998:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800799c:	f007 fb18 	bl	800efd0 <sqrtf>
 80079a0:	eef0 7a40 	vmov.f32	s15, s0
 80079a4:	eeb0 0a67 	vmov.f32	s0, s15
 80079a8:	f007 fb12 	bl	800efd0 <sqrtf>
 80079ac:	eeb0 7a40 	vmov.f32	s14, s0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80079b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            
            To = sqrtf(sqrtf(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 80079be:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80079c0:	f7f8 fdca 	bl	8000558 <__aeabi_f2d>
 80079c4:	4604      	mov	r4, r0
 80079c6:	460d      	mov	r5, r1
 80079c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079ca:	f7f8 fdc5 	bl	8000558 <__aeabi_f2d>
 80079ce:	4680      	mov	r8, r0
 80079d0:	4689      	mov	r9, r1
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7f8 fdbe 	bl	8000558 <__aeabi_f2d>
 80079dc:	a348      	add	r3, pc, #288	; (adr r3, 8007b00 <MLX90640_CalculateTo+0x910>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fe11 	bl	8000608 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	f04f 0000 	mov.w	r0, #0
 80079ee:	4946      	ldr	r1, [pc, #280]	; (8007b08 <MLX90640_CalculateTo+0x918>)
 80079f0:	f7f8 fc52 	bl	8000298 <__aeabi_dsub>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4640      	mov	r0, r8
 80079fa:	4649      	mov	r1, r9
 80079fc:	f7f8 fe04 	bl	8000608 <__aeabi_dmul>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4690      	mov	r8, r2
 8007a06:	4699      	mov	r9, r3
 8007a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a0a:	f7f8 fda5 	bl	8000558 <__aeabi_f2d>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f7f8 fc41 	bl	800029c <__adddf3>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 ff1b 	bl	800085c <__aeabi_ddiv>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007a30:	f7f8 fd92 	bl	8000558 <__aeabi_f2d>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4620      	mov	r0, r4
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f7f8 fc2e 	bl	800029c <__adddf3>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4610      	mov	r0, r2
 8007a46:	4619      	mov	r1, r3
 8007a48:	f7f9 f8d6 	bl	8000bf8 <__aeabi_d2f>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	ee00 3a10 	vmov	s0, r3
 8007a52:	f007 fabd 	bl	800efd0 <sqrtf>
 8007a56:	eef0 7a40 	vmov.f32	s15, s0
 8007a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5e:	f007 fab7 	bl	800efd0 <sqrtf>
 8007a62:	ee10 3a10 	vmov	r3, s0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7f8 fd76 	bl	8000558 <__aeabi_f2d>
 8007a6c:	a324      	add	r3, pc, #144	; (adr r3, 8007b00 <MLX90640_CalculateTo+0x910>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fc11 	bl	8000298 <__aeabi_dsub>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f7f9 f8bb 	bl	8000bf8 <__aeabi_d2f>
 8007a82:	4603      	mov	r3, r0
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
                    
            if(To < params->ct[1])
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8007a8c:	ee07 3a90 	vmov	s15, r3
 8007a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa0:	d503      	bpl.n	8007aaa <MLX90640_CalculateTo+0x8ba>
            {
                range = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8007aa8:	e037      	b.n	8007b1a <MLX90640_CalculateTo+0x92a>
            }
            else if(To < params->ct[2])   
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac4:	d503      	bpl.n	8007ace <MLX90640_CalculateTo+0x8de>
            {
                range = 1;            
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8007acc:	e025      	b.n	8007b1a <MLX90640_CalculateTo+0x92a>
            }   
            else if(To < params->ct[3])
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007adc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae8:	d514      	bpl.n	8007b14 <MLX90640_CalculateTo+0x924>
            {
                range = 2;            
 8007aea:	2302      	movs	r3, #2
 8007aec:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8007af0:	e013      	b.n	8007b1a <MLX90640_CalculateTo+0x92a>
 8007af2:	bf00      	nop
 8007af4:	f3af 8000 	nop.w
 8007af8:	a0b5ed8d 	.word	0xa0b5ed8d
 8007afc:	3eb0c6f7 	.word	0x3eb0c6f7
 8007b00:	66666666 	.word	0x66666666
 8007b04:	40711266 	.word	0x40711266
 8007b08:	3ff00000 	.word	0x3ff00000
 8007b0c:	66666666 	.word	0x66666666
 8007b10:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;            
 8007b14:	2303      	movs	r3, #3
 8007b16:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
            }      
            
            To = sqrtf(sqrtf(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 8007b1a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	3380      	adds	r3, #128	; 0x80
 8007b22:	443b      	add	r3, r7
 8007b24:	3b64      	subs	r3, #100	; 0x64
 8007b26:	ed93 7a00 	vldr	s14, [r3]
 8007b2a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b32:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	330a      	adds	r3, #10
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3304      	adds	r3, #4
 8007b40:	edd3 6a00 	vldr	s13, [r3]
 8007b44:	f997 207a 	ldrsb.w	r2, [r7, #122]	; 0x7a
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3220      	adds	r2, #32
 8007b4c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007b50:	ee07 3a90 	vmov	s15, r3
 8007b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b58:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8007b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b70:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8007b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b78:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b80:	eeb0 0a67 	vmov.f32	s0, s15
 8007b84:	f007 fa24 	bl	800efd0 <sqrtf>
 8007b88:	eef0 7a40 	vmov.f32	s15, s0
 8007b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b90:	f007 fa1e 	bl	800efd0 <sqrtf>
 8007b94:	ee10 3a10 	vmov	r3, s0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7f8 fcdd 	bl	8000558 <__aeabi_f2d>
 8007b9e:	a310      	add	r3, pc, #64	; (adr r3, 8007be0 <MLX90640_CalculateTo+0x9f0>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fb78 	bl	8000298 <__aeabi_dsub>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4610      	mov	r0, r2
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f7f9 f822 	bl	8000bf8 <__aeabi_d2f>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
                        
            result[pixelNumber] = To;
 8007bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc2:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8007bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	677b      	str	r3, [r7, #116]	; 0x74
 8007bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bd0:	f6ff ad60 	blt.w	8007694 <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	3780      	adds	r7, #128	; 0x80
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007be0:	66666666 	.word	0x66666666
 8007be4:	40711266 	.word	0x40711266

08007be8 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8007be8:	b5b0      	push	{r4, r5, r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;  
    
    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;   
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	0a9b      	lsrs	r3, r3, #10
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7f8 fc82 	bl	8000514 <__aeabi_ui2d>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	ec43 2b11 	vmov	d1, r2, r3
 8007c18:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8007cc8 <MLX90640_GetVdd+0xe0>
 8007c1c:	f007 f968 	bl	800eef0 <pow>
 8007c20:	ec55 4b10 	vmov	r4, r5, d0
 8007c24:	8afb      	ldrh	r3, [r7, #22]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f8 fc74 	bl	8000514 <__aeabi_ui2d>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	ec43 2b11 	vmov	d1, r2, r3
 8007c34:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8007cc8 <MLX90640_GetVdd+0xe0>
 8007c38:	f007 f95a 	bl	800eef0 <pow>
 8007c3c:	ec53 2b10 	vmov	r2, r3, d0
 8007c40:	4620      	mov	r0, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	f7f8 fe0a 	bl	800085c <__aeabi_ddiv>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4619      	mov	r1, r3
 8007c50:	f7f8 ffd2 	bl	8000bf8 <__aeabi_d2f>
 8007c54:	4603      	mov	r3, r0
 8007c56:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b21b      	sxth	r3, r3
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007c96:	ee16 0a90 	vmov	r0, s13
 8007c9a:	f7f8 fc5d 	bl	8000558 <__aeabi_f2d>
 8007c9e:	a30c      	add	r3, pc, #48	; (adr r3, 8007cd0 <MLX90640_GetVdd+0xe8>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f7f8 fafa 	bl	800029c <__adddf3>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f7f8 ffa2 	bl	8000bf8 <__aeabi_d2f>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	60fb      	str	r3, [r7, #12]
    
    return vdd;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	ee07 3a90 	vmov	s15, r3
}
 8007cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	40000000 	.word	0x40000000
 8007cd0:	66666666 	.word	0x66666666
 8007cd4:	400a6666 	.word	0x400a6666

08007cd8 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8007cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007cdc:	b086      	sub	sp, #24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ff7e 	bl	8007be8 <MLX90640_GetVdd>
 8007cec:	ed87 0a05 	vstr	s0, [r7, #20]
    
    ptat = (int16_t)frameData[800];
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	827b      	strh	r3, [r7, #18]
    
    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 8007cfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b21b      	sxth	r3, r3
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d36:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007df8 <MLX90640_GetTa+0x120>
 8007d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d3e:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7f8 fc08 	bl	8000558 <__aeabi_f2d>
 8007d48:	4604      	mov	r4, r0
 8007d4a:	460d      	mov	r5, r1
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7f8 fc01 	bl	8000558 <__aeabi_f2d>
 8007d56:	4680      	mov	r8, r0
 8007d58:	4689      	mov	r9, r1
 8007d5a:	6978      	ldr	r0, [r7, #20]
 8007d5c:	f7f8 fbfc 	bl	8000558 <__aeabi_f2d>
 8007d60:	a323      	add	r3, pc, #140	; (adr r3, 8007df0 <MLX90640_GetTa+0x118>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f7f8 fa97 	bl	8000298 <__aeabi_dsub>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4640      	mov	r0, r8
 8007d70:	4649      	mov	r1, r9
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f04f 0200 	mov.w	r2, #0
 8007d82:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <MLX90640_GetTa+0x124>)
 8007d84:	f7f8 fa8a 	bl	800029c <__adddf3>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fd64 	bl	800085c <__aeabi_ddiv>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4614      	mov	r4, r2
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	899b      	ldrh	r3, [r3, #12]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7f8 fbc7 	bl	8000534 <__aeabi_i2d>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4620      	mov	r0, r4
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7f8 fa73 	bl	8000298 <__aeabi_dsub>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4610      	mov	r0, r2
 8007db8:	4619      	mov	r1, r3
 8007dba:	f7f8 ff1d 	bl	8000bf8 <__aeabi_d2f>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8007dc8:	edd7 6a02 	vldr	s13, [r7, #8]
 8007dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dd8:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	ee07 3a90 	vmov	s15, r3
}
 8007de2:	eeb0 0a67 	vmov.f32	s0, s15
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007dee:	bf00      	nop
 8007df0:	66666666 	.word	0x66666666
 8007df4:	400a6666 	.word	0x400a6666
 8007df8:	48800000 	.word	0x48800000
 8007dfc:	3ff00000 	.word	0x3ff00000

08007e00 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;
    
    kVdd = MLX90640_MS_BYTE(eeData[51]);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3366      	adds	r3, #102	; 0x66
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3366      	adds	r3, #102	; 0x66
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	b21b      	sxth	r3, r3
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8007e22:	89bb      	ldrh	r3, [r7, #12]
 8007e24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	015b      	lsls	r3, r3, #5
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = 32 * kVdd;
 8007e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	015b      	lsls	r3, r3, #5
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	b21a      	sxth	r2, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	89ba      	ldrh	r2, [r7, #12]
 8007e4a:	805a      	strh	r2, [r3, #2]
}
 8007e4c:	bf00      	nop
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3364      	adds	r3, #100	; 0x64
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	0a9b      	lsrs	r3, r3, #10
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e74:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8007e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e7c:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8007e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e88:	dd07      	ble.n	8007e9a <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8007e8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e8e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007f58 <ExtractPTATParameters+0x100>
 8007e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e96:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8007e9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e9e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007f5c <ExtractPTATParameters+0x104>
 8007ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ea6:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3364      	adds	r3, #100	; 0x64
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ebc:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8007ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ec4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007f60 <ExtractPTATParameters+0x108>
 8007ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed0:	dd07      	ble.n	8007ee2 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8007ed2:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ed6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007f64 <ExtractPTATParameters+0x10c>
 8007eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ede:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8007ee2:	ed97 7a04 	vldr	s14, [r7, #16]
 8007ee6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007eee:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3362      	adds	r3, #98	; 0x62
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3320      	adds	r3, #32
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7f8 fb15 	bl	8000534 <__aeabi_i2d>
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <ExtractPTATParameters+0x110>)
 8007f10:	f7f8 fca4 	bl	800085c <__aeabi_ddiv>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <ExtractPTATParameters+0x114>)
 8007f22:	f7f8 f9bb 	bl	800029c <__adddf3>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f7f8 fe63 	bl	8000bf8 <__aeabi_d2f>
 8007f32:	4603      	mov	r3, r0
 8007f34:	60bb      	str	r3, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8007f42:	89fa      	ldrh	r2, [r7, #14]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	611a      	str	r2, [r3, #16]
}
 8007f4e:	bf00      	nop
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	42800000 	.word	0x42800000
 8007f5c:	45800000 	.word	0x45800000
 8007f60:	43ff8000 	.word	0x43ff8000
 8007f64:	44800000 	.word	0x44800000
 8007f68:	40d00000 	.word	0x40d00000
 8007f6c:	40200000 	.word	0x40200000

08007f70 <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;    
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3360      	adds	r3, #96	; 0x60
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b21a      	sxth	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	829a      	strh	r2, [r3, #20]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3378      	adds	r3, #120	; 0x78
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b25b      	sxtb	r3, r3
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fae:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007fc8 <ExtractTgcParameters+0x34>
 8007fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	42000000 	.word	0x42000000

08007fcc <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3370      	adds	r3, #112	; 0x70
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	131b      	asrs	r3, r3, #12
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0303 	and.w	r3, r3, #3
 8007fe4:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	7bfa      	ldrb	r2, [r7, #15]
 8007fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{   
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3378      	adds	r3, #120	; 0x78
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	0a1b      	lsrs	r3, r3, #8
 800800e:	b29b      	uxth	r3, r3
 8008010:	b25b      	sxtb	r3, r3
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800801a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8008034 <ExtractKsTaParameters+0x38>
 800801e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	46000000 	.word	0x46000000

08008038 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	337e      	adds	r3, #126	; 0x7e
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	131b      	asrs	r3, r3, #12
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	b2db      	uxtb	r3, r3
 8008052:	461a      	mov	r2, r3
 8008054:	0092      	lsls	r2, r2, #2
 8008056:	4413      	add	r3, r2
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->ct[0] = -40;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8008064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	337e      	adds	r3, #126	; 0x7e
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	111b      	asrs	r3, r3, #4
 8008078:	b21b      	sxth	r3, r3
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	b21a      	sxth	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	337e      	adds	r3, #126	; 0x7e
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	121b      	asrs	r3, r3, #8
 800808e:	b21b      	sxth	r3, r3
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	b21a      	sxth	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	fb12 f303 	smulbb	r3, r2, r3
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	b21a      	sxth	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80080be:	b29a      	uxth	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80080c6:	b299      	uxth	r1, r3
 80080c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	fb11 f303 	smulbb	r3, r1, r3
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4413      	add	r3, r2
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	b21a      	sxth	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80080e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	337e      	adds	r3, #126	; 0x7e
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	3308      	adds	r3, #8
 80080f6:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 80080f8:	2201      	movs	r2, #1
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008100:	60bb      	str	r3, [r7, #8]
    
    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	337a      	adds	r3, #122	; 0x7a
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b25b      	sxtb	r3, r3
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800811c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	337a      	adds	r3, #122	; 0x7a
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	b29b      	uxth	r3, r3
 8008130:	b25b      	sxtb	r3, r3
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	ee07 3a90 	vmov	s15, r3
 8008140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	337c      	adds	r3, #124	; 0x7c
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b25b      	sxtb	r3, r3
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	337c      	adds	r3, #124	; 0x7c
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	b25b      	sxtb	r3, r3
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	ee07 3a90 	vmov	s15, r3
 800818c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    mlx90640->ksTo[4] = -0.0002;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	4a03      	ldr	r2, [pc, #12]	; (80081ac <ExtractKsToParameters+0x174>)
 800819e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	b951b717 	.word	0xb951b717

080081b0 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80081b0:	b5b0      	push	{r4, r5, r7, lr}
 80081b2:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80081bc:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80081c0:	6018      	str	r0, [r3, #0]
 80081c2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80081c6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80081ca:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 80081d2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80081d6:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3340      	adds	r3, #64	; 0x40
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 80081ea:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80081ee:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3340      	adds	r3, #64	; 0x40
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	111b      	asrs	r3, r3, #4
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 8008204:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008208:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3340      	adds	r3, #64	; 0x40
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	121b      	asrs	r3, r3, #8
 8008214:	b2db      	uxtb	r3, r3
 8008216:	f003 030f 	and.w	r3, r3, #15
 800821a:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 800821e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008222:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3340      	adds	r3, #64	; 0x40
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	0b1b      	lsrs	r3, r3, #12
 800822e:	b29b      	uxth	r3, r3
 8008230:	b2db      	uxtb	r3, r3
 8008232:	331e      	adds	r3, #30
 8008234:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8008238:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800823c:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3342      	adds	r3, #66	; 0x42
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 800824a:	2300      	movs	r3, #0
 800824c:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8008250:	e062      	b.n	8008318 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 8008252:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 800825c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8008260:	3322      	adds	r3, #34	; 0x22
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8008268:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	f003 020f 	and.w	r2, r3, #15
 8008276:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8008280:	443b      	add	r3, r7
 8008282:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 8008286:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800828a:	3322      	adds	r3, #34	; 0x22
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8008292:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8008296:	6812      	ldr	r2, [r2, #0]
 8008298:	4413      	add	r3, r2
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	111a      	asrs	r2, r3, #4
 800829e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80082a2:	3301      	adds	r3, #1
 80082a4:	f002 020f 	and.w	r2, r2, #15
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80082ae:	443b      	add	r3, r7
 80082b0:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 80082b4:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80082b8:	3322      	adds	r3, #34	; 0x22
 80082ba:	005b      	lsls	r3, r3, #1
 80082bc:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80082c0:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	121a      	asrs	r2, r3, #8
 80082cc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80082d0:	3302      	adds	r3, #2
 80082d2:	f002 020f 	and.w	r2, r2, #15
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80082dc:	443b      	add	r3, r7
 80082de:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 80082e2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80082e6:	3322      	adds	r3, #34	; 0x22
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80082ee:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	0b1b      	lsrs	r3, r3, #12
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8008300:	3303      	adds	r3, #3
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8008308:	443b      	add	r3, r7
 800830a:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 800830e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8008312:	3301      	adds	r3, #1
 8008314:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8008318:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800831c:	2b05      	cmp	r3, #5
 800831e:	dd98      	ble.n	8008252 <ExtractAlphaParameters+0xa2>
    }
    
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008320:	2300      	movs	r3, #0
 8008322:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8008326:	e020      	b.n	800836a <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 8008328:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8008332:	443b      	add	r3, r7
 8008334:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8008338:	2b07      	cmp	r3, #7
 800833a:	dd11      	ble.n	8008360 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 800833c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8008346:	443b      	add	r3, r7
 8008348:	f853 3c94 	ldr.w	r3, [r3, #-148]
 800834c:	f1a3 0210 	sub.w	r2, r3, #16
 8008350:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800835a:	443b      	add	r3, r7
 800835c:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008360:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8008364:	3301      	adds	r3, #1
 8008366:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 800836a:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 800836e:	2b17      	cmp	r3, #23
 8008370:	ddda      	ble.n	8008328 <ExtractAlphaParameters+0x178>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8008372:	2300      	movs	r3, #0
 8008374:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8008378:	e062      	b.n	8008440 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 800837a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 8008384:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8008388:	3328      	adds	r3, #40	; 0x28
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8008390:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8008394:	6812      	ldr	r2, [r2, #0]
 8008396:	4413      	add	r3, r2
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	f003 010f 	and.w	r1, r3, #15
 800839e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80083a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80083a6:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80083aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 80083ae:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80083b2:	3328      	adds	r3, #40	; 0x28
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80083ba:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	4413      	add	r3, r2
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	111b      	asrs	r3, r3, #4
 80083c6:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80083ca:	3201      	adds	r2, #1
 80083cc:	f003 010f 	and.w	r1, r3, #15
 80083d0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80083d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80083d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 80083dc:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80083e0:	3328      	adds	r3, #40	; 0x28
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80083e8:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	4413      	add	r3, r2
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	121b      	asrs	r3, r3, #8
 80083f4:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80083f8:	3202      	adds	r2, #2
 80083fa:	f003 010f 	and.w	r1, r3, #15
 80083fe:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008402:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 800840a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800840e:	3328      	adds	r3, #40	; 0x28
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8008416:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	0b1b      	lsrs	r3, r3, #12
 8008422:	b299      	uxth	r1, r3
 8008424:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8008428:	1cda      	adds	r2, r3, #3
 800842a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800842e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8008436:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800843a:	3301      	adds	r3, #1
 800843c:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8008440:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8008444:	2b07      	cmp	r3, #7
 8008446:	dd98      	ble.n	800837a <ExtractAlphaParameters+0x1ca>
    }
    
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8008448:	2300      	movs	r3, #0
 800844a:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 800844e:	e020      	b.n	8008492 <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 8008450:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008454:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008458:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 800845c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008460:	2b07      	cmp	r3, #7
 8008462:	dd11      	ble.n	8008488 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 8008464:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008468:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800846c:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8008470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008474:	f1a3 0110 	sub.w	r1, r3, #16
 8008478:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800847c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008480:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8008484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8008488:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 800848c:	3301      	adds	r3, #1
 800848e:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8008492:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8008496:	2b1f      	cmp	r3, #31
 8008498:	ddda      	ble.n	8008450 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800849a:	2300      	movs	r3, #0
 800849c:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 80084a0:	e13e      	b.n	8008720 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80084a2:	2300      	movs	r3, #0
 80084a4:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 80084a8:	e130      	b.n	800870c <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 80084aa:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80084ae:	015b      	lsls	r3, r3, #5
 80084b0:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 80084b4:	4413      	add	r3, r2
 80084b6:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 80084ba:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80084be:	3340      	adds	r3, #64	; 0x40
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80084c6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80084ca:	6812      	ldr	r2, [r2, #0]
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	111b      	asrs	r3, r3, #4
 80084d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084de:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80084e2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80084e6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 80084f2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80084f6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80084fa:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	edd3 7a00 	vldr	s15, [r3]
 8008506:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800850a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008512:	dd17      	ble.n	8008544 <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8008514:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008518:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800851c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	edd3 7a00 	vldr	s15, [r3]
 8008528:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 80088b8 <ExtractAlphaParameters+0x708>
 800852c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008530:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008534:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8008538:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8008544:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008548:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800854c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	ed93 7a00 	vldr	s14, [r3]
 8008558:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 800855c:	2201      	movs	r2, #1
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	ee07 3a90 	vmov	s15, r3
 8008566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008572:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8008576:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8008582:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800858c:	443b      	add	r3, r7
 800858e:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8008592:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 8008596:	409a      	lsls	r2, r3
 8008598:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 800859c:	441a      	add	r2, r3
 800859e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80085a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80085a6:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 80085aa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80085ae:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 80085b2:	fa01 f303 	lsl.w	r3, r1, r3
 80085b6:	4413      	add	r3, r2
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085c0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80085c4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80085c8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	edd3 7a00 	vldr	s15, [r3]
 80085d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085d8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80085dc:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80085e0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 80085ec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80085f0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80085f4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7f7 ffaa 	bl	8000558 <__aeabi_f2d>
 8008604:	4604      	mov	r4, r0
 8008606:	460d      	mov	r5, r1
 8008608:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800860c:	4618      	mov	r0, r3
 800860e:	f7f7 ff81 	bl	8000514 <__aeabi_ui2d>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	ec43 2b11 	vmov	d1, r2, r3
 800861a:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 80088a0 <ExtractAlphaParameters+0x6f0>
 800861e:	f006 fc67 	bl	800eef0 <pow>
 8008622:	ec53 2b10 	vmov	r2, r3, d0
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 f917 	bl	800085c <__aeabi_ddiv>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	f7f8 fadf 	bl	8000bf8 <__aeabi_d2f>
 800863a:	4601      	mov	r1, r0
 800863c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008640:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8008644:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 800864e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008652:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8008656:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	ed93 7a00 	vldr	s14, [r3]
 8008662:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008666:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	edd3 6a06 	vldr	s13, [r3, #24]
 8008670:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008674:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867e:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 8008682:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008686:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008690:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 8008694:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800869c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80086a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80086a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086a8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80086ac:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80086b0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80086bc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80086c0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80086c4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f7 ff42 	bl	8000558 <__aeabi_f2d>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	a173      	add	r1, pc, #460	; (adr r1, 80088a8 <ExtractAlphaParameters+0x6f8>)
 80086da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086de:	f7f8 f8bd 	bl	800085c <__aeabi_ddiv>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4610      	mov	r0, r2
 80086e8:	4619      	mov	r1, r3
 80086ea:	f7f8 fa85 	bl	8000bf8 <__aeabi_d2f>
 80086ee:	4601      	mov	r1, r0
 80086f0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80086f4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80086f8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8008702:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8008706:	3301      	adds	r3, #1
 8008708:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 800870c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8008710:	2b1f      	cmp	r3, #31
 8008712:	f77f aeca 	ble.w	80084aa <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008716:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800871a:	3301      	adds	r3, #1
 800871c:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8008720:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8008724:	2b17      	cmp	r3, #23
 8008726:	f77f aebc 	ble.w	80084a2 <ExtractAlphaParameters+0x2f2>
        }
    }
    
    temp = alphaTemp[0];
 800872a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800872e:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8008738:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800873a:	2301      	movs	r3, #1
 800873c:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8008740:	e023      	b.n	800878a <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 8008742:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008746:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800874a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	edd3 7a00 	vldr	s15, [r3]
 8008756:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800875a:	ed93 7a00 	vldr	s14, [r3]
 800875e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008766:	d50b      	bpl.n	8008780 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 8008768:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800876c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8008770:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800877e:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8008780:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8008784:	3301      	adds	r3, #1
 8008786:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800878a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800878e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008792:	dbd6      	blt.n	8008742 <ExtractAlphaParameters+0x592>
        }
    }
    
    alphaScale = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 800879a:	e00e      	b.n	80087ba <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 800879c:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80087a0:	edd3 7a00 	vldr	s15, [r3]
 80087a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80087a8:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80087ac:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80087b0:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80087b4:	3301      	adds	r3, #1
 80087b6:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 80087ba:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	f7f7 feca 	bl	8000558 <__aeabi_f2d>
 80087c4:	a33a      	add	r3, pc, #232	; (adr r3, 80088b0 <ExtractAlphaParameters+0x700>)
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f7f8 f98f 	bl	8000aec <__aeabi_dcmplt>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e3      	bne.n	800879c <ExtractAlphaParameters+0x5ec>
    } 
    
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80087d4:	2300      	movs	r3, #0
 80087d6:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80087da:	e04d      	b.n	8008878 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);        
 80087dc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80087e0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80087e4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 feb2 	bl	8000558 <__aeabi_f2d>
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f7 fe89 	bl	8000514 <__aeabi_ui2d>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	ec43 2b11 	vmov	d1, r2, r3
 800880a:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80088a0 <ExtractAlphaParameters+0x6f0>
 800880e:	f006 fb6f 	bl	800eef0 <pow>
 8008812:	ec53 2b10 	vmov	r2, r3, d0
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f7 fef5 	bl	8000608 <__aeabi_dmul>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4610      	mov	r0, r2
 8008824:	4619      	mov	r1, r3
 8008826:	f7f8 f9e7 	bl	8000bf8 <__aeabi_d2f>
 800882a:	4603      	mov	r3, r0
 800882c:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8008830:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);        
 8008832:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	f7f7 fe8e 	bl	8000558 <__aeabi_f2d>
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	4b1e      	ldr	r3, [pc, #120]	; (80088bc <ExtractAlphaParameters+0x70c>)
 8008842:	f7f7 fd2b 	bl	800029c <__adddf3>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4610      	mov	r0, r2
 800884c:	4619      	mov	r1, r3
 800884e:	f7f8 f9b3 	bl	8000bb8 <__aeabi_d2uiz>
 8008852:	4603      	mov	r3, r0
 8008854:	b299      	uxth	r1, r3
 8008856:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800885a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8008864:	3324      	adds	r3, #36	; 0x24
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	4413      	add	r3, r2
 800886a:	460a      	mov	r2, r1
 800886c:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800886e:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8008872:	3301      	adds	r3, #1
 8008874:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8008878:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800887c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008880:	dbac      	blt.n	80087dc <ExtractAlphaParameters+0x62c>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8008882:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008886:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8008890:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8008894:	bf00      	nop
 8008896:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 800889a:	46bd      	mov	sp, r7
 800889c:	bdb0      	pop	{r4, r5, r7, pc}
 800889e:	bf00      	nop
 80088a0:	00000000 	.word	0x00000000
 80088a4:	40000000 	.word	0x40000000
 80088a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80088ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80088b0:	9999999a 	.word	0x9999999a
 80088b4:	40dfffd9 	.word	0x40dfffd9
 80088b8:	42800000 	.word	0x42800000
 80088bc:	3fe00000 	.word	0x3fe00000

080088c0 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b0c5      	sub	sp, #276	; 0x114
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80088ce:	6018      	str	r0, [r3, #0]
 80088d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80088d8:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 80088e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3320      	adds	r3, #32
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 80088f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3320      	adds	r3, #32
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	111b      	asrs	r3, r3, #4
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 8008912:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008916:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3320      	adds	r3, #32
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	121b      	asrs	r3, r3, #8
 8008922:	b2db      	uxtb	r3, r3
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = (int16_t)eeData[17];
 800892c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3322      	adds	r3, #34	; 0x22
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
        
    for(int i = 0; i < 6; i++)
 800893e:	2300      	movs	r3, #0
 8008940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008944:	e062      	b.n	8008a0c <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8008946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 8008950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008954:	3312      	adds	r3, #18
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800895c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008960:	6812      	ldr	r2, [r2, #0]
 8008962:	4413      	add	r3, r2
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	f003 020f 	and.w	r2, r3, #15
 800896a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008974:	443b      	add	r3, r7
 8008976:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 800897a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800897e:	3312      	adds	r3, #18
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008986:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	4413      	add	r3, r2
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	111a      	asrs	r2, r3, #4
 8008992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008996:	3301      	adds	r3, #1
 8008998:	f002 020f 	and.w	r2, r2, #15
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80089a2:	443b      	add	r3, r7
 80089a4:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 80089a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089ac:	3312      	adds	r3, #18
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80089b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80089b8:	6812      	ldr	r2, [r2, #0]
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	121a      	asrs	r2, r3, #8
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c4:	3302      	adds	r3, #2
 80089c6:	f002 020f 	and.w	r2, r2, #15
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80089d0:	443b      	add	r3, r7
 80089d2:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 80089d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089da:	3312      	adds	r3, #18
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80089e2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	4413      	add	r3, r2
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	0b1b      	lsrs	r3, r3, #12
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f4:	3303      	adds	r3, #3
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80089fc:	443b      	add	r3, r7
 80089fe:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8008a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a06:	3301      	adds	r3, #1
 8008a08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a10:	2b05      	cmp	r3, #5
 8008a12:	dd98      	ble.n	8008946 <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008a14:	2300      	movs	r3, #0
 8008a16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008a1a:	e020      	b.n	8008a5e <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8008a1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008a26:	443b      	add	r3, r7
 8008a28:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8008a2c:	2b07      	cmp	r3, #7
 8008a2e:	dd11      	ble.n	8008a54 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8008a30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008a3a:	443b      	add	r3, r7
 8008a3c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8008a40:	f1a3 0210 	sub.w	r2, r3, #16
 8008a44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008a4e:	443b      	add	r3, r7
 8008a50:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a58:	3301      	adds	r3, #1
 8008a5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008a5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a62:	2b17      	cmp	r3, #23
 8008a64:	ddda      	ble.n	8008a1c <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8008a66:	2300      	movs	r3, #0
 8008a68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a6c:	e062      	b.n	8008b34 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8008a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7c:	3318      	adds	r3, #24
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008a84:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	f003 010f 	and.w	r1, r3, #15
 8008a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a9a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 8008aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa6:	3318      	adds	r3, #24
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008aae:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	111b      	asrs	r3, r3, #4
 8008aba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008abe:	3201      	adds	r2, #1
 8008ac0:	f003 010f 	and.w	r1, r3, #15
 8008ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 8008ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad4:	3318      	adds	r3, #24
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008adc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008ae0:	6812      	ldr	r2, [r2, #0]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	121b      	asrs	r3, r3, #8
 8008ae8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008aec:	3202      	adds	r2, #2
 8008aee:	f003 010f 	and.w	r1, r3, #15
 8008af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008af6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 8008afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b02:	3318      	adds	r3, #24
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008b0a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008b0e:	6812      	ldr	r2, [r2, #0]
 8008b10:	4413      	add	r3, r2
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	0b1b      	lsrs	r3, r3, #12
 8008b16:	b299      	uxth	r1, r3
 8008b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1c:	1cda      	adds	r2, r3, #3
 8008b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2e:	3301      	adds	r3, #1
 8008b30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	2b07      	cmp	r3, #7
 8008b3a:	dd98      	ble.n	8008a6e <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b42:	e020      	b.n	8008b86 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8008b44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	2b07      	cmp	r3, #7
 8008b56:	dd11      	ble.n	8008b7c <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8008b58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b60:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8008b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b68:	f1a3 0110 	sub.w	r1, r3, #16
 8008b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b74:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8008b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8008b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b80:	3301      	adds	r3, #1
 8008b82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b8a:	2b1f      	cmp	r3, #31
 8008b8c:	ddda      	ble.n	8008b44 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b94:	e0c0      	b.n	8008d18 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8008b96:	2300      	movs	r3, #0
 8008b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b9c:	e0b2      	b.n	8008d04 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8008b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ba2:	015b      	lsls	r3, r3, #5
 8008ba4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008ba8:	4413      	add	r3, r2
 8008baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 8008bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb2:	3340      	adds	r3, #64	; 0x40
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008bba:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	0a9b      	lsrs	r3, r3, #10
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	b219      	sxth	r1, r3
 8008bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd8:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	4413      	add	r3, r2
 8008be0:	460a      	mov	r2, r1
 8008be2:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8008be4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008be8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf2:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008bfe:	2b1f      	cmp	r3, #31
 8008c00:	dd1d      	ble.n	8008c3e <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8008c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c10:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	4413      	add	r3, r2
 8008c18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b40      	subs	r3, #64	; 0x40
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	b219      	sxth	r1, r3
 8008c24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c32:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	4413      	add	r3, r2
 8008c3a:	460a      	mov	r2, r1
 8008c3c:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8008c3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	4413      	add	r3, r2
 8008c54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8008c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c62:	b219      	sxth	r1, r3
 8008c64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c72:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	4413      	add	r3, r2
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8008c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008c88:	443b      	add	r3, r7
 8008c8a:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8008c8e:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8008c92:	fa02 f303 	lsl.w	r3, r2, r3
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8008c9c:	4413      	add	r3, r2
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008cac:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008cb0:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8008cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4413      	add	r3, r2
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cc2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008cc6:	6819      	ldr	r1, [r3, #0]
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ccc:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	440b      	add	r3, r1
 8008cd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4413      	add	r3, r2
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	b219      	sxth	r1, r3
 8008ce0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ce4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cee:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	4413      	add	r3, r2
 8008cf6:	460a      	mov	r2, r1
 8008cf8:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8008cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cfe:	3301      	adds	r3, #1
 8008d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d08:	2b1f      	cmp	r3, #31
 8008d0a:	f77f af48 	ble.w	8008b9e <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d12:	3301      	adds	r3, #1
 8008d14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d1c:	2b17      	cmp	r3, #23
 8008d1e:	f77f af3a 	ble.w	8008b96 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	0000      	movs	r0, r0
 8008d34:	0000      	movs	r0, r0
	...

08008d38 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8008d38:	b5b0      	push	{r4, r5, r7, lr}
 8008d3a:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d44:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8008d48:	6018      	str	r0, [r3, #0]
 8008d4a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d4e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8008d52:	6019      	str	r1, [r3, #0]
    int p = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 8008d5a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d5e:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	336c      	adds	r3, #108	; 0x6c
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	0a1b      	lsrs	r3, r3, #8
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	b25b      	sxtb	r3, r3
 8008d6e:	f887 3c0c 	strb.w	r3, [r7, #3084]	; 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 8008d72:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d76:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	336c      	adds	r3, #108	; 0x6c
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	b25b      	sxtb	r3, r3
 8008d82:	f887 3c0e 	strb.w	r3, [r7, #3086]	; 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 8008d86:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d8a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	336e      	adds	r3, #110	; 0x6e
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	b25b      	sxtb	r3, r3
 8008d9a:	f887 3c0d 	strb.w	r3, [r7, #3085]	; 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 8008d9e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008da2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	336e      	adds	r3, #110	; 0x6e
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	b25b      	sxtb	r3, r3
 8008dae:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f
      
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8008db2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008db6:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3370      	adds	r3, #112	; 0x70
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	111b      	asrs	r3, r3, #4
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	3308      	adds	r3, #8
 8008dcc:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 8008dd0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008dd4:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3370      	adds	r3, #112	; 0x70
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008de8:	2300      	movs	r3, #0
 8008dea:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8008dee:	e0ed      	b.n	8008fcc <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8008df0:	2300      	movs	r3, #0
 8008df2:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8008df6:	e0df      	b.n	8008fb8 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8008df8:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8008dfc:	015b      	lsls	r3, r3, #5
 8008dfe:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	; 0xc20
 8008e02:	4413      	add	r3, r2
 8008e04:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8008e08:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	da00      	bge.n	8008e12 <ExtractKtaPixelParameters+0xda>
 8008e10:	331f      	adds	r3, #31
 8008e12:	115b      	asrs	r3, r3, #5
 8008e14:	461a      	mov	r2, r3
 8008e16:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	da00      	bge.n	8008e20 <ExtractKtaPixelParameters+0xe8>
 8008e1e:	333f      	adds	r3, #63	; 0x3f
 8008e20:	119b      	asrs	r3, r3, #6
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	bfb8      	it	lt
 8008e38:	425b      	neglt	r3, r3
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8008e42:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008e46:	3340      	adds	r3, #64	; 0x40
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 8008e4e:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 8008e52:	6812      	ldr	r2, [r2, #0]
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	105b      	asrs	r3, r3, #1
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e66:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008e6a:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008e6e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8008e7a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008e7e:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008e82:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	edd3 7a00 	vldr	s15, [r3]
 8008e8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9a:	dd17      	ble.n	8008ecc <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8008e9c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008ea0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008ea4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	edd3 7a00 	vldr	s15, [r3]
 8008eb0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8008eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008eb8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008ebc:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008ec0:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8008ecc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008ed0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008ed4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	ed93 7a00 	vldr	s14, [r3]
 8008ee0:	f897 3c13 	ldrb.w	r3, [r7, #3091]	; 0xc13
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008efa:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008efe:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8008f0a:	f897 3c12 	ldrb.w	r3, [r7, #3090]	; 0xc12
 8008f0e:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8008f12:	443b      	add	r3, r7
 8008f14:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8008f18:	ee07 3a90 	vmov	s15, r3
 8008f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f20:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008f24:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008f28:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	edd3 7a00 	vldr	s15, [r3]
 8008f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f38:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008f3c:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008f40:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 8008f4c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008f50:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008f54:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f7 fafa 	bl	8000558 <__aeabi_f2d>
 8008f64:	4604      	mov	r4, r0
 8008f66:	460d      	mov	r5, r1
 8008f68:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f7 fad1 	bl	8000514 <__aeabi_ui2d>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	ec43 2b11 	vmov	d1, r2, r3
 8008f7a:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 80091b0 <ExtractKtaPixelParameters+0x478>
 8008f7e:	f005 ffb7 	bl	800eef0 <pow>
 8008f82:	ec53 2b10 	vmov	r2, r3, d0
 8008f86:	4620      	mov	r0, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7f7 fc67 	bl	800085c <__aeabi_ddiv>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4610      	mov	r0, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7f7 fe2f 	bl	8000bf8 <__aeabi_d2f>
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008fa0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008fa4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8008fae:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8008fb8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8008fbc:	2b1f      	cmp	r3, #31
 8008fbe:	f77f af1b 	ble.w	8008df8 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8008fc2:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8008fcc:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8008fd0:	2b17      	cmp	r3, #23
 8008fd2:	f77f af0d 	ble.w	8008df0 <ExtractKtaPixelParameters+0xb8>
            
        }
    }
    
    temp = fabs(ktaTemp[0]);
 8008fd6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008fda:	f6a3 4324 	subw	r3, r3, #3108	; 0xc24
 8008fde:	edd3 7a00 	vldr	s15, [r3]
 8008fe2:	eef0 7ae7 	vabs.f32	s15, s15
 8008fe6:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8008fea:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8008ff4:	e029      	b.n	800904a <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 8008ff6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008ffa:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8008ffe:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	edd3 7a00 	vldr	s15, [r3]
 800900a:	eef0 7ae7 	vabs.f32	s15, s15
 800900e:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8009012:	ed93 7a00 	vldr	s14, [r3]
 8009016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800901a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901e:	d50f      	bpl.n	8009040 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8009020:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009024:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8009028:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	edd3 7a00 	vldr	s15, [r3]
 8009034:	eef0 7ae7 	vabs.f32	s15, s15
 8009038:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 800903c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8009040:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8009044:	3301      	adds	r3, #1
 8009046:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 800904a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800904e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009052:	dbd0      	blt.n	8008ff6 <ExtractKtaPixelParameters+0x2be>
        }
    }
    
    ktaScale1 = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 800905a:	e00e      	b.n	800907a <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 800905c:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8009060:	edd3 7a00 	vldr	s15, [r3]
 8009064:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009068:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 800906c:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8009070:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8009074:	3301      	adds	r3, #1
 8009076:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 800907a:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	f7f7 fa6a 	bl	8000558 <__aeabi_f2d>
 8009084:	a34d      	add	r3, pc, #308	; (adr r3, 80091bc <ExtractKtaPixelParameters+0x484>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e3      	bne.n	800905c <ExtractKtaPixelParameters+0x324>
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8009094:	2300      	movs	r3, #0
 8009096:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 800909a:	e075      	b.n	8009188 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 800909c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80090a0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 80090a4:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7f7 fa52 	bl	8000558 <__aeabi_f2d>
 80090b4:	4604      	mov	r4, r0
 80090b6:	460d      	mov	r5, r1
 80090b8:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 80090bc:	4618      	mov	r0, r3
 80090be:	f7f7 fa29 	bl	8000514 <__aeabi_ui2d>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	ec43 2b11 	vmov	d1, r2, r3
 80090ca:	ed9f 0b39 	vldr	d0, [pc, #228]	; 80091b0 <ExtractKtaPixelParameters+0x478>
 80090ce:	f005 ff0f 	bl	800eef0 <pow>
 80090d2:	ec53 2b10 	vmov	r2, r3, d0
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	f7f7 fa95 	bl	8000608 <__aeabi_dmul>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4610      	mov	r0, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	f7f7 fd87 	bl	8000bf8 <__aeabi_d2f>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f607 4228 	addw	r2, r7, #3112	; 0xc28
 80090f0:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 80090f2:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 80090f6:	edd3 7a00 	vldr	s15, [r3]
 80090fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	d51e      	bpl.n	8009142 <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 8009104:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f7f7 fa25 	bl	8000558 <__aeabi_f2d>
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	4b29      	ldr	r3, [pc, #164]	; (80091b8 <ExtractKtaPixelParameters+0x480>)
 8009114:	f7f7 f8c0 	bl	8000298 <__aeabi_dsub>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4610      	mov	r0, r2
 800911e:	4619      	mov	r1, r3
 8009120:	f7f7 fd22 	bl	8000b68 <__aeabi_d2iz>
 8009124:	4603      	mov	r3, r0
 8009126:	b259      	sxtb	r1, r3
 8009128:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800912c:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8009136:	4413      	add	r3, r2
 8009138:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800913c:	460a      	mov	r2, r1
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	e01d      	b.n	800917e <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 8009142:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	f7f7 fa06 	bl	8000558 <__aeabi_f2d>
 800914c:	f04f 0200 	mov.w	r2, #0
 8009150:	4b19      	ldr	r3, [pc, #100]	; (80091b8 <ExtractKtaPixelParameters+0x480>)
 8009152:	f7f7 f8a3 	bl	800029c <__adddf3>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4610      	mov	r0, r2
 800915c:	4619      	mov	r1, r3
 800915e:	f7f7 fd03 	bl	8000b68 <__aeabi_d2iz>
 8009162:	4603      	mov	r3, r0
 8009164:	b259      	sxtb	r1, r3
 8009166:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800916a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8009174:	4413      	add	r3, r2
 8009176:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800917a:	460a      	mov	r2, r1
 800917c:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800917e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8009182:	3301      	adds	r3, #1
 8009184:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8009188:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800918c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009190:	db84      	blt.n	800909c <ExtractKtaPixelParameters+0x364>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 8009192:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009196:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	; 0xc2f
 80091a0:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 80091a4:	bf00      	nop
 80091a6:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bdb0      	pop	{r4, r5, r7, pc}
 80091ae:	bf00      	nop
 80091b0:	00000000 	.word	0x00000000
 80091b4:	40000000 	.word	0x40000000
 80091b8:	3fe00000 	.word	0x3fe00000
 80091bc:	33333333 	.word	0x33333333
 80091c0:	404fb333 	.word	0x404fb333
 80091c4:	00000000 	.word	0x00000000

080091c8 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80091c8:	b5b0      	push	{r4, r5, r7, lr}
 80091ca:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80091d4:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80091d8:	6018      	str	r0, [r3, #0]
 80091da:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80091de:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80091e2:	6019      	str	r1, [r3, #0]
    int p = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 80091ea:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80091ee:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3368      	adds	r3, #104	; 0x68
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	0b1b      	lsrs	r3, r3, #12
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    if (KvRoCo > 7)
 8009200:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	; 0xc2f
 8009204:	2b07      	cmp	r3, #7
 8009206:	dd05      	ble.n	8009214 <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 8009208:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 800920c:	3b10      	subs	r3, #16
 800920e:	b2db      	uxtb	r3, r3
 8009210:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    }
    KvT[0] = KvRoCo;
 8009214:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8009218:	f887 3c08 	strb.w	r3, [r7, #3080]	; 0xc08
    
    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 800921c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009220:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3368      	adds	r3, #104	; 0x68
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	121b      	asrs	r3, r3, #8
 800922c:	b25b      	sxtb	r3, r3
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    if (KvReCo > 7)
 8009236:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	; 0xc2d
 800923a:	2b07      	cmp	r3, #7
 800923c:	dd05      	ble.n	800924a <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 800923e:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 8009242:	3b10      	subs	r3, #16
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    }
    KvT[2] = KvReCo;
 800924a:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 800924e:	f887 3c0a 	strb.w	r3, [r7, #3082]	; 0xc0a
      
    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 8009252:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009256:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3368      	adds	r3, #104	; 0x68
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	111b      	asrs	r3, r3, #4
 8009262:	b25b      	sxtb	r3, r3
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    if (KvRoCe > 7)
 800926c:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	; 0xc2e
 8009270:	2b07      	cmp	r3, #7
 8009272:	dd05      	ble.n	8009280 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 8009274:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8009278:	3b10      	subs	r3, #16
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    }
    KvT[1] = KvRoCe;
 8009280:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8009284:	f887 3c09 	strb.w	r3, [r7, #3081]	; 0xc09
      
    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 8009288:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800928c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3368      	adds	r3, #104	; 0x68
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b25b      	sxtb	r3, r3
 8009298:	f003 030f 	and.w	r3, r3, #15
 800929c:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    if (KvReCe > 7)
 80092a0:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
 80092a4:	2b07      	cmp	r3, #7
 80092a6:	dd05      	ble.n	80092b4 <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 80092a8:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 80092ac:	3b10      	subs	r3, #16
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    }
    KvT[3] = KvReCe;
 80092b4:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 80092b8:	f887 3c0b 	strb.w	r3, [r7, #3083]	; 0xc0b
  
    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80092bc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80092c0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3370      	adds	r3, #112	; 0x70
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	121b      	asrs	r3, r3, #8
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80092d6:	2300      	movs	r3, #0
 80092d8:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80092dc:	e07c      	b.n	80093d8 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80092de:	2300      	movs	r3, #0
 80092e0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 80092e4:	e06f      	b.n	80093c6 <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 80092e6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80092ea:	015b      	lsls	r3, r3, #5
 80092ec:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 80092f0:	4413      	add	r3, r2
 80092f2:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 80092f6:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	da00      	bge.n	8009300 <ExtractKvPixelParameters+0x138>
 80092fe:	331f      	adds	r3, #31
 8009300:	115b      	asrs	r3, r3, #5
 8009302:	461a      	mov	r2, r3
 8009304:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8009308:	2b00      	cmp	r3, #0
 800930a:	da00      	bge.n	800930e <ExtractKvPixelParameters+0x146>
 800930c:	333f      	adds	r3, #63	; 0x3f
 800930e:	119b      	asrs	r3, r3, #6
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	b2db      	uxtb	r3, r3
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	b2da      	uxtb	r2, r3
 800931a:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 800931e:	2b00      	cmp	r3, #0
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	bfb8      	it	lt
 8009326:	425b      	neglt	r3, r3
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4413      	add	r3, r2
 800932c:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f
            kvTemp[p] = KvT[split];
 8009330:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	; 0xc0f
 8009334:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8009338:	443b      	add	r3, r7
 800933a:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009346:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800934a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800934e:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 800935a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800935e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8009362:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4618      	mov	r0, r3
 800936e:	f7f7 f8f3 	bl	8000558 <__aeabi_f2d>
 8009372:	4604      	mov	r4, r0
 8009374:	460d      	mov	r5, r1
 8009376:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 800937a:	4618      	mov	r0, r3
 800937c:	f7f7 f8ca 	bl	8000514 <__aeabi_ui2d>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	ec43 2b11 	vmov	d1, r2, r3
 8009388:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 80095c0 <ExtractKvPixelParameters+0x3f8>
 800938c:	f005 fdb0 	bl	800eef0 <pow>
 8009390:	ec53 2b10 	vmov	r2, r3, d0
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	f7f7 fa60 	bl	800085c <__aeabi_ddiv>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4610      	mov	r0, r2
 80093a2:	4619      	mov	r1, r3
 80093a4:	f7f7 fc28 	bl	8000bf8 <__aeabi_d2f>
 80093a8:	4601      	mov	r1, r0
 80093aa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80093ae:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80093b2:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80093bc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80093c0:	3301      	adds	r3, #1
 80093c2:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 80093c6:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80093ca:	2b1f      	cmp	r3, #31
 80093cc:	dd8b      	ble.n	80092e6 <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80093ce:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80093d2:	3301      	adds	r3, #1
 80093d4:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80093d8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80093dc:	2b17      	cmp	r3, #23
 80093de:	f77f af7e 	ble.w	80092de <ExtractKvPixelParameters+0x116>
        }
    }
    
    temp = fabs(kvTemp[0]);
 80093e2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80093e6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80093ea:	edd3 7a00 	vldr	s15, [r3]
 80093ee:	eef0 7ae7 	vabs.f32	s15, s15
 80093f2:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80093f6:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80093fa:	2301      	movs	r3, #1
 80093fc:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8009400:	e029      	b.n	8009456 <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 8009402:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009406:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800940a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	edd3 7a00 	vldr	s15, [r3]
 8009416:	eef0 7ae7 	vabs.f32	s15, s15
 800941a:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800941e:	ed93 7a00 	vldr	s14, [r3]
 8009422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942a:	d50f      	bpl.n	800944c <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 800942c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009430:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8009434:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	edd3 7a00 	vldr	s15, [r3]
 8009440:	eef0 7ae7 	vabs.f32	s15, s15
 8009444:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8009448:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800944c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8009450:	3301      	adds	r3, #1
 8009452:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8009456:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800945a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800945e:	dbd0      	blt.n	8009402 <ExtractKvPixelParameters+0x23a>
        }
    }
    
    kvScale = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 8009466:	e00e      	b.n	8009486 <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 8009468:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800946c:	edd3 7a00 	vldr	s15, [r3]
 8009470:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009474:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8009478:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 800947c:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8009480:	3301      	adds	r3, #1
 8009482:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 8009486:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	f7f7 f864 	bl	8000558 <__aeabi_f2d>
 8009490:	a34e      	add	r3, pc, #312	; (adr r3, 80095cc <ExtractKvPixelParameters+0x404>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f7 fb29 	bl	8000aec <__aeabi_dcmplt>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e3      	bne.n	8009468 <ExtractKvPixelParameters+0x2a0>
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80094a0:	2300      	movs	r3, #0
 80094a2:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80094a6:	e075      	b.n	8009594 <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 80094a8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80094ac:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80094b0:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f7 f84c 	bl	8000558 <__aeabi_f2d>
 80094c0:	4604      	mov	r4, r0
 80094c2:	460d      	mov	r5, r1
 80094c4:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f7 f823 	bl	8000514 <__aeabi_ui2d>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	ec43 2b11 	vmov	d1, r2, r3
 80094d6:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 80095c0 <ExtractKvPixelParameters+0x3f8>
 80094da:	f005 fd09 	bl	800eef0 <pow>
 80094de:	ec53 2b10 	vmov	r2, r3, d0
 80094e2:	4620      	mov	r0, r4
 80094e4:	4629      	mov	r1, r5
 80094e6:	f7f7 f88f 	bl	8000608 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4610      	mov	r0, r2
 80094f0:	4619      	mov	r1, r3
 80094f2:	f7f7 fb81 	bl	8000bf8 <__aeabi_d2f>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f607 4224 	addw	r2, r7, #3108	; 0xc24
 80094fc:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 80094fe:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8009502:	edd3 7a00 	vldr	s15, [r3]
 8009506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950e:	d51e      	bpl.n	800954e <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 8009510:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	f7f7 f81f 	bl	8000558 <__aeabi_f2d>
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	4b2a      	ldr	r3, [pc, #168]	; (80095c8 <ExtractKvPixelParameters+0x400>)
 8009520:	f7f6 feba 	bl	8000298 <__aeabi_dsub>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4610      	mov	r0, r2
 800952a:	4619      	mov	r1, r3
 800952c:	f7f7 fb1c 	bl	8000b68 <__aeabi_d2iz>
 8009530:	4603      	mov	r3, r0
 8009532:	b259      	sxtb	r1, r3
 8009534:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009538:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8009542:	4413      	add	r3, r2
 8009544:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8009548:	460a      	mov	r2, r1
 800954a:	701a      	strb	r2, [r3, #0]
 800954c:	e01d      	b.n	800958a <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 800954e:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8009552:	6818      	ldr	r0, [r3, #0]
 8009554:	f7f7 f800 	bl	8000558 <__aeabi_f2d>
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	4b1a      	ldr	r3, [pc, #104]	; (80095c8 <ExtractKvPixelParameters+0x400>)
 800955e:	f7f6 fe9d 	bl	800029c <__adddf3>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4610      	mov	r0, r2
 8009568:	4619      	mov	r1, r3
 800956a:	f7f7 fafd 	bl	8000b68 <__aeabi_d2iz>
 800956e:	4603      	mov	r3, r0
 8009570:	b259      	sxtb	r1, r3
 8009572:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009576:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8009580:	4413      	add	r3, r2
 8009582:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8009586:	460a      	mov	r2, r1
 8009588:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800958a:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 800958e:	3301      	adds	r3, #1
 8009590:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 8009594:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8009598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800959c:	db84      	blt.n	80094a8 <ExtractKvPixelParameters+0x2e0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 800959e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80095a2:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ac:	461a      	mov	r2, r3
 80095ae:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 80095b2:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 80095b6:	bf00      	nop
 80095b8:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 80095bc:	46bd      	mov	sp, r7
 80095be:	bdb0      	pop	{r4, r5, r7, pc}
 80095c0:	00000000 	.word	0x00000000
 80095c4:	40000000 	.word	0x40000000
 80095c8:	3fe00000 	.word	0x3fe00000
 80095cc:	33333333 	.word	0x33333333
 80095d0:	404fb333 	.word	0x404fb333
 80095d4:	00000000 	.word	0x00000000

080095d8 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80095d8:	b5b0      	push	{r4, r5, r7, lr}
 80095da:	b08a      	sub	sp, #40	; 0x28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3340      	adds	r3, #64	; 0x40
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	0b1b      	lsrs	r3, r3, #12
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	331b      	adds	r3, #27
 80095f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3374      	adds	r3, #116	; 0x74
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	b21b      	sxth	r3, r3
 80095fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009600:	b21b      	sxth	r3, r3
 8009602:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8009604:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800960c:	db07      	blt.n	800961e <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 800960e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009612:	b29b      	uxth	r3, r3
 8009614:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009618:	b29b      	uxth	r3, r3
 800961a:	b21b      	sxth	r3, r3
 800961c:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3374      	adds	r3, #116	; 0x74
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	0a9b      	lsrs	r3, r3, #10
 8009626:	b29b      	uxth	r3, r3
 8009628:	b21b      	sxth	r3, r3
 800962a:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 800962c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009630:	2b1f      	cmp	r3, #31
 8009632:	dd06      	ble.n	8009642 <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8009634:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b40      	subs	r3, #64	; 0x40
 800963c:	b29b      	uxth	r3, r3
 800963e:	b21b      	sxth	r3, r3
 8009640:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8009642:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009646:	b29a      	uxth	r2, r3
 8009648:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800964c:	b29b      	uxth	r3, r3
 800964e:	4413      	add	r3, r2
 8009650:	b29b      	uxth	r3, r3
 8009652:	b21b      	sxth	r3, r3
 8009654:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3372      	adds	r3, #114	; 0x72
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009668:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 800966c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009670:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009840 <ExtractCPParameters+0x268>
 8009674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	dd07      	ble.n	800968e <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 800967e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009682:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8009844 <ExtractCPParameters+0x26c>
 8009686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800968a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4618      	mov	r0, r3
 8009692:	f7f6 ff61 	bl	8000558 <__aeabi_f2d>
 8009696:	4604      	mov	r4, r0
 8009698:	460d      	mov	r5, r1
 800969a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f6 ff38 	bl	8000514 <__aeabi_ui2d>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	ec43 2b11 	vmov	d1, r2, r3
 80096ac:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8009838 <ExtractCPParameters+0x260>
 80096b0:	f005 fc1e 	bl	800eef0 <pow>
 80096b4:	ec53 2b10 	vmov	r2, r3, d0
 80096b8:	4620      	mov	r0, r4
 80096ba:	4629      	mov	r1, r5
 80096bc:	f7f7 f8ce 	bl	800085c <__aeabi_ddiv>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f7 fa96 	bl	8000bf8 <__aeabi_d2f>
 80096cc:	4603      	mov	r3, r0
 80096ce:	60fb      	str	r3, [r7, #12]
    
    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3372      	adds	r3, #114	; 0x72
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	0a9b      	lsrs	r3, r3, #10
 80096d8:	b29b      	uxth	r3, r3
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096e2:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 80096e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80096ea:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80096ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f6:	dd07      	ble.n	8009708 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 80096f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80096fc:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8009848 <ExtractCPParameters+0x270>
 8009700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009704:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8009708:	ed97 7a04 	vldr	s14, [r7, #16]
 800970c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800984c <ExtractCPParameters+0x274>
 8009710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800971c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009724:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3376      	adds	r3, #118	; 0x76
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b25b      	sxtb	r3, r3
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009738:	edc7 7a08 	vstr	s15, [r7, #32]
    
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;    
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3370      	adds	r3, #112	; 0x70
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	111b      	asrs	r3, r3, #4
 8009744:	b2db      	uxtb	r3, r3
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	b2db      	uxtb	r3, r3
 800974c:	3308      	adds	r3, #8
 800974e:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 8009750:	6a38      	ldr	r0, [r7, #32]
 8009752:	f7f6 ff01 	bl	8000558 <__aeabi_f2d>
 8009756:	4604      	mov	r4, r0
 8009758:	460d      	mov	r5, r1
 800975a:	7ffb      	ldrb	r3, [r7, #31]
 800975c:	4618      	mov	r0, r3
 800975e:	f7f6 fed9 	bl	8000514 <__aeabi_ui2d>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	ec43 2b11 	vmov	d1, r2, r3
 800976a:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8009838 <ExtractCPParameters+0x260>
 800976e:	f005 fbbf 	bl	800eef0 <pow>
 8009772:	ec53 2b10 	vmov	r2, r3, d0
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f7 f86f 	bl	800085c <__aeabi_ddiv>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4610      	mov	r0, r2
 8009784:	4619      	mov	r1, r3
 8009786:	f7f7 fa37 	bl	8000bf8 <__aeabi_d2f>
 800978a:	4602      	mov	r2, r0
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	621a      	str	r2, [r3, #32]
    
    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3376      	adds	r3, #118	; 0x76
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	0a1b      	lsrs	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	b25b      	sxtb	r3, r3
 800979c:	ee07 3a90 	vmov	s15, r3
 80097a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097a4:	edc7 7a06 	vstr	s15, [r7, #24]
    
    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3370      	adds	r3, #112	; 0x70
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	121b      	asrs	r3, r3, #8
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 80097b8:	69b8      	ldr	r0, [r7, #24]
 80097ba:	f7f6 fecd 	bl	8000558 <__aeabi_f2d>
 80097be:	4604      	mov	r4, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7f6 fea5 	bl	8000514 <__aeabi_ui2d>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	ec43 2b11 	vmov	d1, r2, r3
 80097d2:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8009838 <ExtractCPParameters+0x260>
 80097d6:	f005 fb8b 	bl	800eef0 <pow>
 80097da:	ec53 2b10 	vmov	r2, r3, d0
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f83b 	bl	800085c <__aeabi_ddiv>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	f7f7 fa03 	bl	8000bf8 <__aeabi_d2f>
 80097f2:	4602      	mov	r2, r0
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	61da      	str	r2, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009800:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800980c:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8009810:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 800981e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009828:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 800982c:	bf00      	nop
 800982e:	3728      	adds	r7, #40	; 0x28
 8009830:	46bd      	mov	sp, r7
 8009832:	bdb0      	pop	{r4, r5, r7, pc}
 8009834:	f3af 8000 	nop.w
 8009838:	00000000 	.word	0x00000000
 800983c:	40000000 	.word	0x40000000
 8009840:	43ff8000 	.word	0x43ff8000
 8009844:	44800000 	.word	0x44800000
 8009848:	42800000 	.word	0x42800000
 800984c:	43000000 	.word	0x43000000

08009850 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3314      	adds	r3, #20
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	111b      	asrs	r3, r3, #4
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009868:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8009870:	43db      	mvns	r3, r3
 8009872:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	336a      	adds	r3, #106	; 0x6a
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009886:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 800988a:	edd7 7a02 	vldr	s15, [r7, #8]
 800988e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8009892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989a:	dd07      	ble.n	80098ac <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 800989c:	edd7 7a02 	vldr	s15, [r7, #8]
 80098a0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009988 <ExtractCILCParameters+0x138>
 80098a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098a8:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 80098ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80098b0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80098b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098b8:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	336a      	adds	r3, #106	; 0x6a
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	119b      	asrs	r3, r3, #6
 80098c4:	f003 031f 	and.w	r3, r3, #31
 80098c8:	ee07 3a90 	vmov	s15, r3
 80098cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098d0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 80098d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80098d8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80098dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e4:	dd07      	ble.n	80098f6 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 80098e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80098ea:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800998c <ExtractCILCParameters+0x13c>
 80098ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098f2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 80098f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80098fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80098fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009902:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	336a      	adds	r3, #106	; 0x6a
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	0adb      	lsrs	r3, r3, #11
 800990e:	b29b      	uxth	r3, r3
 8009910:	ee07 3a90 	vmov	s15, r3
 8009914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009918:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 800991c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009920:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8009924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992c:	dd07      	ble.n	800993e <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 800992e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009932:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800998c <ExtractCILCParameters+0x13c>
 8009936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800993a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 800993e:	ed97 7a04 	vldr	s14, [r7, #16]
 8009942:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8009946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800994a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	7dfa      	ldrb	r2, [r7, #23]
 8009952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800995e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800996a:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009976:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	42800000 	.word	0x42800000
 800998c:	42000000 	.word	0x42000000

08009990 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 80099aa:	2300      	movs	r3, #0
 80099ac:	82fb      	strh	r3, [r7, #22]
 80099ae:	e013      	b.n	80099d8 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 80099b0:	8afa      	ldrh	r2, [r7, #22]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80099b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80099bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 80099c0:	8afb      	ldrh	r3, [r7, #22]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	4413      	add	r3, r2
 80099cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099d0:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 80099d2:	8afb      	ldrh	r3, [r7, #22]
 80099d4:	3301      	adds	r3, #1
 80099d6:	82fb      	strh	r3, [r7, #22]
 80099d8:	8afb      	ldrh	r3, [r7, #22]
 80099da:	2b04      	cmp	r3, #4
 80099dc:	d9e8      	bls.n	80099b0 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 80099de:	2300      	movs	r3, #0
 80099e0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 80099e2:	e02a      	b.n	8009a3a <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 80099e4:	8afb      	ldrh	r3, [r7, #22]
 80099e6:	3340      	adds	r3, #64	; 0x40
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	4413      	add	r3, r2
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 80099f4:	8aba      	ldrh	r2, [r7, #20]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80099fc:	8af9      	ldrh	r1, [r7, #22]
 80099fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8009a02:	8abb      	ldrh	r3, [r7, #20]
 8009a04:	3301      	adds	r3, #1
 8009a06:	82bb      	strh	r3, [r7, #20]
 8009a08:	e014      	b.n	8009a34 <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8009a0a:	8afb      	ldrh	r3, [r7, #22]
 8009a0c:	3340      	adds	r3, #64	; 0x40
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00a      	beq.n	8009a34 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8009a1e:	8a7b      	ldrh	r3, [r7, #18]
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	4413      	add	r3, r2
 8009a2a:	8afa      	ldrh	r2, [r7, #22]
 8009a2c:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8009a2e:	8a7b      	ldrh	r3, [r7, #18]
 8009a30:	3301      	adds	r3, #1
 8009a32:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8009a34:	8afb      	ldrh	r3, [r7, #22]
 8009a36:	3301      	adds	r3, #1
 8009a38:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8009a3a:	8afb      	ldrh	r3, [r7, #22]
 8009a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a40:	d205      	bcs.n	8009a4e <ExtractDeviatingPixels+0xbe>
 8009a42:	8abb      	ldrh	r3, [r7, #20]
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d802      	bhi.n	8009a4e <ExtractDeviatingPixels+0xbe>
 8009a48:	8a7b      	ldrh	r3, [r7, #18]
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	d9ca      	bls.n	80099e4 <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 8009a4e:	8abb      	ldrh	r3, [r7, #20]
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d903      	bls.n	8009a5c <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 8009a54:	f06f 0302 	mvn.w	r3, #2
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	e08f      	b.n	8009b7c <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 8009a5c:	8a7b      	ldrh	r3, [r7, #18]
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d903      	bls.n	8009a6a <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 8009a62:	f06f 0303 	mvn.w	r3, #3
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	e088      	b.n	8009b7c <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8009a6a:	8aba      	ldrh	r2, [r7, #20]
 8009a6c:	8a7b      	ldrh	r3, [r7, #18]
 8009a6e:	4413      	add	r3, r2
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	dd03      	ble.n	8009a7c <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 8009a74:	f06f 0304 	mvn.w	r3, #4
 8009a78:	60fb      	str	r3, [r7, #12]
 8009a7a:	e07f      	b.n	8009b7c <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	82fb      	strh	r3, [r7, #22]
 8009a80:	e022      	b.n	8009ac8 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8009a82:	8afb      	ldrh	r3, [r7, #22]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60bb      	str	r3, [r7, #8]
 8009a88:	e017      	b.n	8009aba <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8009a8a:	8afa      	ldrh	r2, [r7, #22]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8009a92:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8009a9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	f000 f86f 	bl	8009b86 <CheckAdjacentPixels>
 8009aa8:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	e064      	b.n	8009b7e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60bb      	str	r3, [r7, #8]
 8009aba:	8abb      	ldrh	r3, [r7, #20]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	dbe3      	blt.n	8009a8a <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8009ac2:	8afb      	ldrh	r3, [r7, #22]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	82fb      	strh	r3, [r7, #22]
 8009ac8:	8afa      	ldrh	r2, [r7, #22]
 8009aca:	8abb      	ldrh	r3, [r7, #20]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d3d8      	bcc.n	8009a82 <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	82fb      	strh	r3, [r7, #22]
 8009ad4:	e024      	b.n	8009b20 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8009ad6:	8afb      	ldrh	r3, [r7, #22]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	60bb      	str	r3, [r7, #8]
 8009adc:	e019      	b.n	8009b12 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8009ade:	8afb      	ldrh	r3, [r7, #22]
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	4413      	add	r3, r2
 8009aea:	8858      	ldrh	r0, [r3, #2]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4413      	add	r3, r2
 8009af8:	885b      	ldrh	r3, [r3, #2]
 8009afa:	4619      	mov	r1, r3
 8009afc:	f000 f843 	bl	8009b86 <CheckAdjacentPixels>
 8009b00:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	e038      	b.n	8009b7e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60bb      	str	r3, [r7, #8]
 8009b12:	8a7b      	ldrh	r3, [r7, #18]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	dbe1      	blt.n	8009ade <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8009b1a:	8afb      	ldrh	r3, [r7, #22]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	82fb      	strh	r3, [r7, #22]
 8009b20:	8afa      	ldrh	r2, [r7, #22]
 8009b22:	8a7b      	ldrh	r3, [r7, #18]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d3d6      	bcc.n	8009ad6 <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	82fb      	strh	r3, [r7, #22]
 8009b2c:	e022      	b.n	8009b74 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60bb      	str	r3, [r7, #8]
 8009b32:	e018      	b.n	8009b66 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8009b34:	8afa      	ldrh	r2, [r7, #22]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8009b3c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	4413      	add	r3, r2
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	f000 f819 	bl	8009b86 <CheckAdjacentPixels>
 8009b54:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	e00e      	b.n	8009b7e <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	3301      	adds	r3, #1
 8009b64:	60bb      	str	r3, [r7, #8]
 8009b66:	8a7b      	ldrh	r3, [r7, #18]
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	dbe2      	blt.n	8009b34 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8009b6e:	8afb      	ldrh	r3, [r7, #22]
 8009b70:	3301      	adds	r3, #1
 8009b72:	82fb      	strh	r3, [r7, #22]
 8009b74:	8afa      	ldrh	r2, [r7, #22]
 8009b76:	8abb      	ldrh	r3, [r7, #20]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d3d8      	bcc.n	8009b2e <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
       
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8009b86:	b480      	push	{r7}
 8009b88:	b085      	sub	sp, #20
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	460a      	mov	r2, r1
 8009b90:	80fb      	strh	r3, [r7, #6]
 8009b92:	4613      	mov	r3, r2
 8009b94:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 8009b96:	88fa      	ldrh	r2, [r7, #6]
 8009b98:	88bb      	ldrh	r3, [r7, #4]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f113 0f21 	cmn.w	r3, #33	; 0x21
 8009ba4:	db06      	blt.n	8009bb4 <CheckAdjacentPixels+0x2e>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f113 0f1e 	cmn.w	r3, #30
 8009bac:	da02      	bge.n	8009bb4 <CheckAdjacentPixels+0x2e>
     {
         return -MLX90640_ADJACENT_BAD_PIXELS_ERROR;
 8009bae:	f06f 0305 	mvn.w	r3, #5
 8009bb2:	e013      	b.n	8009bdc <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	db05      	blt.n	8009bc8 <CheckAdjacentPixels+0x42>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	dc02      	bgt.n	8009bc8 <CheckAdjacentPixels+0x42>
     {
         return -MLX90640_ADJACENT_BAD_PIXELS_ERROR;
 8009bc2:	f06f 0305 	mvn.w	r3, #5
 8009bc6:	e009      	b.n	8009bdc <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b1e      	cmp	r3, #30
 8009bcc:	dd05      	ble.n	8009bda <CheckAdjacentPixels+0x54>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b21      	cmp	r3, #33	; 0x21
 8009bd2:	dc02      	bgt.n	8009bda <CheckAdjacentPixels+0x54>
     {
         return -MLX90640_ADJACENT_BAD_PIXELS_ERROR;
 8009bd4:	f06f 0305 	mvn.w	r3, #5
 8009bd8:	e000      	b.n	8009bdc <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 8009bda:	2300      	movs	r3, #0
 }
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bf8:	f002 fc1e 	bl	800c438 <USBD_static_malloc>
 8009bfc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d109      	bne.n	8009c18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32b0      	adds	r2, #176	; 0xb0
 8009c0e:	2100      	movs	r1, #0
 8009c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c14:	2302      	movs	r3, #2
 8009c16:	e0d4      	b.n	8009dc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f003 faaa 	bl	800d178 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	32b0      	adds	r2, #176	; 0xb0
 8009c2e:	68f9      	ldr	r1, [r7, #12]
 8009c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	32b0      	adds	r2, #176	; 0xb0
 8009c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	7c1b      	ldrb	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d138      	bne.n	8009cc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c50:	4b5e      	ldr	r3, [pc, #376]	; (8009dcc <USBD_CDC_Init+0x1e4>)
 8009c52:	7819      	ldrb	r1, [r3, #0]
 8009c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c58:	2202      	movs	r2, #2
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f002 fac9 	bl	800c1f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c60:	4b5a      	ldr	r3, [pc, #360]	; (8009dcc <USBD_CDC_Init+0x1e4>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 020f 	and.w	r2, r3, #15
 8009c68:	6879      	ldr	r1, [r7, #4]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	440b      	add	r3, r1
 8009c74:	3324      	adds	r3, #36	; 0x24
 8009c76:	2201      	movs	r2, #1
 8009c78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c7a:	4b55      	ldr	r3, [pc, #340]	; (8009dd0 <USBD_CDC_Init+0x1e8>)
 8009c7c:	7819      	ldrb	r1, [r3, #0]
 8009c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c82:	2202      	movs	r2, #2
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f002 fab4 	bl	800c1f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c8a:	4b51      	ldr	r3, [pc, #324]	; (8009dd0 <USBD_CDC_Init+0x1e8>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	f003 020f 	and.w	r2, r3, #15
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ca6:	4b4b      	ldr	r3, [pc, #300]	; (8009dd4 <USBD_CDC_Init+0x1ec>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	f003 020f 	and.w	r2, r3, #15
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	440b      	add	r3, r1
 8009cba:	3326      	adds	r3, #38	; 0x26
 8009cbc:	2210      	movs	r2, #16
 8009cbe:	801a      	strh	r2, [r3, #0]
 8009cc0:	e035      	b.n	8009d2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cc2:	4b42      	ldr	r3, [pc, #264]	; (8009dcc <USBD_CDC_Init+0x1e4>)
 8009cc4:	7819      	ldrb	r1, [r3, #0]
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	2202      	movs	r2, #2
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 fa91 	bl	800c1f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cd0:	4b3e      	ldr	r3, [pc, #248]	; (8009dcc <USBD_CDC_Init+0x1e4>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f003 020f 	and.w	r2, r3, #15
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	3324      	adds	r3, #36	; 0x24
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cea:	4b39      	ldr	r3, [pc, #228]	; (8009dd0 <USBD_CDC_Init+0x1e8>)
 8009cec:	7819      	ldrb	r1, [r3, #0]
 8009cee:	2340      	movs	r3, #64	; 0x40
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f002 fa7d 	bl	800c1f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cf8:	4b35      	ldr	r3, [pc, #212]	; (8009dd0 <USBD_CDC_Init+0x1e8>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f003 020f 	and.w	r2, r3, #15
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	4613      	mov	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	440b      	add	r3, r1
 8009d0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d10:	2201      	movs	r2, #1
 8009d12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d14:	4b2f      	ldr	r3, [pc, #188]	; (8009dd4 <USBD_CDC_Init+0x1ec>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	f003 020f 	and.w	r2, r3, #15
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	440b      	add	r3, r1
 8009d28:	3326      	adds	r3, #38	; 0x26
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d2e:	4b29      	ldr	r3, [pc, #164]	; (8009dd4 <USBD_CDC_Init+0x1ec>)
 8009d30:	7819      	ldrb	r1, [r3, #0]
 8009d32:	2308      	movs	r3, #8
 8009d34:	2203      	movs	r2, #3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f002 fa5b 	bl	800c1f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d3c:	4b25      	ldr	r3, [pc, #148]	; (8009dd4 <USBD_CDC_Init+0x1ec>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	f003 020f 	and.w	r2, r3, #15
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	3324      	adds	r3, #36	; 0x24
 8009d52:	2201      	movs	r2, #1
 8009d54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	33b0      	adds	r3, #176	; 0xb0
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d101      	bne.n	8009d90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	e018      	b.n	8009dc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	7c1b      	ldrb	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10a      	bne.n	8009dae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d98:	4b0d      	ldr	r3, [pc, #52]	; (8009dd0 <USBD_CDC_Init+0x1e8>)
 8009d9a:	7819      	ldrb	r1, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f002 fb12 	bl	800c3d0 <USBD_LL_PrepareReceive>
 8009dac:	e008      	b.n	8009dc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dae:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <USBD_CDC_Init+0x1e8>)
 8009db0:	7819      	ldrb	r1, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009db8:	2340      	movs	r3, #64	; 0x40
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f002 fb08 	bl	800c3d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000093 	.word	0x20000093
 8009dd0:	20000094 	.word	0x20000094
 8009dd4:	20000095 	.word	0x20000095

08009dd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009de4:	4b3a      	ldr	r3, [pc, #232]	; (8009ed0 <USBD_CDC_DeInit+0xf8>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f002 fa27 	bl	800c23e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009df0:	4b37      	ldr	r3, [pc, #220]	; (8009ed0 <USBD_CDC_DeInit+0xf8>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	440b      	add	r3, r1
 8009e04:	3324      	adds	r3, #36	; 0x24
 8009e06:	2200      	movs	r2, #0
 8009e08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e0a:	4b32      	ldr	r3, [pc, #200]	; (8009ed4 <USBD_CDC_DeInit+0xfc>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f002 fa14 	bl	800c23e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e16:	4b2f      	ldr	r3, [pc, #188]	; (8009ed4 <USBD_CDC_DeInit+0xfc>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f003 020f 	and.w	r2, r3, #15
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	440b      	add	r3, r1
 8009e2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e2e:	2200      	movs	r2, #0
 8009e30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e32:	4b29      	ldr	r3, [pc, #164]	; (8009ed8 <USBD_CDC_DeInit+0x100>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f002 fa00 	bl	800c23e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e3e:	4b26      	ldr	r3, [pc, #152]	; (8009ed8 <USBD_CDC_DeInit+0x100>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	f003 020f 	and.w	r2, r3, #15
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	440b      	add	r3, r1
 8009e52:	3324      	adds	r3, #36	; 0x24
 8009e54:	2200      	movs	r2, #0
 8009e56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e58:	4b1f      	ldr	r3, [pc, #124]	; (8009ed8 <USBD_CDC_DeInit+0x100>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f003 020f 	and.w	r2, r3, #15
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	440b      	add	r3, r1
 8009e6c:	3326      	adds	r3, #38	; 0x26
 8009e6e:	2200      	movs	r2, #0
 8009e70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	32b0      	adds	r2, #176	; 0xb0
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01f      	beq.n	8009ec4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	33b0      	adds	r3, #176	; 0xb0
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	32b0      	adds	r2, #176	; 0xb0
 8009ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f002 fad4 	bl	800c454 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	32b0      	adds	r2, #176	; 0xb0
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000093 	.word	0x20000093
 8009ed4:	20000094 	.word	0x20000094
 8009ed8:	20000095 	.word	0x20000095

08009edc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	32b0      	adds	r2, #176	; 0xb0
 8009ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e0bf      	b.n	800a08c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d050      	beq.n	8009fba <USBD_CDC_Setup+0xde>
 8009f18:	2b20      	cmp	r3, #32
 8009f1a:	f040 80af 	bne.w	800a07c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	88db      	ldrh	r3, [r3, #6]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d03a      	beq.n	8009f9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	b25b      	sxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	da1b      	bge.n	8009f68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	33b0      	adds	r3, #176	; 0xb0
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	88d2      	ldrh	r2, [r2, #6]
 8009f4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	88db      	ldrh	r3, [r3, #6]
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	bf28      	it	cs
 8009f56:	2307      	movcs	r3, #7
 8009f58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	89fa      	ldrh	r2, [r7, #14]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 fd43 	bl	800b9ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f66:	e090      	b.n	800a08a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	785a      	ldrb	r2, [r3, #1]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	88db      	ldrh	r3, [r3, #6]
 8009f76:	2b3f      	cmp	r3, #63	; 0x3f
 8009f78:	d803      	bhi.n	8009f82 <USBD_CDC_Setup+0xa6>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	88db      	ldrh	r3, [r3, #6]
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	e000      	b.n	8009f84 <USBD_CDC_Setup+0xa8>
 8009f82:	2240      	movs	r2, #64	; 0x40
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f8a:	6939      	ldr	r1, [r7, #16]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f92:	461a      	mov	r2, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 fd55 	bl	800ba44 <USBD_CtlPrepareRx>
      break;
 8009f9a:	e076      	b.n	800a08a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	33b0      	adds	r3, #176	; 0xb0
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	7850      	ldrb	r0, [r2, #1]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	4798      	blx	r3
      break;
 8009fb8:	e067      	b.n	800a08a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b0b      	cmp	r3, #11
 8009fc0:	d851      	bhi.n	800a066 <USBD_CDC_Setup+0x18a>
 8009fc2:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <USBD_CDC_Setup+0xec>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	08009ff9 	.word	0x08009ff9
 8009fcc:	0800a075 	.word	0x0800a075
 8009fd0:	0800a067 	.word	0x0800a067
 8009fd4:	0800a067 	.word	0x0800a067
 8009fd8:	0800a067 	.word	0x0800a067
 8009fdc:	0800a067 	.word	0x0800a067
 8009fe0:	0800a067 	.word	0x0800a067
 8009fe4:	0800a067 	.word	0x0800a067
 8009fe8:	0800a067 	.word	0x0800a067
 8009fec:	0800a067 	.word	0x0800a067
 8009ff0:	0800a023 	.word	0x0800a023
 8009ff4:	0800a04d 	.word	0x0800a04d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b03      	cmp	r3, #3
 800a002:	d107      	bne.n	800a014 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a004:	f107 030a 	add.w	r3, r7, #10
 800a008:	2202      	movs	r2, #2
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 fced 	bl	800b9ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a012:	e032      	b.n	800a07a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fc77 	bl	800b90a <USBD_CtlError>
            ret = USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	75fb      	strb	r3, [r7, #23]
          break;
 800a020:	e02b      	b.n	800a07a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d107      	bne.n	800a03e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a02e:	f107 030d 	add.w	r3, r7, #13
 800a032:	2201      	movs	r2, #1
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 fcd8 	bl	800b9ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a03c:	e01d      	b.n	800a07a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f001 fc62 	bl	800b90a <USBD_CtlError>
            ret = USBD_FAIL;
 800a046:	2303      	movs	r3, #3
 800a048:	75fb      	strb	r3, [r7, #23]
          break;
 800a04a:	e016      	b.n	800a07a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b03      	cmp	r3, #3
 800a056:	d00f      	beq.n	800a078 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 fc55 	bl	800b90a <USBD_CtlError>
            ret = USBD_FAIL;
 800a060:	2303      	movs	r3, #3
 800a062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a064:	e008      	b.n	800a078 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 fc4e 	bl	800b90a <USBD_CtlError>
          ret = USBD_FAIL;
 800a06e:	2303      	movs	r3, #3
 800a070:	75fb      	strb	r3, [r7, #23]
          break;
 800a072:	e002      	b.n	800a07a <USBD_CDC_Setup+0x19e>
          break;
 800a074:	bf00      	nop
 800a076:	e008      	b.n	800a08a <USBD_CDC_Setup+0x1ae>
          break;
 800a078:	bf00      	nop
      }
      break;
 800a07a:	e006      	b.n	800a08a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fc43 	bl	800b90a <USBD_CtlError>
      ret = USBD_FAIL;
 800a084:	2303      	movs	r3, #3
 800a086:	75fb      	strb	r3, [r7, #23]
      break;
 800a088:	bf00      	nop
  }

  return (uint8_t)ret;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	32b0      	adds	r2, #176	; 0xb0
 800a0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e065      	b.n	800a18a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	32b0      	adds	r2, #176	; 0xb0
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0ce:	78fb      	ldrb	r3, [r7, #3]
 800a0d0:	f003 020f 	and.w	r2, r3, #15
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	3318      	adds	r3, #24
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d02f      	beq.n	800a148 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	f003 020f 	and.w	r2, r3, #15
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	3318      	adds	r3, #24
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	f003 010f 	and.w	r1, r3, #15
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	460b      	mov	r3, r1
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	440b      	add	r3, r1
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4403      	add	r3, r0
 800a110:	3348      	adds	r3, #72	; 0x48
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	fbb2 f1f3 	udiv	r1, r2, r3
 800a118:	fb01 f303 	mul.w	r3, r1, r3
 800a11c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d112      	bne.n	800a148 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	f003 020f 	and.w	r2, r3, #15
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	4613      	mov	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	3318      	adds	r3, #24
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a13a:	78f9      	ldrb	r1, [r7, #3]
 800a13c:	2300      	movs	r3, #0
 800a13e:	2200      	movs	r2, #0
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 f924 	bl	800c38e <USBD_LL_Transmit>
 800a146:	e01f      	b.n	800a188 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	33b0      	adds	r3, #176	; 0xb0
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d010      	beq.n	800a188 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	33b0      	adds	r3, #176	; 0xb0
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a184:	78fa      	ldrb	r2, [r7, #3]
 800a186:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	32b0      	adds	r2, #176	; 0xb0
 800a1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	32b0      	adds	r2, #176	; 0xb0
 800a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e01a      	b.n	800a1fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1c4:	78fb      	ldrb	r3, [r7, #3]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f002 f922 	bl	800c412 <USBD_LL_GetRxDataSize>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	33b0      	adds	r3, #176	; 0xb0
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	32b0      	adds	r2, #176	; 0xb0
 800a214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a218:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a220:	2303      	movs	r3, #3
 800a222:	e025      	b.n	800a270 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	33b0      	adds	r3, #176	; 0xb0
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d01a      	beq.n	800a26e <USBD_CDC_EP0_RxReady+0x6c>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a23e:	2bff      	cmp	r3, #255	; 0xff
 800a240:	d015      	beq.n	800a26e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	33b0      	adds	r3, #176	; 0xb0
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a25a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a262:	b292      	uxth	r2, r2
 800a264:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	22ff      	movs	r2, #255	; 0xff
 800a26a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a280:	2182      	movs	r1, #130	; 0x82
 800a282:	4818      	ldr	r0, [pc, #96]	; (800a2e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a284:	f000 fd09 	bl	800ac9a <USBD_GetEpDesc>
 800a288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a28a:	2101      	movs	r1, #1
 800a28c:	4815      	ldr	r0, [pc, #84]	; (800a2e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a28e:	f000 fd04 	bl	800ac9a <USBD_GetEpDesc>
 800a292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a294:	2181      	movs	r1, #129	; 0x81
 800a296:	4813      	ldr	r0, [pc, #76]	; (800a2e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a298:	f000 fcff 	bl	800ac9a <USBD_GetEpDesc>
 800a29c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2210      	movs	r2, #16
 800a2a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d006      	beq.n	800a2be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2b8:	711a      	strb	r2, [r3, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2cc:	711a      	strb	r2, [r3, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2243      	movs	r2, #67	; 0x43
 800a2d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2d8:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000050 	.word	0x20000050

0800a2e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2f0:	2182      	movs	r1, #130	; 0x82
 800a2f2:	4818      	ldr	r0, [pc, #96]	; (800a354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2f4:	f000 fcd1 	bl	800ac9a <USBD_GetEpDesc>
 800a2f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	4815      	ldr	r0, [pc, #84]	; (800a354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2fe:	f000 fccc 	bl	800ac9a <USBD_GetEpDesc>
 800a302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a304:	2181      	movs	r1, #129	; 0x81
 800a306:	4813      	ldr	r0, [pc, #76]	; (800a354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a308:	f000 fcc7 	bl	800ac9a <USBD_GetEpDesc>
 800a30c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	2210      	movs	r2, #16
 800a318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d006      	beq.n	800a32e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2200      	movs	r2, #0
 800a324:	711a      	strb	r2, [r3, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f042 0202 	orr.w	r2, r2, #2
 800a32c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d006      	beq.n	800a342 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	711a      	strb	r2, [r3, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f042 0202 	orr.w	r2, r2, #2
 800a340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2243      	movs	r2, #67	; 0x43
 800a346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000050 	.word	0x20000050

0800a358 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a360:	2182      	movs	r1, #130	; 0x82
 800a362:	4818      	ldr	r0, [pc, #96]	; (800a3c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a364:	f000 fc99 	bl	800ac9a <USBD_GetEpDesc>
 800a368:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a36a:	2101      	movs	r1, #1
 800a36c:	4815      	ldr	r0, [pc, #84]	; (800a3c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a36e:	f000 fc94 	bl	800ac9a <USBD_GetEpDesc>
 800a372:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a374:	2181      	movs	r1, #129	; 0x81
 800a376:	4813      	ldr	r0, [pc, #76]	; (800a3c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a378:	f000 fc8f 	bl	800ac9a <USBD_GetEpDesc>
 800a37c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2210      	movs	r2, #16
 800a388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d006      	beq.n	800a39e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2200      	movs	r2, #0
 800a394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a398:	711a      	strb	r2, [r3, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d006      	beq.n	800a3b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ac:	711a      	strb	r2, [r3, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2243      	movs	r2, #67	; 0x43
 800a3b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3b8:	4b02      	ldr	r3, [pc, #8]	; (800a3c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000050 	.word	0x20000050

0800a3c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	220a      	movs	r2, #10
 800a3d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3d6:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	2000000c 	.word	0x2000000c

0800a3e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e009      	b.n	800a410 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	33b0      	adds	r3, #176	; 0xb0
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	32b0      	adds	r2, #176	; 0xb0
 800a432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a436:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	e008      	b.n	800a454 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	32b0      	adds	r2, #176	; 0xb0
 800a474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a478:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a480:	2303      	movs	r3, #3
 800a482:	e004      	b.n	800a48e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
	...

0800a49c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	32b0      	adds	r2, #176	; 0xb0
 800a4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	32b0      	adds	r2, #176	; 0xb0
 800a4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e018      	b.n	800a4fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	7c1b      	ldrb	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <USBD_CDC_ReceivePacket+0x68>)
 800a4d4:	7819      	ldrb	r1, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 ff75 	bl	800c3d0 <USBD_LL_PrepareReceive>
 800a4e6:	e008      	b.n	800a4fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4e8:	4b06      	ldr	r3, [pc, #24]	; (800a504 <USBD_CDC_ReceivePacket+0x68>)
 800a4ea:	7819      	ldrb	r1, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4f2:	2340      	movs	r3, #64	; 0x40
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 ff6b 	bl	800c3d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20000094 	.word	0x20000094

0800a508 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e01f      	b.n	800a560 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	79fa      	ldrb	r2, [r7, #7]
 800a552:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f001 fde5 	bl	800c124 <USBD_LL_Init>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e025      	b.n	800a5cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	32ae      	adds	r2, #174	; 0xae
 800a592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00f      	beq.n	800a5bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	32ae      	adds	r2, #174	; 0xae
 800a5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ac:	f107 020e 	add.w	r2, r7, #14
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4798      	blx	r3
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 fded 	bl	800c1bc <USBD_LL_Start>
 800a5e2:	4603      	mov	r3, r0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	460b      	mov	r3, r1
 800a60c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d009      	beq.n	800a630 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	78fa      	ldrb	r2, [r7, #3]
 800a626:	4611      	mov	r1, r2
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	4798      	blx	r3
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	78fa      	ldrb	r2, [r7, #3]
 800a654:	4611      	mov	r1, r2
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	4798      	blx	r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a660:	2303      	movs	r3, #3
 800a662:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	4618      	mov	r0, r3
 800a682:	f001 f908 	bl	800b896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a694:	461a      	mov	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6a2:	f003 031f 	and.w	r3, r3, #31
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d01a      	beq.n	800a6e0 <USBD_LL_SetupStage+0x72>
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d822      	bhi.n	800a6f4 <USBD_LL_SetupStage+0x86>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <USBD_LL_SetupStage+0x4a>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d00a      	beq.n	800a6cc <USBD_LL_SetupStage+0x5e>
 800a6b6:	e01d      	b.n	800a6f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fb5f 	bl	800ad84 <USBD_StdDevReq>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ca:	e020      	b.n	800a70e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fbc7 	bl	800ae68 <USBD_StdItfReq>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6de:	e016      	b.n	800a70e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fc29 	bl	800af40 <USBD_StdEPReq>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f2:	e00c      	b.n	800a70e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f001 fdba 	bl	800c27c <USBD_LL_StallEP>
 800a708:	4603      	mov	r3, r0
 800a70a:	73fb      	strb	r3, [r7, #15]
      break;
 800a70c:	bf00      	nop
  }

  return ret;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	460b      	mov	r3, r1
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a72a:	7afb      	ldrb	r3, [r7, #11]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d16e      	bne.n	800a80e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a73e:	2b03      	cmp	r3, #3
 800a740:	f040 8098 	bne.w	800a874 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d913      	bls.n	800a778 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	1ad2      	subs	r2, r2, r3
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	68da      	ldr	r2, [r3, #12]
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	4293      	cmp	r3, r2
 800a768:	bf28      	it	cs
 800a76a:	4613      	movcs	r3, r2
 800a76c:	461a      	mov	r2, r3
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f001 f984 	bl	800ba7e <USBD_CtlContinueRx>
 800a776:	e07d      	b.n	800a874 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a77e:	f003 031f 	and.w	r3, r3, #31
 800a782:	2b02      	cmp	r3, #2
 800a784:	d014      	beq.n	800a7b0 <USBD_LL_DataOutStage+0x98>
 800a786:	2b02      	cmp	r3, #2
 800a788:	d81d      	bhi.n	800a7c6 <USBD_LL_DataOutStage+0xae>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <USBD_LL_DataOutStage+0x7c>
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d003      	beq.n	800a79a <USBD_LL_DataOutStage+0x82>
 800a792:	e018      	b.n	800a7c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	75bb      	strb	r3, [r7, #22]
            break;
 800a798:	e018      	b.n	800a7cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 fa5e 	bl	800ac66 <USBD_CoreFindIF>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	75bb      	strb	r3, [r7, #22]
            break;
 800a7ae:	e00d      	b.n	800a7cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 fa60 	bl	800ac80 <USBD_CoreFindEP>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c4:	e002      	b.n	800a7cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	75bb      	strb	r3, [r7, #22]
            break;
 800a7ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7cc:	7dbb      	ldrb	r3, [r7, #22]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d119      	bne.n	800a806 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d113      	bne.n	800a806 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7de:	7dba      	ldrb	r2, [r7, #22]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	32ae      	adds	r2, #174	; 0xae
 800a7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a7ee:	7dba      	ldrb	r2, [r7, #22]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a7f6:	7dba      	ldrb	r2, [r7, #22]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	32ae      	adds	r2, #174	; 0xae
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f001 f94a 	bl	800baa0 <USBD_CtlSendStatus>
 800a80c:	e032      	b.n	800a874 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a80e:	7afb      	ldrb	r3, [r7, #11]
 800a810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a814:	b2db      	uxtb	r3, r3
 800a816:	4619      	mov	r1, r3
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 fa31 	bl	800ac80 <USBD_CoreFindEP>
 800a81e:	4603      	mov	r3, r0
 800a820:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a822:	7dbb      	ldrb	r3, [r7, #22]
 800a824:	2bff      	cmp	r3, #255	; 0xff
 800a826:	d025      	beq.n	800a874 <USBD_LL_DataOutStage+0x15c>
 800a828:	7dbb      	ldrb	r3, [r7, #22]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d122      	bne.n	800a874 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b03      	cmp	r3, #3
 800a838:	d117      	bne.n	800a86a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a83a:	7dba      	ldrb	r2, [r7, #22]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	32ae      	adds	r2, #174	; 0xae
 800a840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00f      	beq.n	800a86a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a84a:	7dba      	ldrb	r2, [r7, #22]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a852:	7dba      	ldrb	r2, [r7, #22]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	32ae      	adds	r2, #174	; 0xae
 800a858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	7afa      	ldrb	r2, [r7, #11]
 800a860:	4611      	mov	r1, r2
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	4798      	blx	r3
 800a866:	4603      	mov	r3, r0
 800a868:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a870:	7dfb      	ldrb	r3, [r7, #23]
 800a872:	e000      	b.n	800a876 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	460b      	mov	r3, r1
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d16f      	bne.n	800a972 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3314      	adds	r3, #20
 800a896:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d15a      	bne.n	800a958 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d914      	bls.n	800a8d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	1ad2      	subs	r2, r2, r3
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f001 f8ac 	bl	800ba22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f001 fd7d 	bl	800c3d0 <USBD_LL_PrepareReceive>
 800a8d6:	e03f      	b.n	800a958 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d11c      	bne.n	800a91e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d316      	bcc.n	800a91e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d20f      	bcs.n	800a91e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8fe:	2200      	movs	r2, #0
 800a900:	2100      	movs	r1, #0
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f001 f88d 	bl	800ba22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a910:	2300      	movs	r3, #0
 800a912:	2200      	movs	r2, #0
 800a914:	2100      	movs	r1, #0
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f001 fd5a 	bl	800c3d0 <USBD_LL_PrepareReceive>
 800a91c:	e01c      	b.n	800a958 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b03      	cmp	r3, #3
 800a928:	d10f      	bne.n	800a94a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d009      	beq.n	800a94a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a94a:	2180      	movs	r1, #128	; 0x80
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f001 fc95 	bl	800c27c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f001 f8b7 	bl	800bac6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d03a      	beq.n	800a9d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7ff fe42 	bl	800a5ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a970:	e032      	b.n	800a9d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a972:	7afb      	ldrb	r3, [r7, #11]
 800a974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	4619      	mov	r1, r3
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f97f 	bl	800ac80 <USBD_CoreFindEP>
 800a982:	4603      	mov	r3, r0
 800a984:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	2bff      	cmp	r3, #255	; 0xff
 800a98a:	d025      	beq.n	800a9d8 <USBD_LL_DataInStage+0x15a>
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d122      	bne.n	800a9d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d11c      	bne.n	800a9d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a99e:	7dfa      	ldrb	r2, [r7, #23]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	32ae      	adds	r2, #174	; 0xae
 800a9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d014      	beq.n	800a9d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9ae:	7dfa      	ldrb	r2, [r7, #23]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9b6:	7dfa      	ldrb	r2, [r7, #23]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	32ae      	adds	r2, #174	; 0xae
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	7afa      	ldrb	r2, [r7, #11]
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9ce:	7dbb      	ldrb	r3, [r7, #22]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a9d4:	7dbb      	ldrb	r3, [r7, #22]
 800a9d6:	e000      	b.n	800a9da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d014      	beq.n	800aa48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00e      	beq.n	800aa48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	6852      	ldr	r2, [r2, #4]
 800aa36:	b2d2      	uxtb	r2, r2
 800aa38:	4611      	mov	r1, r2
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa48:	2340      	movs	r3, #64	; 0x40
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 fbcf 	bl	800c1f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2240      	movs	r2, #64	; 0x40
 800aa60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa64:	2340      	movs	r3, #64	; 0x40
 800aa66:	2200      	movs	r2, #0
 800aa68:	2180      	movs	r1, #128	; 0x80
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 fbc1 	bl	800c1f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2240      	movs	r2, #64	; 0x40
 800aa7a:	621a      	str	r2, [r3, #32]

  return ret;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b083      	sub	sp, #12
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2204      	movs	r2, #4
 800aac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d106      	bne.n	800aaf4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	d110      	bne.n	800ab38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	32ae      	adds	r2, #174	; 0xae
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e01c      	b.n	800ab9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d115      	bne.n	800ab9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	32ae      	adds	r2, #174	; 0xae
 800ab7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	32ae      	adds	r2, #174	; 0xae
 800ab8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	4611      	mov	r1, r2
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	460b      	mov	r3, r1
 800abb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	32ae      	adds	r2, #174	; 0xae
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e01c      	b.n	800ac02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d115      	bne.n	800ac00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	32ae      	adds	r2, #174	; 0xae
 800abde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00b      	beq.n	800ac00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	32ae      	adds	r2, #174	; 0xae
 800abf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	4611      	mov	r1, r2
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00e      	beq.n	800ac5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6852      	ldr	r2, [r2, #4]
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	4798      	blx	r3
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b086      	sub	sp, #24
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	885b      	ldrh	r3, [r3, #2]
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d920      	bls.n	800ad04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800acca:	e013      	b.n	800acf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800accc:	f107 030a 	add.w	r3, r7, #10
 800acd0:	4619      	mov	r1, r3
 800acd2:	6978      	ldr	r0, [r7, #20]
 800acd4:	f000 f81b 	bl	800ad0e <USBD_GetNextDesc>
 800acd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	785b      	ldrb	r3, [r3, #1]
 800acde:	2b05      	cmp	r3, #5
 800ace0:	d108      	bne.n	800acf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	789b      	ldrb	r3, [r3, #2]
 800acea:	78fa      	ldrb	r2, [r7, #3]
 800acec:	429a      	cmp	r2, r3
 800acee:	d008      	beq.n	800ad02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800acf0:	2300      	movs	r3, #0
 800acf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	885b      	ldrh	r3, [r3, #2]
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	897b      	ldrh	r3, [r7, #10]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d8e5      	bhi.n	800accc <USBD_GetEpDesc+0x32>
 800ad00:	e000      	b.n	800ad04 <USBD_GetEpDesc+0x6a>
          break;
 800ad02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad04:	693b      	ldr	r3, [r7, #16]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	881a      	ldrh	r2, [r3, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	4413      	add	r3, r2
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4413      	add	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad66:	8a3b      	ldrh	r3, [r7, #16]
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	b21a      	sxth	r2, r3
 800ad6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	b21b      	sxth	r3, r3
 800ad74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad76:	89fb      	ldrh	r3, [r7, #14]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d005      	beq.n	800adaa <USBD_StdDevReq+0x26>
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	d857      	bhi.n	800ae52 <USBD_StdDevReq+0xce>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00f      	beq.n	800adc6 <USBD_StdDevReq+0x42>
 800ada6:	2b20      	cmp	r3, #32
 800ada8:	d153      	bne.n	800ae52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	32ae      	adds	r2, #174	; 0xae
 800adb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]
      break;
 800adc4:	e04a      	b.n	800ae5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	785b      	ldrb	r3, [r3, #1]
 800adca:	2b09      	cmp	r3, #9
 800adcc:	d83b      	bhi.n	800ae46 <USBD_StdDevReq+0xc2>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <USBD_StdDevReq+0x50>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800ae29 	.word	0x0800ae29
 800add8:	0800ae3d 	.word	0x0800ae3d
 800addc:	0800ae47 	.word	0x0800ae47
 800ade0:	0800ae33 	.word	0x0800ae33
 800ade4:	0800ae47 	.word	0x0800ae47
 800ade8:	0800ae07 	.word	0x0800ae07
 800adec:	0800adfd 	.word	0x0800adfd
 800adf0:	0800ae47 	.word	0x0800ae47
 800adf4:	0800ae1f 	.word	0x0800ae1f
 800adf8:	0800ae11 	.word	0x0800ae11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fa3c 	bl	800b27c <USBD_GetDescriptor>
          break;
 800ae04:	e024      	b.n	800ae50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fba1 	bl	800b550 <USBD_SetAddress>
          break;
 800ae0e:	e01f      	b.n	800ae50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fbe0 	bl	800b5d8 <USBD_SetConfig>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]
          break;
 800ae1c:	e018      	b.n	800ae50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fc83 	bl	800b72c <USBD_GetConfig>
          break;
 800ae26:	e013      	b.n	800ae50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fcb4 	bl	800b798 <USBD_GetStatus>
          break;
 800ae30:	e00e      	b.n	800ae50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fce3 	bl	800b800 <USBD_SetFeature>
          break;
 800ae3a:	e009      	b.n	800ae50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fd07 	bl	800b852 <USBD_ClrFeature>
          break;
 800ae44:	e004      	b.n	800ae50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fd5e 	bl	800b90a <USBD_CtlError>
          break;
 800ae4e:	bf00      	nop
      }
      break;
 800ae50:	e004      	b.n	800ae5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fd58 	bl	800b90a <USBD_CtlError>
      break;
 800ae5a:	bf00      	nop
  }

  return ret;
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop

0800ae68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae7e:	2b40      	cmp	r3, #64	; 0x40
 800ae80:	d005      	beq.n	800ae8e <USBD_StdItfReq+0x26>
 800ae82:	2b40      	cmp	r3, #64	; 0x40
 800ae84:	d852      	bhi.n	800af2c <USBD_StdItfReq+0xc4>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <USBD_StdItfReq+0x26>
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d14e      	bne.n	800af2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	3b01      	subs	r3, #1
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d840      	bhi.n	800af1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	889b      	ldrh	r3, [r3, #4]
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d836      	bhi.n	800af14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	889b      	ldrh	r3, [r3, #4]
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fed9 	bl	800ac66 <USBD_CoreFindIF>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	2bff      	cmp	r3, #255	; 0xff
 800aebc:	d01d      	beq.n	800aefa <USBD_StdItfReq+0x92>
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d11a      	bne.n	800aefa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aec4:	7bba      	ldrb	r2, [r7, #14]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	32ae      	adds	r2, #174	; 0xae
 800aeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00f      	beq.n	800aef4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aed4:	7bba      	ldrb	r2, [r7, #14]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aedc:	7bba      	ldrb	r2, [r7, #14]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32ae      	adds	r2, #174	; 0xae
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	4798      	blx	r3
 800aeee:	4603      	mov	r3, r0
 800aef0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aef2:	e004      	b.n	800aefe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aef4:	2303      	movs	r3, #3
 800aef6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aef8:	e001      	b.n	800aefe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aefa:	2303      	movs	r3, #3
 800aefc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	88db      	ldrh	r3, [r3, #6]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d110      	bne.n	800af28 <USBD_StdItfReq+0xc0>
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10d      	bne.n	800af28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fdc7 	bl	800baa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af12:	e009      	b.n	800af28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fcf7 	bl	800b90a <USBD_CtlError>
          break;
 800af1c:	e004      	b.n	800af28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fcf2 	bl	800b90a <USBD_CtlError>
          break;
 800af26:	e000      	b.n	800af2a <USBD_StdItfReq+0xc2>
          break;
 800af28:	bf00      	nop
      }
      break;
 800af2a:	e004      	b.n	800af36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fceb 	bl	800b90a <USBD_CtlError>
      break;
 800af34:	bf00      	nop
  }

  return ret;
 800af36:	7bfb      	ldrb	r3, [r7, #15]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	889b      	ldrh	r3, [r3, #4]
 800af52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af5c:	2b40      	cmp	r3, #64	; 0x40
 800af5e:	d007      	beq.n	800af70 <USBD_StdEPReq+0x30>
 800af60:	2b40      	cmp	r3, #64	; 0x40
 800af62:	f200 817f 	bhi.w	800b264 <USBD_StdEPReq+0x324>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d02a      	beq.n	800afc0 <USBD_StdEPReq+0x80>
 800af6a:	2b20      	cmp	r3, #32
 800af6c:	f040 817a 	bne.w	800b264 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff fe83 	bl	800ac80 <USBD_CoreFindEP>
 800af7a:	4603      	mov	r3, r0
 800af7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af7e:	7b7b      	ldrb	r3, [r7, #13]
 800af80:	2bff      	cmp	r3, #255	; 0xff
 800af82:	f000 8174 	beq.w	800b26e <USBD_StdEPReq+0x32e>
 800af86:	7b7b      	ldrb	r3, [r7, #13]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f040 8170 	bne.w	800b26e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af8e:	7b7a      	ldrb	r2, [r7, #13]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af96:	7b7a      	ldrb	r2, [r7, #13]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	32ae      	adds	r2, #174	; 0xae
 800af9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 8163 	beq.w	800b26e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afa8:	7b7a      	ldrb	r2, [r7, #13]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	32ae      	adds	r2, #174	; 0xae
 800afae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	4798      	blx	r3
 800afba:	4603      	mov	r3, r0
 800afbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afbe:	e156      	b.n	800b26e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	785b      	ldrb	r3, [r3, #1]
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d008      	beq.n	800afda <USBD_StdEPReq+0x9a>
 800afc8:	2b03      	cmp	r3, #3
 800afca:	f300 8145 	bgt.w	800b258 <USBD_StdEPReq+0x318>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 809b 	beq.w	800b10a <USBD_StdEPReq+0x1ca>
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d03c      	beq.n	800b052 <USBD_StdEPReq+0x112>
 800afd8:	e13e      	b.n	800b258 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d002      	beq.n	800afec <USBD_StdEPReq+0xac>
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d016      	beq.n	800b018 <USBD_StdEPReq+0xd8>
 800afea:	e02c      	b.n	800b046 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00d      	beq.n	800b00e <USBD_StdEPReq+0xce>
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	2b80      	cmp	r3, #128	; 0x80
 800aff6:	d00a      	beq.n	800b00e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f001 f93d 	bl	800c27c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b002:	2180      	movs	r1, #128	; 0x80
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 f939 	bl	800c27c <USBD_LL_StallEP>
 800b00a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b00c:	e020      	b.n	800b050 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fc7a 	bl	800b90a <USBD_CtlError>
              break;
 800b016:	e01b      	b.n	800b050 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	885b      	ldrh	r3, [r3, #2]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10e      	bne.n	800b03e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00b      	beq.n	800b03e <USBD_StdEPReq+0xfe>
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	2b80      	cmp	r3, #128	; 0x80
 800b02a:	d008      	beq.n	800b03e <USBD_StdEPReq+0xfe>
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	88db      	ldrh	r3, [r3, #6]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 f91f 	bl	800c27c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fd2e 	bl	800baa0 <USBD_CtlSendStatus>

              break;
 800b044:	e004      	b.n	800b050 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc5e 	bl	800b90a <USBD_CtlError>
              break;
 800b04e:	bf00      	nop
          }
          break;
 800b050:	e107      	b.n	800b262 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d002      	beq.n	800b064 <USBD_StdEPReq+0x124>
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d016      	beq.n	800b090 <USBD_StdEPReq+0x150>
 800b062:	e04b      	b.n	800b0fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b064:	7bbb      	ldrb	r3, [r7, #14]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00d      	beq.n	800b086 <USBD_StdEPReq+0x146>
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	2b80      	cmp	r3, #128	; 0x80
 800b06e:	d00a      	beq.n	800b086 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 f901 	bl	800c27c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b07a:	2180      	movs	r1, #128	; 0x80
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 f8fd 	bl	800c27c <USBD_LL_StallEP>
 800b082:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b084:	e040      	b.n	800b108 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fc3e 	bl	800b90a <USBD_CtlError>
              break;
 800b08e:	e03b      	b.n	800b108 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	885b      	ldrh	r3, [r3, #2]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d136      	bne.n	800b106 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d004      	beq.n	800b0ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f001 f907 	bl	800c2ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fcf7 	bl	800baa0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff fde2 	bl	800ac80 <USBD_CoreFindEP>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0c0:	7b7b      	ldrb	r3, [r7, #13]
 800b0c2:	2bff      	cmp	r3, #255	; 0xff
 800b0c4:	d01f      	beq.n	800b106 <USBD_StdEPReq+0x1c6>
 800b0c6:	7b7b      	ldrb	r3, [r7, #13]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d11c      	bne.n	800b106 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0cc:	7b7a      	ldrb	r2, [r7, #13]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0d4:	7b7a      	ldrb	r2, [r7, #13]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	32ae      	adds	r2, #174	; 0xae
 800b0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d010      	beq.n	800b106 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0e4:	7b7a      	ldrb	r2, [r7, #13]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32ae      	adds	r2, #174	; 0xae
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	4798      	blx	r3
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0fa:	e004      	b.n	800b106 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fc03 	bl	800b90a <USBD_CtlError>
              break;
 800b104:	e000      	b.n	800b108 <USBD_StdEPReq+0x1c8>
              break;
 800b106:	bf00      	nop
          }
          break;
 800b108:	e0ab      	b.n	800b262 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b02      	cmp	r3, #2
 800b114:	d002      	beq.n	800b11c <USBD_StdEPReq+0x1dc>
 800b116:	2b03      	cmp	r3, #3
 800b118:	d032      	beq.n	800b180 <USBD_StdEPReq+0x240>
 800b11a:	e097      	b.n	800b24c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d007      	beq.n	800b132 <USBD_StdEPReq+0x1f2>
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	2b80      	cmp	r3, #128	; 0x80
 800b126:	d004      	beq.n	800b132 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fbed 	bl	800b90a <USBD_CtlError>
                break;
 800b130:	e091      	b.n	800b256 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b136:	2b00      	cmp	r3, #0
 800b138:	da0b      	bge.n	800b152 <USBD_StdEPReq+0x212>
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b140:	4613      	mov	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	3310      	adds	r3, #16
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	4413      	add	r3, r2
 800b14e:	3304      	adds	r3, #4
 800b150:	e00b      	b.n	800b16a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	4413      	add	r3, r2
 800b168:	3304      	adds	r3, #4
 800b16a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2202      	movs	r2, #2
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fc37 	bl	800b9ec <USBD_CtlSendData>
              break;
 800b17e:	e06a      	b.n	800b256 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b184:	2b00      	cmp	r3, #0
 800b186:	da11      	bge.n	800b1ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	f003 020f 	and.w	r2, r3, #15
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	440b      	add	r3, r1
 800b19a:	3324      	adds	r3, #36	; 0x24
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d117      	bne.n	800b1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fbb0 	bl	800b90a <USBD_CtlError>
                  break;
 800b1aa:	e054      	b.n	800b256 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	f003 020f 	and.w	r2, r3, #15
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	440b      	add	r3, r1
 800b1be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d104      	bne.n	800b1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fb9d 	bl	800b90a <USBD_CtlError>
                  break;
 800b1d0:	e041      	b.n	800b256 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da0b      	bge.n	800b1f2 <USBD_StdEPReq+0x2b2>
 800b1da:	7bbb      	ldrb	r3, [r7, #14]
 800b1dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	3310      	adds	r3, #16
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	e00b      	b.n	800b20a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	4413      	add	r3, r2
 800b208:	3304      	adds	r3, #4
 800b20a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <USBD_StdEPReq+0x2d8>
 800b212:	7bbb      	ldrb	r3, [r7, #14]
 800b214:	2b80      	cmp	r3, #128	; 0x80
 800b216:	d103      	bne.n	800b220 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
 800b21e:	e00e      	b.n	800b23e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f001 f867 	bl	800c2f8 <USBD_LL_IsStallEP>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2201      	movs	r2, #1
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	e002      	b.n	800b23e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2202      	movs	r2, #2
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fbd1 	bl	800b9ec <USBD_CtlSendData>
              break;
 800b24a:	e004      	b.n	800b256 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fb5b 	bl	800b90a <USBD_CtlError>
              break;
 800b254:	bf00      	nop
          }
          break;
 800b256:	e004      	b.n	800b262 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fb55 	bl	800b90a <USBD_CtlError>
          break;
 800b260:	bf00      	nop
      }
      break;
 800b262:	e005      	b.n	800b270 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fb4f 	bl	800b90a <USBD_CtlError>
      break;
 800b26c:	e000      	b.n	800b270 <USBD_StdEPReq+0x330>
      break;
 800b26e:	bf00      	nop
  }

  return ret;
 800b270:	7bfb      	ldrb	r3, [r7, #15]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b286:	2300      	movs	r3, #0
 800b288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	885b      	ldrh	r3, [r3, #2]
 800b296:	0a1b      	lsrs	r3, r3, #8
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	2b06      	cmp	r3, #6
 800b29e:	f200 8128 	bhi.w	800b4f2 <USBD_GetDescriptor+0x276>
 800b2a2:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <USBD_GetDescriptor+0x2c>)
 800b2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a8:	0800b2c5 	.word	0x0800b2c5
 800b2ac:	0800b2dd 	.word	0x0800b2dd
 800b2b0:	0800b31d 	.word	0x0800b31d
 800b2b4:	0800b4f3 	.word	0x0800b4f3
 800b2b8:	0800b4f3 	.word	0x0800b4f3
 800b2bc:	0800b493 	.word	0x0800b493
 800b2c0:	0800b4bf 	.word	0x0800b4bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	7c12      	ldrb	r2, [r2, #16]
 800b2d0:	f107 0108 	add.w	r1, r7, #8
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	4798      	blx	r3
 800b2d8:	60f8      	str	r0, [r7, #12]
      break;
 800b2da:	e112      	b.n	800b502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	7c1b      	ldrb	r3, [r3, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10d      	bne.n	800b300 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ec:	f107 0208 	add.w	r2, r7, #8
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4798      	blx	r3
 800b2f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2fe:	e100      	b.n	800b502 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	f107 0208 	add.w	r2, r7, #8
 800b30c:	4610      	mov	r0, r2
 800b30e:	4798      	blx	r3
 800b310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3301      	adds	r3, #1
 800b316:	2202      	movs	r2, #2
 800b318:	701a      	strb	r2, [r3, #0]
      break;
 800b31a:	e0f2      	b.n	800b502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	885b      	ldrh	r3, [r3, #2]
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b05      	cmp	r3, #5
 800b324:	f200 80ac 	bhi.w	800b480 <USBD_GetDescriptor+0x204>
 800b328:	a201      	add	r2, pc, #4	; (adr r2, 800b330 <USBD_GetDescriptor+0xb4>)
 800b32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32e:	bf00      	nop
 800b330:	0800b349 	.word	0x0800b349
 800b334:	0800b37d 	.word	0x0800b37d
 800b338:	0800b3b1 	.word	0x0800b3b1
 800b33c:	0800b3e5 	.word	0x0800b3e5
 800b340:	0800b419 	.word	0x0800b419
 800b344:	0800b44d 	.word	0x0800b44d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00b      	beq.n	800b36c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	7c12      	ldrb	r2, [r2, #16]
 800b360:	f107 0108 	add.w	r1, r7, #8
 800b364:	4610      	mov	r0, r2
 800b366:	4798      	blx	r3
 800b368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b36a:	e091      	b.n	800b490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 facb 	bl	800b90a <USBD_CtlError>
            err++;
 800b374:	7afb      	ldrb	r3, [r7, #11]
 800b376:	3301      	adds	r3, #1
 800b378:	72fb      	strb	r3, [r7, #11]
          break;
 800b37a:	e089      	b.n	800b490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00b      	beq.n	800b3a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	7c12      	ldrb	r2, [r2, #16]
 800b394:	f107 0108 	add.w	r1, r7, #8
 800b398:	4610      	mov	r0, r2
 800b39a:	4798      	blx	r3
 800b39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b39e:	e077      	b.n	800b490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fab1 	bl	800b90a <USBD_CtlError>
            err++;
 800b3a8:	7afb      	ldrb	r3, [r7, #11]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ae:	e06f      	b.n	800b490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00b      	beq.n	800b3d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	7c12      	ldrb	r2, [r2, #16]
 800b3c8:	f107 0108 	add.w	r1, r7, #8
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	4798      	blx	r3
 800b3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3d2:	e05d      	b.n	800b490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa97 	bl	800b90a <USBD_CtlError>
            err++;
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3e2:	e055      	b.n	800b490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	7c12      	ldrb	r2, [r2, #16]
 800b3fc:	f107 0108 	add.w	r1, r7, #8
 800b400:	4610      	mov	r0, r2
 800b402:	4798      	blx	r3
 800b404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b406:	e043      	b.n	800b490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fa7d 	bl	800b90a <USBD_CtlError>
            err++;
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	3301      	adds	r3, #1
 800b414:	72fb      	strb	r3, [r7, #11]
          break;
 800b416:	e03b      	b.n	800b490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00b      	beq.n	800b43c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	7c12      	ldrb	r2, [r2, #16]
 800b430:	f107 0108 	add.w	r1, r7, #8
 800b434:	4610      	mov	r0, r2
 800b436:	4798      	blx	r3
 800b438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b43a:	e029      	b.n	800b490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fa63 	bl	800b90a <USBD_CtlError>
            err++;
 800b444:	7afb      	ldrb	r3, [r7, #11]
 800b446:	3301      	adds	r3, #1
 800b448:	72fb      	strb	r3, [r7, #11]
          break;
 800b44a:	e021      	b.n	800b490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00b      	beq.n	800b470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	7c12      	ldrb	r2, [r2, #16]
 800b464:	f107 0108 	add.w	r1, r7, #8
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
 800b46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46e:	e00f      	b.n	800b490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa49 	bl	800b90a <USBD_CtlError>
            err++;
 800b478:	7afb      	ldrb	r3, [r7, #11]
 800b47a:	3301      	adds	r3, #1
 800b47c:	72fb      	strb	r3, [r7, #11]
          break;
 800b47e:	e007      	b.n	800b490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fa41 	bl	800b90a <USBD_CtlError>
          err++;
 800b488:	7afb      	ldrb	r3, [r7, #11]
 800b48a:	3301      	adds	r3, #1
 800b48c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b48e:	bf00      	nop
      }
      break;
 800b490:	e037      	b.n	800b502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	7c1b      	ldrb	r3, [r3, #16]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a2:	f107 0208 	add.w	r2, r7, #8
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	4798      	blx	r3
 800b4aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4ac:	e029      	b.n	800b502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fa2a 	bl	800b90a <USBD_CtlError>
        err++;
 800b4b6:	7afb      	ldrb	r3, [r7, #11]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b4bc:	e021      	b.n	800b502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7c1b      	ldrb	r3, [r3, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10d      	bne.n	800b4e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	f107 0208 	add.w	r2, r7, #8
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	4798      	blx	r3
 800b4d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	2207      	movs	r2, #7
 800b4de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4e0:	e00f      	b.n	800b502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fa10 	bl	800b90a <USBD_CtlError>
        err++;
 800b4ea:	7afb      	ldrb	r3, [r7, #11]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b4f0:	e007      	b.n	800b502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fa08 	bl	800b90a <USBD_CtlError>
      err++;
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b500:	bf00      	nop
  }

  if (err != 0U)
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d11e      	bne.n	800b546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	88db      	ldrh	r3, [r3, #6]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d016      	beq.n	800b53e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b510:	893b      	ldrh	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00e      	beq.n	800b534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	88da      	ldrh	r2, [r3, #6]
 800b51a:	893b      	ldrh	r3, [r7, #8]
 800b51c:	4293      	cmp	r3, r2
 800b51e:	bf28      	it	cs
 800b520:	4613      	movcs	r3, r2
 800b522:	b29b      	uxth	r3, r3
 800b524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b526:	893b      	ldrh	r3, [r7, #8]
 800b528:	461a      	mov	r2, r3
 800b52a:	68f9      	ldr	r1, [r7, #12]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fa5d 	bl	800b9ec <USBD_CtlSendData>
 800b532:	e009      	b.n	800b548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f9e7 	bl	800b90a <USBD_CtlError>
 800b53c:	e004      	b.n	800b548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 faae 	bl	800baa0 <USBD_CtlSendStatus>
 800b544:	e000      	b.n	800b548 <USBD_GetDescriptor+0x2cc>
    return;
 800b546:	bf00      	nop
  }
}
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop

0800b550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	889b      	ldrh	r3, [r3, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d131      	bne.n	800b5c6 <USBD_SetAddress+0x76>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	88db      	ldrh	r3, [r3, #6]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d12d      	bne.n	800b5c6 <USBD_SetAddress+0x76>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	885b      	ldrh	r3, [r3, #2]
 800b56e:	2b7f      	cmp	r3, #127	; 0x7f
 800b570:	d829      	bhi.n	800b5c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b57c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b03      	cmp	r3, #3
 800b588:	d104      	bne.n	800b594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f9bc 	bl	800b90a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b592:	e01d      	b.n	800b5d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	7bfa      	ldrb	r2, [r7, #15]
 800b598:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fed5 	bl	800c350 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa7a 	bl	800baa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d004      	beq.n	800b5bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ba:	e009      	b.n	800b5d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c4:	e004      	b.n	800b5d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f99e 	bl	800b90a <USBD_CtlError>
  }
}
 800b5ce:	bf00      	nop
 800b5d0:	bf00      	nop
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	885b      	ldrh	r3, [r3, #2]
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	4b4e      	ldr	r3, [pc, #312]	; (800b728 <USBD_SetConfig+0x150>)
 800b5ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5f0:	4b4d      	ldr	r3, [pc, #308]	; (800b728 <USBD_SetConfig+0x150>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d905      	bls.n	800b604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f985 	bl	800b90a <USBD_CtlError>
    return USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	e08c      	b.n	800b71e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d002      	beq.n	800b616 <USBD_SetConfig+0x3e>
 800b610:	2b03      	cmp	r3, #3
 800b612:	d029      	beq.n	800b668 <USBD_SetConfig+0x90>
 800b614:	e075      	b.n	800b702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b616:	4b44      	ldr	r3, [pc, #272]	; (800b728 <USBD_SetConfig+0x150>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d020      	beq.n	800b660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b61e:	4b42      	ldr	r3, [pc, #264]	; (800b728 <USBD_SetConfig+0x150>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b628:	4b3f      	ldr	r3, [pc, #252]	; (800b728 <USBD_SetConfig+0x150>)
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7fe ffe7 	bl	800a602 <USBD_SetClassConfig>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d008      	beq.n	800b650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f962 	bl	800b90a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2202      	movs	r2, #2
 800b64a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b64e:	e065      	b.n	800b71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fa25 	bl	800baa0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2203      	movs	r2, #3
 800b65a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b65e:	e05d      	b.n	800b71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fa1d 	bl	800baa0 <USBD_CtlSendStatus>
      break;
 800b666:	e059      	b.n	800b71c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b668:	4b2f      	ldr	r3, [pc, #188]	; (800b728 <USBD_SetConfig+0x150>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d112      	bne.n	800b696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2202      	movs	r2, #2
 800b674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b678:	4b2b      	ldr	r3, [pc, #172]	; (800b728 <USBD_SetConfig+0x150>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b682:	4b29      	ldr	r3, [pc, #164]	; (800b728 <USBD_SetConfig+0x150>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7fe ffd6 	bl	800a63a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa06 	bl	800baa0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b694:	e042      	b.n	800b71c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b696:	4b24      	ldr	r3, [pc, #144]	; (800b728 <USBD_SetConfig+0x150>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d02a      	beq.n	800b6fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f7fe ffc4 	bl	800a63a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6b2:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <USBD_SetConfig+0x150>)
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6bc:	4b1a      	ldr	r3, [pc, #104]	; (800b728 <USBD_SetConfig+0x150>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7fe ff9d 	bl	800a602 <USBD_SetClassConfig>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00f      	beq.n	800b6f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f918 	bl	800b90a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7fe ffa9 	bl	800a63a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6f0:	e014      	b.n	800b71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f9d4 	bl	800baa0 <USBD_CtlSendStatus>
      break;
 800b6f8:	e010      	b.n	800b71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f9d0 	bl	800baa0 <USBD_CtlSendStatus>
      break;
 800b700:	e00c      	b.n	800b71c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f900 	bl	800b90a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b70a:	4b07      	ldr	r3, [pc, #28]	; (800b728 <USBD_SetConfig+0x150>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7fe ff92 	bl	800a63a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b716:	2303      	movs	r3, #3
 800b718:	73fb      	strb	r3, [r7, #15]
      break;
 800b71a:	bf00      	nop
  }

  return ret;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20002f14 	.word	0x20002f14

0800b72c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	88db      	ldrh	r3, [r3, #6]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d004      	beq.n	800b748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f8e2 	bl	800b90a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b746:	e023      	b.n	800b790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b02      	cmp	r3, #2
 800b752:	dc02      	bgt.n	800b75a <USBD_GetConfig+0x2e>
 800b754:	2b00      	cmp	r3, #0
 800b756:	dc03      	bgt.n	800b760 <USBD_GetConfig+0x34>
 800b758:	e015      	b.n	800b786 <USBD_GetConfig+0x5a>
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d00b      	beq.n	800b776 <USBD_GetConfig+0x4a>
 800b75e:	e012      	b.n	800b786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3308      	adds	r3, #8
 800b76a:	2201      	movs	r2, #1
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f93c 	bl	800b9ec <USBD_CtlSendData>
        break;
 800b774:	e00c      	b.n	800b790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3304      	adds	r3, #4
 800b77a:	2201      	movs	r2, #1
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f934 	bl	800b9ec <USBD_CtlSendData>
        break;
 800b784:	e004      	b.n	800b790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b786:	6839      	ldr	r1, [r7, #0]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f8be 	bl	800b90a <USBD_CtlError>
        break;
 800b78e:	bf00      	nop
}
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d81e      	bhi.n	800b7ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	88db      	ldrh	r3, [r3, #6]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d004      	beq.n	800b7c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f8a5 	bl	800b90a <USBD_CtlError>
        break;
 800b7c0:	e01a      	b.n	800b7f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d005      	beq.n	800b7de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	f043 0202 	orr.w	r2, r3, #2
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f900 	bl	800b9ec <USBD_CtlSendData>
      break;
 800b7ec:	e004      	b.n	800b7f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f88a 	bl	800b90a <USBD_CtlError>
      break;
 800b7f6:	bf00      	nop
  }
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	885b      	ldrh	r3, [r3, #2]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d107      	bne.n	800b822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f940 	bl	800baa0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b820:	e013      	b.n	800b84a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	885b      	ldrh	r3, [r3, #2]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d10b      	bne.n	800b842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	889b      	ldrh	r3, [r3, #4]
 800b82e:	0a1b      	lsrs	r3, r3, #8
 800b830:	b29b      	uxth	r3, r3
 800b832:	b2da      	uxtb	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f930 	bl	800baa0 <USBD_CtlSendStatus>
}
 800b840:	e003      	b.n	800b84a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f860 	bl	800b90a <USBD_CtlError>
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b082      	sub	sp, #8
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b862:	b2db      	uxtb	r3, r3
 800b864:	3b01      	subs	r3, #1
 800b866:	2b02      	cmp	r3, #2
 800b868:	d80b      	bhi.n	800b882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	885b      	ldrh	r3, [r3, #2]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d10c      	bne.n	800b88c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f910 	bl	800baa0 <USBD_CtlSendStatus>
      }
      break;
 800b880:	e004      	b.n	800b88c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f840 	bl	800b90a <USBD_CtlError>
      break;
 800b88a:	e000      	b.n	800b88e <USBD_ClrFeature+0x3c>
      break;
 800b88c:	bf00      	nop
  }
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	781a      	ldrb	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff fa41 	bl	800ad48 <SWAPBYTE>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7ff fa34 	bl	800ad48 <SWAPBYTE>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff fa27 	bl	800ad48 <SWAPBYTE>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	80da      	strh	r2, [r3, #6]
}
 800b902:	bf00      	nop
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b914:	2180      	movs	r1, #128	; 0x80
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fcb0 	bl	800c27c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b91c:	2100      	movs	r1, #0
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fcac 	bl	800c27c <USBD_LL_StallEP>
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d036      	beq.n	800b9b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b946:	6938      	ldr	r0, [r7, #16]
 800b948:	f000 f836 	bl	800b9b8 <USBD_GetLen>
 800b94c:	4603      	mov	r3, r0
 800b94e:	3301      	adds	r3, #1
 800b950:	b29b      	uxth	r3, r3
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	b29a      	uxth	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	4413      	add	r3, r2
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	701a      	strb	r2, [r3, #0]
  idx++;
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	3301      	adds	r3, #1
 800b96a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	4413      	add	r3, r2
 800b972:	2203      	movs	r2, #3
 800b974:	701a      	strb	r2, [r3, #0]
  idx++;
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	3301      	adds	r3, #1
 800b97a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b97c:	e013      	b.n	800b9a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	4413      	add	r3, r2
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	7812      	ldrb	r2, [r2, #0]
 800b988:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	3301      	adds	r3, #1
 800b98e:	613b      	str	r3, [r7, #16]
    idx++;
 800b990:	7dfb      	ldrb	r3, [r7, #23]
 800b992:	3301      	adds	r3, #1
 800b994:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	4413      	add	r3, r2
 800b99c:	2200      	movs	r2, #0
 800b99e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1e7      	bne.n	800b97e <USBD_GetString+0x52>
 800b9ae:	e000      	b.n	800b9b2 <USBD_GetString+0x86>
    return;
 800b9b0:	bf00      	nop
  }
}
 800b9b2:	3718      	adds	r7, #24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9c8:	e005      	b.n	800b9d6 <USBD_GetLen+0x1e>
  {
    len++;
 800b9ca:	7bfb      	ldrb	r3, [r7, #15]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1f5      	bne.n	800b9ca <USBD_GetLen+0x12>
  }

  return len;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	2100      	movs	r1, #0
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 fcbb 	bl	800c38e <USBD_LL_Transmit>

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	2100      	movs	r1, #0
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fcaa 	bl	800c38e <USBD_LL_Transmit>

  return USBD_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2203      	movs	r2, #3
 800ba54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 fcae 	bl	800c3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	2100      	movs	r1, #0
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fc9d 	bl	800c3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2204      	movs	r2, #4
 800baac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bab0:	2300      	movs	r3, #0
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fc69 	bl	800c38e <USBD_LL_Transmit>

  return USBD_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b082      	sub	sp, #8
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2205      	movs	r2, #5
 800bad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bad6:	2300      	movs	r3, #0
 800bad8:	2200      	movs	r2, #0
 800bada:	2100      	movs	r1, #0
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fc77 	bl	800c3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baf0:	2200      	movs	r2, #0
 800baf2:	4912      	ldr	r1, [pc, #72]	; (800bb3c <MX_USB_DEVICE_Init+0x50>)
 800baf4:	4812      	ldr	r0, [pc, #72]	; (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800baf6:	f7fe fd07 	bl	800a508 <USBD_Init>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb00:	f7f5 fbee 	bl	80012e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb04:	490f      	ldr	r1, [pc, #60]	; (800bb44 <MX_USB_DEVICE_Init+0x58>)
 800bb06:	480e      	ldr	r0, [pc, #56]	; (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800bb08:	f7fe fd2e 	bl	800a568 <USBD_RegisterClass>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb12:	f7f5 fbe5 	bl	80012e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb16:	490c      	ldr	r1, [pc, #48]	; (800bb48 <MX_USB_DEVICE_Init+0x5c>)
 800bb18:	4809      	ldr	r0, [pc, #36]	; (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800bb1a:	f7fe fc65 	bl	800a3e8 <USBD_CDC_RegisterInterface>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb24:	f7f5 fbdc 	bl	80012e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb28:	4805      	ldr	r0, [pc, #20]	; (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800bb2a:	f7fe fd53 	bl	800a5d4 <USBD_Start>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb34:	f7f5 fbd4 	bl	80012e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb38:	bf00      	nop
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	200000ac 	.word	0x200000ac
 800bb40:	20002f18 	.word	0x20002f18
 800bb44:	20000018 	.word	0x20000018
 800bb48:	20000098 	.word	0x20000098

0800bb4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb50:	2200      	movs	r2, #0
 800bb52:	4905      	ldr	r1, [pc, #20]	; (800bb68 <CDC_Init_FS+0x1c>)
 800bb54:	4805      	ldr	r0, [pc, #20]	; (800bb6c <CDC_Init_FS+0x20>)
 800bb56:	f7fe fc61 	bl	800a41c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb5a:	4905      	ldr	r1, [pc, #20]	; (800bb70 <CDC_Init_FS+0x24>)
 800bb5c:	4803      	ldr	r0, [pc, #12]	; (800bb6c <CDC_Init_FS+0x20>)
 800bb5e:	f7fe fc7f 	bl	800a460 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	200039f4 	.word	0x200039f4
 800bb6c:	20002f18 	.word	0x20002f18
 800bb70:	200031f4 	.word	0x200031f4

0800bb74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb74:	b480      	push	{r7}
 800bb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	71fb      	strb	r3, [r7, #7]
 800bb90:	4613      	mov	r3, r2
 800bb92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	2b23      	cmp	r3, #35	; 0x23
 800bb98:	d84a      	bhi.n	800bc30 <CDC_Control_FS+0xac>
 800bb9a:	a201      	add	r2, pc, #4	; (adr r2, 800bba0 <CDC_Control_FS+0x1c>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bc31 	.word	0x0800bc31
 800bba4:	0800bc31 	.word	0x0800bc31
 800bba8:	0800bc31 	.word	0x0800bc31
 800bbac:	0800bc31 	.word	0x0800bc31
 800bbb0:	0800bc31 	.word	0x0800bc31
 800bbb4:	0800bc31 	.word	0x0800bc31
 800bbb8:	0800bc31 	.word	0x0800bc31
 800bbbc:	0800bc31 	.word	0x0800bc31
 800bbc0:	0800bc31 	.word	0x0800bc31
 800bbc4:	0800bc31 	.word	0x0800bc31
 800bbc8:	0800bc31 	.word	0x0800bc31
 800bbcc:	0800bc31 	.word	0x0800bc31
 800bbd0:	0800bc31 	.word	0x0800bc31
 800bbd4:	0800bc31 	.word	0x0800bc31
 800bbd8:	0800bc31 	.word	0x0800bc31
 800bbdc:	0800bc31 	.word	0x0800bc31
 800bbe0:	0800bc31 	.word	0x0800bc31
 800bbe4:	0800bc31 	.word	0x0800bc31
 800bbe8:	0800bc31 	.word	0x0800bc31
 800bbec:	0800bc31 	.word	0x0800bc31
 800bbf0:	0800bc31 	.word	0x0800bc31
 800bbf4:	0800bc31 	.word	0x0800bc31
 800bbf8:	0800bc31 	.word	0x0800bc31
 800bbfc:	0800bc31 	.word	0x0800bc31
 800bc00:	0800bc31 	.word	0x0800bc31
 800bc04:	0800bc31 	.word	0x0800bc31
 800bc08:	0800bc31 	.word	0x0800bc31
 800bc0c:	0800bc31 	.word	0x0800bc31
 800bc10:	0800bc31 	.word	0x0800bc31
 800bc14:	0800bc31 	.word	0x0800bc31
 800bc18:	0800bc31 	.word	0x0800bc31
 800bc1c:	0800bc31 	.word	0x0800bc31
 800bc20:	0800bc31 	.word	0x0800bc31
 800bc24:	0800bc31 	.word	0x0800bc31
 800bc28:	0800bc31 	.word	0x0800bc31
 800bc2c:	0800bc31 	.word	0x0800bc31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc30:	bf00      	nop
  }

  return (USBD_OK);
 800bc32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	4805      	ldr	r0, [pc, #20]	; (800bc64 <CDC_Receive_FS+0x24>)
 800bc4e:	f7fe fc07 	bl	800a460 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc52:	4804      	ldr	r0, [pc, #16]	; (800bc64 <CDC_Receive_FS+0x24>)
 800bc54:	f7fe fc22 	bl	800a49c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20002f18 	.word	0x20002f18

0800bc68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	4613      	mov	r3, r2
 800bc74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	371c      	adds	r7, #28
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
	...

0800bc8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2212      	movs	r2, #18
 800bc9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc9e:	4b03      	ldr	r3, [pc, #12]	; (800bcac <USBD_FS_DeviceDescriptor+0x20>)
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	200000c8 	.word	0x200000c8

0800bcb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	6039      	str	r1, [r7, #0]
 800bcba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2204      	movs	r2, #4
 800bcc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcc2:	4b03      	ldr	r3, [pc, #12]	; (800bcd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	200000dc 	.word	0x200000dc

0800bcd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	6039      	str	r1, [r7, #0]
 800bcde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d105      	bne.n	800bcf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	4907      	ldr	r1, [pc, #28]	; (800bd08 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcea:	4808      	ldr	r0, [pc, #32]	; (800bd0c <USBD_FS_ProductStrDescriptor+0x38>)
 800bcec:	f7ff fe1e 	bl	800b92c <USBD_GetString>
 800bcf0:	e004      	b.n	800bcfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	4904      	ldr	r1, [pc, #16]	; (800bd08 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcf6:	4805      	ldr	r0, [pc, #20]	; (800bd0c <USBD_FS_ProductStrDescriptor+0x38>)
 800bcf8:	f7ff fe18 	bl	800b92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcfc:	4b02      	ldr	r3, [pc, #8]	; (800bd08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	200041f4 	.word	0x200041f4
 800bd0c:	0801000c 	.word	0x0801000c

0800bd10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	6039      	str	r1, [r7, #0]
 800bd1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	4904      	ldr	r1, [pc, #16]	; (800bd30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd20:	4804      	ldr	r0, [pc, #16]	; (800bd34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd22:	f7ff fe03 	bl	800b92c <USBD_GetString>
  return USBD_StrDesc;
 800bd26:	4b02      	ldr	r3, [pc, #8]	; (800bd30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	200041f4 	.word	0x200041f4
 800bd34:	08010024 	.word	0x08010024

0800bd38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	6039      	str	r1, [r7, #0]
 800bd42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	221a      	movs	r2, #26
 800bd48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd4a:	f000 f843 	bl	800bdd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd4e:	4b02      	ldr	r3, [pc, #8]	; (800bd58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	200000e0 	.word	0x200000e0

0800bd5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	6039      	str	r1, [r7, #0]
 800bd66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d105      	bne.n	800bd7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	4907      	ldr	r1, [pc, #28]	; (800bd90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd72:	4808      	ldr	r0, [pc, #32]	; (800bd94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd74:	f7ff fdda 	bl	800b92c <USBD_GetString>
 800bd78:	e004      	b.n	800bd84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	4904      	ldr	r1, [pc, #16]	; (800bd90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd7e:	4805      	ldr	r0, [pc, #20]	; (800bd94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd80:	f7ff fdd4 	bl	800b92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd84:	4b02      	ldr	r3, [pc, #8]	; (800bd90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	200041f4 	.word	0x200041f4
 800bd94:	08010038 	.word	0x08010038

0800bd98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	6039      	str	r1, [r7, #0]
 800bda2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d105      	bne.n	800bdb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	4907      	ldr	r1, [pc, #28]	; (800bdcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdae:	4808      	ldr	r0, [pc, #32]	; (800bdd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdb0:	f7ff fdbc 	bl	800b92c <USBD_GetString>
 800bdb4:	e004      	b.n	800bdc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	4904      	ldr	r1, [pc, #16]	; (800bdcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdba:	4805      	ldr	r0, [pc, #20]	; (800bdd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdbc:	f7ff fdb6 	bl	800b92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdc0:	4b02      	ldr	r3, [pc, #8]	; (800bdcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200041f4 	.word	0x200041f4
 800bdd0:	08010044 	.word	0x08010044

0800bdd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdda:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <Get_SerialNum+0x44>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bde0:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <Get_SerialNum+0x48>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bde6:	4b0e      	ldr	r3, [pc, #56]	; (800be20 <Get_SerialNum+0x4c>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d009      	beq.n	800be0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdfa:	2208      	movs	r2, #8
 800bdfc:	4909      	ldr	r1, [pc, #36]	; (800be24 <Get_SerialNum+0x50>)
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f000 f814 	bl	800be2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be04:	2204      	movs	r2, #4
 800be06:	4908      	ldr	r1, [pc, #32]	; (800be28 <Get_SerialNum+0x54>)
 800be08:	68b8      	ldr	r0, [r7, #8]
 800be0a:	f000 f80f 	bl	800be2c <IntToUnicode>
  }
}
 800be0e:	bf00      	nop
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	1fff7a10 	.word	0x1fff7a10
 800be1c:	1fff7a14 	.word	0x1fff7a14
 800be20:	1fff7a18 	.word	0x1fff7a18
 800be24:	200000e2 	.word	0x200000e2
 800be28:	200000f2 	.word	0x200000f2

0800be2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b087      	sub	sp, #28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]
 800be42:	e027      	b.n	800be94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	0f1b      	lsrs	r3, r3, #28
 800be48:	2b09      	cmp	r3, #9
 800be4a:	d80b      	bhi.n	800be64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	0f1b      	lsrs	r3, r3, #28
 800be50:	b2da      	uxtb	r2, r3
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	4619      	mov	r1, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	440b      	add	r3, r1
 800be5c:	3230      	adds	r2, #48	; 0x30
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	701a      	strb	r2, [r3, #0]
 800be62:	e00a      	b.n	800be7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	0f1b      	lsrs	r3, r3, #28
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	4619      	mov	r1, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	440b      	add	r3, r1
 800be74:	3237      	adds	r2, #55	; 0x37
 800be76:	b2d2      	uxtb	r2, r2
 800be78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	3301      	adds	r3, #1
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	4413      	add	r3, r2
 800be8a:	2200      	movs	r2, #0
 800be8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be8e:	7dfb      	ldrb	r3, [r7, #23]
 800be90:	3301      	adds	r3, #1
 800be92:	75fb      	strb	r3, [r7, #23]
 800be94:	7dfa      	ldrb	r2, [r7, #23]
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d3d3      	bcc.n	800be44 <IntToUnicode+0x18>
  }
}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
	...

0800beac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	; 0x28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800beb4:	f107 0314 	add.w	r3, r7, #20
 800beb8:	2200      	movs	r2, #0
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	605a      	str	r2, [r3, #4]
 800bebe:	609a      	str	r2, [r3, #8]
 800bec0:	60da      	str	r2, [r3, #12]
 800bec2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800becc:	d13a      	bne.n	800bf44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bece:	2300      	movs	r3, #0
 800bed0:	613b      	str	r3, [r7, #16]
 800bed2:	4b1e      	ldr	r3, [pc, #120]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed6:	4a1d      	ldr	r2, [pc, #116]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bed8:	f043 0301 	orr.w	r3, r3, #1
 800bedc:	6313      	str	r3, [r2, #48]	; 0x30
 800bede:	4b1b      	ldr	r3, [pc, #108]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	613b      	str	r3, [r7, #16]
 800bee8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800beea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800beee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef0:	2302      	movs	r3, #2
 800bef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bef8:	2303      	movs	r3, #3
 800befa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800befc:	230a      	movs	r3, #10
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf00:	f107 0314 	add.w	r3, r7, #20
 800bf04:	4619      	mov	r1, r3
 800bf06:	4812      	ldr	r0, [pc, #72]	; (800bf50 <HAL_PCD_MspInit+0xa4>)
 800bf08:	f7f5 ff0a 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bf0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf10:	4a0e      	ldr	r2, [pc, #56]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bf12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf16:	6353      	str	r3, [r2, #52]	; 0x34
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bf1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf20:	4a0a      	ldr	r2, [pc, #40]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bf22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf26:	6453      	str	r3, [r2, #68]	; 0x44
 800bf28:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <HAL_PCD_MspInit+0xa0>)
 800bf2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf34:	2200      	movs	r2, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	2043      	movs	r0, #67	; 0x43
 800bf3a:	f7f5 feba 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf3e:	2043      	movs	r0, #67	; 0x43
 800bf40:	f7f5 fed3 	bl	8001cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf44:	bf00      	nop
 800bf46:	3728      	adds	r7, #40	; 0x28
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	40023800 	.word	0x40023800
 800bf50:	40020000 	.word	0x40020000

0800bf54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	f7fe fb7f 	bl	800a66e <USBD_LL_SetupStage>
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf8a:	78fa      	ldrb	r2, [r7, #3]
 800bf8c:	6879      	ldr	r1, [r7, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	00db      	lsls	r3, r3, #3
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	440b      	add	r3, r1
 800bf98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	78fb      	ldrb	r3, [r7, #3]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	f7fe fbb9 	bl	800a718 <USBD_LL_DataOutStage>
}
 800bfa6:	bf00      	nop
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bfc0:	78fa      	ldrb	r2, [r7, #3]
 800bfc2:	6879      	ldr	r1, [r7, #4]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	4413      	add	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	440b      	add	r3, r1
 800bfce:	334c      	adds	r3, #76	; 0x4c
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	f7fe fc52 	bl	800a87e <USBD_LL_DataInStage>
}
 800bfda:	bf00      	nop
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe fd86 	bl	800ab02 <USBD_LL_SOF>
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c006:	2301      	movs	r3, #1
 800c008:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d001      	beq.n	800c016 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c012:	f7f5 f965 	bl	80012e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c01c:	7bfa      	ldrb	r2, [r7, #15]
 800c01e:	4611      	mov	r1, r2
 800c020:	4618      	mov	r0, r3
 800c022:	f7fe fd30 	bl	800aa86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe fcd8 	bl	800a9e2 <USBD_LL_Reset>
}
 800c032:	bf00      	nop
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
	...

0800c03c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe fd2b 	bl	800aaa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	6812      	ldr	r2, [r2, #0]
 800c05e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c062:	f043 0301 	orr.w	r3, r3, #1
 800c066:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d005      	beq.n	800c07c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c070:	4b04      	ldr	r3, [pc, #16]	; (800c084 <HAL_PCD_SuspendCallback+0x48>)
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	4a03      	ldr	r2, [pc, #12]	; (800c084 <HAL_PCD_SuspendCallback+0x48>)
 800c076:	f043 0306 	orr.w	r3, r3, #6
 800c07a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	e000ed00 	.word	0xe000ed00

0800c088 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fd1b 	bl	800aad2 <USBD_LL_Resume>
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe fd73 	bl	800aba6 <USBD_LL_IsoOUTIncomplete>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0da:	78fa      	ldrb	r2, [r7, #3]
 800c0dc:	4611      	mov	r1, r2
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe fd2f 	bl	800ab42 <USBD_LL_IsoINIncomplete>
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fd85 	bl	800ac0a <USBD_LL_DevConnected>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fd82 	bl	800ac20 <USBD_LL_DevDisconnected>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d13c      	bne.n	800c1ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c134:	4a20      	ldr	r2, [pc, #128]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a1e      	ldr	r2, [pc, #120]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c140:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c144:	4b1c      	ldr	r3, [pc, #112]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c14a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c14c:	4b1a      	ldr	r3, [pc, #104]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c14e:	2204      	movs	r2, #4
 800c150:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c152:	4b19      	ldr	r3, [pc, #100]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c154:	2202      	movs	r2, #2
 800c156:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c158:	4b17      	ldr	r3, [pc, #92]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c15e:	4b16      	ldr	r3, [pc, #88]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c160:	2202      	movs	r2, #2
 800c162:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c164:	4b14      	ldr	r3, [pc, #80]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c166:	2200      	movs	r2, #0
 800c168:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c16a:	4b13      	ldr	r3, [pc, #76]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c170:	4b11      	ldr	r3, [pc, #68]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c172:	2200      	movs	r2, #0
 800c174:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c176:	4b10      	ldr	r3, [pc, #64]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c178:	2200      	movs	r2, #0
 800c17a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c17c:	4b0e      	ldr	r3, [pc, #56]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c17e:	2200      	movs	r2, #0
 800c180:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c182:	480d      	ldr	r0, [pc, #52]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c184:	f7f6 ff29 	bl	8002fda <HAL_PCD_Init>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c18e:	f7f5 f8a7 	bl	80012e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c192:	2180      	movs	r1, #128	; 0x80
 800c194:	4808      	ldr	r0, [pc, #32]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c196:	f7f8 f980 	bl	800449a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c19a:	2240      	movs	r2, #64	; 0x40
 800c19c:	2100      	movs	r1, #0
 800c19e:	4806      	ldr	r0, [pc, #24]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c1a0:	f7f8 f934 	bl	800440c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1a4:	2280      	movs	r2, #128	; 0x80
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	4803      	ldr	r0, [pc, #12]	; (800c1b8 <USBD_LL_Init+0x94>)
 800c1aa:	f7f8 f92f 	bl	800440c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	200043f4 	.word	0x200043f4

0800c1bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f7 f81e 	bl	8003214 <HAL_PCD_Start>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f942 	bl	800c468 <USBD_Get_USB_Status>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	4608      	mov	r0, r1
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	461a      	mov	r2, r3
 800c200:	4603      	mov	r3, r0
 800c202:	70fb      	strb	r3, [r7, #3]
 800c204:	460b      	mov	r3, r1
 800c206:	70bb      	strb	r3, [r7, #2]
 800c208:	4613      	mov	r3, r2
 800c20a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c21a:	78bb      	ldrb	r3, [r7, #2]
 800c21c:	883a      	ldrh	r2, [r7, #0]
 800c21e:	78f9      	ldrb	r1, [r7, #3]
 800c220:	f7f7 fcef 	bl	8003c02 <HAL_PCD_EP_Open>
 800c224:	4603      	mov	r3, r0
 800c226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 f91c 	bl	800c468 <USBD_Get_USB_Status>
 800c230:	4603      	mov	r3, r0
 800c232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c234:	7bbb      	ldrb	r3, [r7, #14]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b084      	sub	sp, #16
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c258:	78fa      	ldrb	r2, [r7, #3]
 800c25a:	4611      	mov	r1, r2
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7f7 fd38 	bl	8003cd2 <HAL_PCD_EP_Close>
 800c262:	4603      	mov	r3, r0
 800c264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 f8fd 	bl	800c468 <USBD_Get_USB_Status>
 800c26e:	4603      	mov	r3, r0
 800c270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c272:	7bbb      	ldrb	r3, [r7, #14]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c296:	78fa      	ldrb	r2, [r7, #3]
 800c298:	4611      	mov	r1, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f7 fe10 	bl	8003ec0 <HAL_PCD_EP_SetStall>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 f8de 	bl	800c468 <USBD_Get_USB_Status>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2d4:	78fa      	ldrb	r2, [r7, #3]
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7f7 fe55 	bl	8003f88 <HAL_PCD_EP_ClrStall>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 f8bf 	bl	800c468 <USBD_Get_USB_Status>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c30a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c30c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c310:	2b00      	cmp	r3, #0
 800c312:	da0b      	bge.n	800c32c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c31a:	68f9      	ldr	r1, [r7, #12]
 800c31c:	4613      	mov	r3, r2
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	333e      	adds	r3, #62	; 0x3e
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	e00b      	b.n	800c344 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	4613      	mov	r3, r2
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	440b      	add	r3, r1
 800c33e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c342:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c344:	4618      	mov	r0, r3
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c36a:	78fa      	ldrb	r2, [r7, #3]
 800c36c:	4611      	mov	r1, r2
 800c36e:	4618      	mov	r0, r3
 800c370:	f7f7 fc22 	bl	8003bb8 <HAL_PCD_SetAddress>
 800c374:	4603      	mov	r3, r0
 800c376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 f874 	bl	800c468 <USBD_Get_USB_Status>
 800c380:	4603      	mov	r3, r0
 800c382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c384:	7bbb      	ldrb	r3, [r7, #14]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b086      	sub	sp, #24
 800c392:	af00      	add	r7, sp, #0
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	607a      	str	r2, [r7, #4]
 800c398:	603b      	str	r3, [r7, #0]
 800c39a:	460b      	mov	r3, r1
 800c39c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3ac:	7af9      	ldrb	r1, [r7, #11]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	f7f7 fd3b 	bl	8003e2c <HAL_PCD_EP_Transmit>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 f853 	bl	800c468 <USBD_Get_USB_Status>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	607a      	str	r2, [r7, #4]
 800c3da:	603b      	str	r3, [r7, #0]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3ee:	7af9      	ldrb	r1, [r7, #11]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	f7f7 fcb7 	bl	8003d66 <HAL_PCD_EP_Receive>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f832 	bl	800c468 <USBD_Get_USB_Status>
 800c404:	4603      	mov	r3, r0
 800c406:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c408:	7dbb      	ldrb	r3, [r7, #22]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b082      	sub	sp, #8
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	460b      	mov	r3, r1
 800c41c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c424:	78fa      	ldrb	r2, [r7, #3]
 800c426:	4611      	mov	r1, r2
 800c428:	4618      	mov	r0, r3
 800c42a:	f7f7 fce7 	bl	8003dfc <HAL_PCD_EP_GetRxCount>
 800c42e:	4603      	mov	r3, r0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c440:	4b03      	ldr	r3, [pc, #12]	; (800c450 <USBD_static_malloc+0x18>)
}
 800c442:	4618      	mov	r0, r3
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	20004900 	.word	0x20004900

0800c454 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]

}
 800c45c:	bf00      	nop
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	2b03      	cmp	r3, #3
 800c47a:	d817      	bhi.n	800c4ac <USBD_Get_USB_Status+0x44>
 800c47c:	a201      	add	r2, pc, #4	; (adr r2, 800c484 <USBD_Get_USB_Status+0x1c>)
 800c47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c482:	bf00      	nop
 800c484:	0800c495 	.word	0x0800c495
 800c488:	0800c49b 	.word	0x0800c49b
 800c48c:	0800c4a1 	.word	0x0800c4a1
 800c490:	0800c4a7 	.word	0x0800c4a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c494:	2300      	movs	r3, #0
 800c496:	73fb      	strb	r3, [r7, #15]
    break;
 800c498:	e00b      	b.n	800c4b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c49a:	2303      	movs	r3, #3
 800c49c:	73fb      	strb	r3, [r7, #15]
    break;
 800c49e:	e008      	b.n	800c4b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a4:	e005      	b.n	800c4b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4aa:	e002      	b.n	800c4b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b0:	bf00      	nop
  }
  return usb_status;
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <__cvt>:
 800c4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c4:	ec55 4b10 	vmov	r4, r5, d0
 800c4c8:	2d00      	cmp	r5, #0
 800c4ca:	460e      	mov	r6, r1
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	462b      	mov	r3, r5
 800c4d0:	bfbb      	ittet	lt
 800c4d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c4d6:	461d      	movlt	r5, r3
 800c4d8:	2300      	movge	r3, #0
 800c4da:	232d      	movlt	r3, #45	; 0x2d
 800c4dc:	700b      	strb	r3, [r1, #0]
 800c4de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c4e4:	4691      	mov	r9, r2
 800c4e6:	f023 0820 	bic.w	r8, r3, #32
 800c4ea:	bfbc      	itt	lt
 800c4ec:	4622      	movlt	r2, r4
 800c4ee:	4614      	movlt	r4, r2
 800c4f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4f4:	d005      	beq.n	800c502 <__cvt+0x42>
 800c4f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c4fa:	d100      	bne.n	800c4fe <__cvt+0x3e>
 800c4fc:	3601      	adds	r6, #1
 800c4fe:	2102      	movs	r1, #2
 800c500:	e000      	b.n	800c504 <__cvt+0x44>
 800c502:	2103      	movs	r1, #3
 800c504:	ab03      	add	r3, sp, #12
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	ab02      	add	r3, sp, #8
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	ec45 4b10 	vmov	d0, r4, r5
 800c510:	4653      	mov	r3, sl
 800c512:	4632      	mov	r2, r6
 800c514:	f000 ff38 	bl	800d388 <_dtoa_r>
 800c518:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c51c:	4607      	mov	r7, r0
 800c51e:	d102      	bne.n	800c526 <__cvt+0x66>
 800c520:	f019 0f01 	tst.w	r9, #1
 800c524:	d022      	beq.n	800c56c <__cvt+0xac>
 800c526:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c52a:	eb07 0906 	add.w	r9, r7, r6
 800c52e:	d110      	bne.n	800c552 <__cvt+0x92>
 800c530:	783b      	ldrb	r3, [r7, #0]
 800c532:	2b30      	cmp	r3, #48	; 0x30
 800c534:	d10a      	bne.n	800c54c <__cvt+0x8c>
 800c536:	2200      	movs	r2, #0
 800c538:	2300      	movs	r3, #0
 800c53a:	4620      	mov	r0, r4
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7f4 facb 	bl	8000ad8 <__aeabi_dcmpeq>
 800c542:	b918      	cbnz	r0, 800c54c <__cvt+0x8c>
 800c544:	f1c6 0601 	rsb	r6, r6, #1
 800c548:	f8ca 6000 	str.w	r6, [sl]
 800c54c:	f8da 3000 	ldr.w	r3, [sl]
 800c550:	4499      	add	r9, r3
 800c552:	2200      	movs	r2, #0
 800c554:	2300      	movs	r3, #0
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f4 fabd 	bl	8000ad8 <__aeabi_dcmpeq>
 800c55e:	b108      	cbz	r0, 800c564 <__cvt+0xa4>
 800c560:	f8cd 900c 	str.w	r9, [sp, #12]
 800c564:	2230      	movs	r2, #48	; 0x30
 800c566:	9b03      	ldr	r3, [sp, #12]
 800c568:	454b      	cmp	r3, r9
 800c56a:	d307      	bcc.n	800c57c <__cvt+0xbc>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c570:	1bdb      	subs	r3, r3, r7
 800c572:	4638      	mov	r0, r7
 800c574:	6013      	str	r3, [r2, #0]
 800c576:	b004      	add	sp, #16
 800c578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c57c:	1c59      	adds	r1, r3, #1
 800c57e:	9103      	str	r1, [sp, #12]
 800c580:	701a      	strb	r2, [r3, #0]
 800c582:	e7f0      	b.n	800c566 <__cvt+0xa6>

0800c584 <__exponent>:
 800c584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c586:	4603      	mov	r3, r0
 800c588:	2900      	cmp	r1, #0
 800c58a:	bfb8      	it	lt
 800c58c:	4249      	neglt	r1, r1
 800c58e:	f803 2b02 	strb.w	r2, [r3], #2
 800c592:	bfb4      	ite	lt
 800c594:	222d      	movlt	r2, #45	; 0x2d
 800c596:	222b      	movge	r2, #43	; 0x2b
 800c598:	2909      	cmp	r1, #9
 800c59a:	7042      	strb	r2, [r0, #1]
 800c59c:	dd2a      	ble.n	800c5f4 <__exponent+0x70>
 800c59e:	f10d 0207 	add.w	r2, sp, #7
 800c5a2:	4617      	mov	r7, r2
 800c5a4:	260a      	movs	r6, #10
 800c5a6:	4694      	mov	ip, r2
 800c5a8:	fb91 f5f6 	sdiv	r5, r1, r6
 800c5ac:	fb06 1415 	mls	r4, r6, r5, r1
 800c5b0:	3430      	adds	r4, #48	; 0x30
 800c5b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	2c63      	cmp	r4, #99	; 0x63
 800c5ba:	f102 32ff 	add.w	r2, r2, #4294967295
 800c5be:	4629      	mov	r1, r5
 800c5c0:	dcf1      	bgt.n	800c5a6 <__exponent+0x22>
 800c5c2:	3130      	adds	r1, #48	; 0x30
 800c5c4:	f1ac 0402 	sub.w	r4, ip, #2
 800c5c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c5cc:	1c41      	adds	r1, r0, #1
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	42ba      	cmp	r2, r7
 800c5d2:	d30a      	bcc.n	800c5ea <__exponent+0x66>
 800c5d4:	f10d 0209 	add.w	r2, sp, #9
 800c5d8:	eba2 020c 	sub.w	r2, r2, ip
 800c5dc:	42bc      	cmp	r4, r7
 800c5de:	bf88      	it	hi
 800c5e0:	2200      	movhi	r2, #0
 800c5e2:	4413      	add	r3, r2
 800c5e4:	1a18      	subs	r0, r3, r0
 800c5e6:	b003      	add	sp, #12
 800c5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c5ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c5f2:	e7ed      	b.n	800c5d0 <__exponent+0x4c>
 800c5f4:	2330      	movs	r3, #48	; 0x30
 800c5f6:	3130      	adds	r1, #48	; 0x30
 800c5f8:	7083      	strb	r3, [r0, #2]
 800c5fa:	70c1      	strb	r1, [r0, #3]
 800c5fc:	1d03      	adds	r3, r0, #4
 800c5fe:	e7f1      	b.n	800c5e4 <__exponent+0x60>

0800c600 <_printf_float>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ed2d 8b02 	vpush	{d8}
 800c608:	b08d      	sub	sp, #52	; 0x34
 800c60a:	460c      	mov	r4, r1
 800c60c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c610:	4616      	mov	r6, r2
 800c612:	461f      	mov	r7, r3
 800c614:	4605      	mov	r5, r0
 800c616:	f000 fdb7 	bl	800d188 <_localeconv_r>
 800c61a:	f8d0 a000 	ldr.w	sl, [r0]
 800c61e:	4650      	mov	r0, sl
 800c620:	f7f3 fe2e 	bl	8000280 <strlen>
 800c624:	2300      	movs	r3, #0
 800c626:	930a      	str	r3, [sp, #40]	; 0x28
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	9305      	str	r3, [sp, #20]
 800c62c:	f8d8 3000 	ldr.w	r3, [r8]
 800c630:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c634:	3307      	adds	r3, #7
 800c636:	f023 0307 	bic.w	r3, r3, #7
 800c63a:	f103 0208 	add.w	r2, r3, #8
 800c63e:	f8c8 2000 	str.w	r2, [r8]
 800c642:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c64a:	9307      	str	r3, [sp, #28]
 800c64c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c650:	ee08 0a10 	vmov	s16, r0
 800c654:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c65c:	4b9e      	ldr	r3, [pc, #632]	; (800c8d8 <_printf_float+0x2d8>)
 800c65e:	f04f 32ff 	mov.w	r2, #4294967295
 800c662:	f7f4 fa6b 	bl	8000b3c <__aeabi_dcmpun>
 800c666:	bb88      	cbnz	r0, 800c6cc <_printf_float+0xcc>
 800c668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c66c:	4b9a      	ldr	r3, [pc, #616]	; (800c8d8 <_printf_float+0x2d8>)
 800c66e:	f04f 32ff 	mov.w	r2, #4294967295
 800c672:	f7f4 fa45 	bl	8000b00 <__aeabi_dcmple>
 800c676:	bb48      	cbnz	r0, 800c6cc <_printf_float+0xcc>
 800c678:	2200      	movs	r2, #0
 800c67a:	2300      	movs	r3, #0
 800c67c:	4640      	mov	r0, r8
 800c67e:	4649      	mov	r1, r9
 800c680:	f7f4 fa34 	bl	8000aec <__aeabi_dcmplt>
 800c684:	b110      	cbz	r0, 800c68c <_printf_float+0x8c>
 800c686:	232d      	movs	r3, #45	; 0x2d
 800c688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c68c:	4a93      	ldr	r2, [pc, #588]	; (800c8dc <_printf_float+0x2dc>)
 800c68e:	4b94      	ldr	r3, [pc, #592]	; (800c8e0 <_printf_float+0x2e0>)
 800c690:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c694:	bf94      	ite	ls
 800c696:	4690      	movls	r8, r2
 800c698:	4698      	movhi	r8, r3
 800c69a:	2303      	movs	r3, #3
 800c69c:	6123      	str	r3, [r4, #16]
 800c69e:	9b05      	ldr	r3, [sp, #20]
 800c6a0:	f023 0304 	bic.w	r3, r3, #4
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	f04f 0900 	mov.w	r9, #0
 800c6aa:	9700      	str	r7, [sp, #0]
 800c6ac:	4633      	mov	r3, r6
 800c6ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f000 f9da 	bl	800ca6c <_printf_common>
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	f040 8090 	bne.w	800c7de <_printf_float+0x1de>
 800c6be:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c2:	b00d      	add	sp, #52	; 0x34
 800c6c4:	ecbd 8b02 	vpop	{d8}
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	f7f4 fa32 	bl	8000b3c <__aeabi_dcmpun>
 800c6d8:	b140      	cbz	r0, 800c6ec <_printf_float+0xec>
 800c6da:	464b      	mov	r3, r9
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bfbc      	itt	lt
 800c6e0:	232d      	movlt	r3, #45	; 0x2d
 800c6e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c6e6:	4a7f      	ldr	r2, [pc, #508]	; (800c8e4 <_printf_float+0x2e4>)
 800c6e8:	4b7f      	ldr	r3, [pc, #508]	; (800c8e8 <_printf_float+0x2e8>)
 800c6ea:	e7d1      	b.n	800c690 <_printf_float+0x90>
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c6f2:	9206      	str	r2, [sp, #24]
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	d13f      	bne.n	800c778 <_printf_float+0x178>
 800c6f8:	2306      	movs	r3, #6
 800c6fa:	6063      	str	r3, [r4, #4]
 800c6fc:	9b05      	ldr	r3, [sp, #20]
 800c6fe:	6861      	ldr	r1, [r4, #4]
 800c700:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c704:	2300      	movs	r3, #0
 800c706:	9303      	str	r3, [sp, #12]
 800c708:	ab0a      	add	r3, sp, #40	; 0x28
 800c70a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c70e:	ab09      	add	r3, sp, #36	; 0x24
 800c710:	ec49 8b10 	vmov	d0, r8, r9
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	6022      	str	r2, [r4, #0]
 800c718:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c71c:	4628      	mov	r0, r5
 800c71e:	f7ff fecf 	bl	800c4c0 <__cvt>
 800c722:	9b06      	ldr	r3, [sp, #24]
 800c724:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c726:	2b47      	cmp	r3, #71	; 0x47
 800c728:	4680      	mov	r8, r0
 800c72a:	d108      	bne.n	800c73e <_printf_float+0x13e>
 800c72c:	1cc8      	adds	r0, r1, #3
 800c72e:	db02      	blt.n	800c736 <_printf_float+0x136>
 800c730:	6863      	ldr	r3, [r4, #4]
 800c732:	4299      	cmp	r1, r3
 800c734:	dd41      	ble.n	800c7ba <_printf_float+0x1ba>
 800c736:	f1ab 0302 	sub.w	r3, fp, #2
 800c73a:	fa5f fb83 	uxtb.w	fp, r3
 800c73e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c742:	d820      	bhi.n	800c786 <_printf_float+0x186>
 800c744:	3901      	subs	r1, #1
 800c746:	465a      	mov	r2, fp
 800c748:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c74c:	9109      	str	r1, [sp, #36]	; 0x24
 800c74e:	f7ff ff19 	bl	800c584 <__exponent>
 800c752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c754:	1813      	adds	r3, r2, r0
 800c756:	2a01      	cmp	r2, #1
 800c758:	4681      	mov	r9, r0
 800c75a:	6123      	str	r3, [r4, #16]
 800c75c:	dc02      	bgt.n	800c764 <_printf_float+0x164>
 800c75e:	6822      	ldr	r2, [r4, #0]
 800c760:	07d2      	lsls	r2, r2, #31
 800c762:	d501      	bpl.n	800c768 <_printf_float+0x168>
 800c764:	3301      	adds	r3, #1
 800c766:	6123      	str	r3, [r4, #16]
 800c768:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d09c      	beq.n	800c6aa <_printf_float+0xaa>
 800c770:	232d      	movs	r3, #45	; 0x2d
 800c772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c776:	e798      	b.n	800c6aa <_printf_float+0xaa>
 800c778:	9a06      	ldr	r2, [sp, #24]
 800c77a:	2a47      	cmp	r2, #71	; 0x47
 800c77c:	d1be      	bne.n	800c6fc <_printf_float+0xfc>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1bc      	bne.n	800c6fc <_printf_float+0xfc>
 800c782:	2301      	movs	r3, #1
 800c784:	e7b9      	b.n	800c6fa <_printf_float+0xfa>
 800c786:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c78a:	d118      	bne.n	800c7be <_printf_float+0x1be>
 800c78c:	2900      	cmp	r1, #0
 800c78e:	6863      	ldr	r3, [r4, #4]
 800c790:	dd0b      	ble.n	800c7aa <_printf_float+0x1aa>
 800c792:	6121      	str	r1, [r4, #16]
 800c794:	b913      	cbnz	r3, 800c79c <_printf_float+0x19c>
 800c796:	6822      	ldr	r2, [r4, #0]
 800c798:	07d0      	lsls	r0, r2, #31
 800c79a:	d502      	bpl.n	800c7a2 <_printf_float+0x1a2>
 800c79c:	3301      	adds	r3, #1
 800c79e:	440b      	add	r3, r1
 800c7a0:	6123      	str	r3, [r4, #16]
 800c7a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c7a4:	f04f 0900 	mov.w	r9, #0
 800c7a8:	e7de      	b.n	800c768 <_printf_float+0x168>
 800c7aa:	b913      	cbnz	r3, 800c7b2 <_printf_float+0x1b2>
 800c7ac:	6822      	ldr	r2, [r4, #0]
 800c7ae:	07d2      	lsls	r2, r2, #31
 800c7b0:	d501      	bpl.n	800c7b6 <_printf_float+0x1b6>
 800c7b2:	3302      	adds	r3, #2
 800c7b4:	e7f4      	b.n	800c7a0 <_printf_float+0x1a0>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e7f2      	b.n	800c7a0 <_printf_float+0x1a0>
 800c7ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c0:	4299      	cmp	r1, r3
 800c7c2:	db05      	blt.n	800c7d0 <_printf_float+0x1d0>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	6121      	str	r1, [r4, #16]
 800c7c8:	07d8      	lsls	r0, r3, #31
 800c7ca:	d5ea      	bpl.n	800c7a2 <_printf_float+0x1a2>
 800c7cc:	1c4b      	adds	r3, r1, #1
 800c7ce:	e7e7      	b.n	800c7a0 <_printf_float+0x1a0>
 800c7d0:	2900      	cmp	r1, #0
 800c7d2:	bfd4      	ite	le
 800c7d4:	f1c1 0202 	rsble	r2, r1, #2
 800c7d8:	2201      	movgt	r2, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	e7e0      	b.n	800c7a0 <_printf_float+0x1a0>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	055a      	lsls	r2, r3, #21
 800c7e2:	d407      	bmi.n	800c7f4 <_printf_float+0x1f4>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	4642      	mov	r2, r8
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	47b8      	blx	r7
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d12c      	bne.n	800c84c <_printf_float+0x24c>
 800c7f2:	e764      	b.n	800c6be <_printf_float+0xbe>
 800c7f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7f8:	f240 80e0 	bls.w	800c9bc <_printf_float+0x3bc>
 800c7fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c800:	2200      	movs	r2, #0
 800c802:	2300      	movs	r3, #0
 800c804:	f7f4 f968 	bl	8000ad8 <__aeabi_dcmpeq>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d034      	beq.n	800c876 <_printf_float+0x276>
 800c80c:	4a37      	ldr	r2, [pc, #220]	; (800c8ec <_printf_float+0x2ec>)
 800c80e:	2301      	movs	r3, #1
 800c810:	4631      	mov	r1, r6
 800c812:	4628      	mov	r0, r5
 800c814:	47b8      	blx	r7
 800c816:	3001      	adds	r0, #1
 800c818:	f43f af51 	beq.w	800c6be <_printf_float+0xbe>
 800c81c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c820:	429a      	cmp	r2, r3
 800c822:	db02      	blt.n	800c82a <_printf_float+0x22a>
 800c824:	6823      	ldr	r3, [r4, #0]
 800c826:	07d8      	lsls	r0, r3, #31
 800c828:	d510      	bpl.n	800c84c <_printf_float+0x24c>
 800c82a:	ee18 3a10 	vmov	r3, s16
 800c82e:	4652      	mov	r2, sl
 800c830:	4631      	mov	r1, r6
 800c832:	4628      	mov	r0, r5
 800c834:	47b8      	blx	r7
 800c836:	3001      	adds	r0, #1
 800c838:	f43f af41 	beq.w	800c6be <_printf_float+0xbe>
 800c83c:	f04f 0800 	mov.w	r8, #0
 800c840:	f104 091a 	add.w	r9, r4, #26
 800c844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c846:	3b01      	subs	r3, #1
 800c848:	4543      	cmp	r3, r8
 800c84a:	dc09      	bgt.n	800c860 <_printf_float+0x260>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	079b      	lsls	r3, r3, #30
 800c850:	f100 8107 	bmi.w	800ca62 <_printf_float+0x462>
 800c854:	68e0      	ldr	r0, [r4, #12]
 800c856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c858:	4298      	cmp	r0, r3
 800c85a:	bfb8      	it	lt
 800c85c:	4618      	movlt	r0, r3
 800c85e:	e730      	b.n	800c6c2 <_printf_float+0xc2>
 800c860:	2301      	movs	r3, #1
 800c862:	464a      	mov	r2, r9
 800c864:	4631      	mov	r1, r6
 800c866:	4628      	mov	r0, r5
 800c868:	47b8      	blx	r7
 800c86a:	3001      	adds	r0, #1
 800c86c:	f43f af27 	beq.w	800c6be <_printf_float+0xbe>
 800c870:	f108 0801 	add.w	r8, r8, #1
 800c874:	e7e6      	b.n	800c844 <_printf_float+0x244>
 800c876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dc39      	bgt.n	800c8f0 <_printf_float+0x2f0>
 800c87c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ec <_printf_float+0x2ec>)
 800c87e:	2301      	movs	r3, #1
 800c880:	4631      	mov	r1, r6
 800c882:	4628      	mov	r0, r5
 800c884:	47b8      	blx	r7
 800c886:	3001      	adds	r0, #1
 800c888:	f43f af19 	beq.w	800c6be <_printf_float+0xbe>
 800c88c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c890:	4313      	orrs	r3, r2
 800c892:	d102      	bne.n	800c89a <_printf_float+0x29a>
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	07d9      	lsls	r1, r3, #31
 800c898:	d5d8      	bpl.n	800c84c <_printf_float+0x24c>
 800c89a:	ee18 3a10 	vmov	r3, s16
 800c89e:	4652      	mov	r2, sl
 800c8a0:	4631      	mov	r1, r6
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	47b8      	blx	r7
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	f43f af09 	beq.w	800c6be <_printf_float+0xbe>
 800c8ac:	f04f 0900 	mov.w	r9, #0
 800c8b0:	f104 0a1a 	add.w	sl, r4, #26
 800c8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b6:	425b      	negs	r3, r3
 800c8b8:	454b      	cmp	r3, r9
 800c8ba:	dc01      	bgt.n	800c8c0 <_printf_float+0x2c0>
 800c8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8be:	e792      	b.n	800c7e6 <_printf_float+0x1e6>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	47b8      	blx	r7
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	f43f aef7 	beq.w	800c6be <_printf_float+0xbe>
 800c8d0:	f109 0901 	add.w	r9, r9, #1
 800c8d4:	e7ee      	b.n	800c8b4 <_printf_float+0x2b4>
 800c8d6:	bf00      	nop
 800c8d8:	7fefffff 	.word	0x7fefffff
 800c8dc:	080100b4 	.word	0x080100b4
 800c8e0:	080100b8 	.word	0x080100b8
 800c8e4:	080100bc 	.word	0x080100bc
 800c8e8:	080100c0 	.word	0x080100c0
 800c8ec:	080100c4 	.word	0x080100c4
 800c8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	bfa8      	it	ge
 800c8f8:	461a      	movge	r2, r3
 800c8fa:	2a00      	cmp	r2, #0
 800c8fc:	4691      	mov	r9, r2
 800c8fe:	dc37      	bgt.n	800c970 <_printf_float+0x370>
 800c900:	f04f 0b00 	mov.w	fp, #0
 800c904:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c908:	f104 021a 	add.w	r2, r4, #26
 800c90c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c90e:	9305      	str	r3, [sp, #20]
 800c910:	eba3 0309 	sub.w	r3, r3, r9
 800c914:	455b      	cmp	r3, fp
 800c916:	dc33      	bgt.n	800c980 <_printf_float+0x380>
 800c918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c91c:	429a      	cmp	r2, r3
 800c91e:	db3b      	blt.n	800c998 <_printf_float+0x398>
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	07da      	lsls	r2, r3, #31
 800c924:	d438      	bmi.n	800c998 <_printf_float+0x398>
 800c926:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c92a:	eba2 0903 	sub.w	r9, r2, r3
 800c92e:	9b05      	ldr	r3, [sp, #20]
 800c930:	1ad2      	subs	r2, r2, r3
 800c932:	4591      	cmp	r9, r2
 800c934:	bfa8      	it	ge
 800c936:	4691      	movge	r9, r2
 800c938:	f1b9 0f00 	cmp.w	r9, #0
 800c93c:	dc35      	bgt.n	800c9aa <_printf_float+0x3aa>
 800c93e:	f04f 0800 	mov.w	r8, #0
 800c942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c946:	f104 0a1a 	add.w	sl, r4, #26
 800c94a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	eba3 0309 	sub.w	r3, r3, r9
 800c954:	4543      	cmp	r3, r8
 800c956:	f77f af79 	ble.w	800c84c <_printf_float+0x24c>
 800c95a:	2301      	movs	r3, #1
 800c95c:	4652      	mov	r2, sl
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	f43f aeaa 	beq.w	800c6be <_printf_float+0xbe>
 800c96a:	f108 0801 	add.w	r8, r8, #1
 800c96e:	e7ec      	b.n	800c94a <_printf_float+0x34a>
 800c970:	4613      	mov	r3, r2
 800c972:	4631      	mov	r1, r6
 800c974:	4642      	mov	r2, r8
 800c976:	4628      	mov	r0, r5
 800c978:	47b8      	blx	r7
 800c97a:	3001      	adds	r0, #1
 800c97c:	d1c0      	bne.n	800c900 <_printf_float+0x300>
 800c97e:	e69e      	b.n	800c6be <_printf_float+0xbe>
 800c980:	2301      	movs	r3, #1
 800c982:	4631      	mov	r1, r6
 800c984:	4628      	mov	r0, r5
 800c986:	9205      	str	r2, [sp, #20]
 800c988:	47b8      	blx	r7
 800c98a:	3001      	adds	r0, #1
 800c98c:	f43f ae97 	beq.w	800c6be <_printf_float+0xbe>
 800c990:	9a05      	ldr	r2, [sp, #20]
 800c992:	f10b 0b01 	add.w	fp, fp, #1
 800c996:	e7b9      	b.n	800c90c <_printf_float+0x30c>
 800c998:	ee18 3a10 	vmov	r3, s16
 800c99c:	4652      	mov	r2, sl
 800c99e:	4631      	mov	r1, r6
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	47b8      	blx	r7
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	d1be      	bne.n	800c926 <_printf_float+0x326>
 800c9a8:	e689      	b.n	800c6be <_printf_float+0xbe>
 800c9aa:	9a05      	ldr	r2, [sp, #20]
 800c9ac:	464b      	mov	r3, r9
 800c9ae:	4442      	add	r2, r8
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	47b8      	blx	r7
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	d1c1      	bne.n	800c93e <_printf_float+0x33e>
 800c9ba:	e680      	b.n	800c6be <_printf_float+0xbe>
 800c9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9be:	2a01      	cmp	r2, #1
 800c9c0:	dc01      	bgt.n	800c9c6 <_printf_float+0x3c6>
 800c9c2:	07db      	lsls	r3, r3, #31
 800c9c4:	d53a      	bpl.n	800ca3c <_printf_float+0x43c>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4642      	mov	r2, r8
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	47b8      	blx	r7
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	f43f ae74 	beq.w	800c6be <_printf_float+0xbe>
 800c9d6:	ee18 3a10 	vmov	r3, s16
 800c9da:	4652      	mov	r2, sl
 800c9dc:	4631      	mov	r1, r6
 800c9de:	4628      	mov	r0, r5
 800c9e0:	47b8      	blx	r7
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	f43f ae6b 	beq.w	800c6be <_printf_float+0xbe>
 800c9e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c9f4:	f7f4 f870 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9f8:	b9d8      	cbnz	r0, 800ca32 <_printf_float+0x432>
 800c9fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c9fe:	f108 0201 	add.w	r2, r8, #1
 800ca02:	4631      	mov	r1, r6
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b8      	blx	r7
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d10e      	bne.n	800ca2a <_printf_float+0x42a>
 800ca0c:	e657      	b.n	800c6be <_printf_float+0xbe>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	4652      	mov	r2, sl
 800ca12:	4631      	mov	r1, r6
 800ca14:	4628      	mov	r0, r5
 800ca16:	47b8      	blx	r7
 800ca18:	3001      	adds	r0, #1
 800ca1a:	f43f ae50 	beq.w	800c6be <_printf_float+0xbe>
 800ca1e:	f108 0801 	add.w	r8, r8, #1
 800ca22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca24:	3b01      	subs	r3, #1
 800ca26:	4543      	cmp	r3, r8
 800ca28:	dcf1      	bgt.n	800ca0e <_printf_float+0x40e>
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ca30:	e6da      	b.n	800c7e8 <_printf_float+0x1e8>
 800ca32:	f04f 0800 	mov.w	r8, #0
 800ca36:	f104 0a1a 	add.w	sl, r4, #26
 800ca3a:	e7f2      	b.n	800ca22 <_printf_float+0x422>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	4642      	mov	r2, r8
 800ca40:	e7df      	b.n	800ca02 <_printf_float+0x402>
 800ca42:	2301      	movs	r3, #1
 800ca44:	464a      	mov	r2, r9
 800ca46:	4631      	mov	r1, r6
 800ca48:	4628      	mov	r0, r5
 800ca4a:	47b8      	blx	r7
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	f43f ae36 	beq.w	800c6be <_printf_float+0xbe>
 800ca52:	f108 0801 	add.w	r8, r8, #1
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca5a:	1a5b      	subs	r3, r3, r1
 800ca5c:	4543      	cmp	r3, r8
 800ca5e:	dcf0      	bgt.n	800ca42 <_printf_float+0x442>
 800ca60:	e6f8      	b.n	800c854 <_printf_float+0x254>
 800ca62:	f04f 0800 	mov.w	r8, #0
 800ca66:	f104 0919 	add.w	r9, r4, #25
 800ca6a:	e7f4      	b.n	800ca56 <_printf_float+0x456>

0800ca6c <_printf_common>:
 800ca6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	4616      	mov	r6, r2
 800ca72:	4699      	mov	r9, r3
 800ca74:	688a      	ldr	r2, [r1, #8]
 800ca76:	690b      	ldr	r3, [r1, #16]
 800ca78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	bfb8      	it	lt
 800ca80:	4613      	movlt	r3, r2
 800ca82:	6033      	str	r3, [r6, #0]
 800ca84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca88:	4607      	mov	r7, r0
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	b10a      	cbz	r2, 800ca92 <_printf_common+0x26>
 800ca8e:	3301      	adds	r3, #1
 800ca90:	6033      	str	r3, [r6, #0]
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	0699      	lsls	r1, r3, #26
 800ca96:	bf42      	ittt	mi
 800ca98:	6833      	ldrmi	r3, [r6, #0]
 800ca9a:	3302      	addmi	r3, #2
 800ca9c:	6033      	strmi	r3, [r6, #0]
 800ca9e:	6825      	ldr	r5, [r4, #0]
 800caa0:	f015 0506 	ands.w	r5, r5, #6
 800caa4:	d106      	bne.n	800cab4 <_printf_common+0x48>
 800caa6:	f104 0a19 	add.w	sl, r4, #25
 800caaa:	68e3      	ldr	r3, [r4, #12]
 800caac:	6832      	ldr	r2, [r6, #0]
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	42ab      	cmp	r3, r5
 800cab2:	dc26      	bgt.n	800cb02 <_printf_common+0x96>
 800cab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cab8:	1e13      	subs	r3, r2, #0
 800caba:	6822      	ldr	r2, [r4, #0]
 800cabc:	bf18      	it	ne
 800cabe:	2301      	movne	r3, #1
 800cac0:	0692      	lsls	r2, r2, #26
 800cac2:	d42b      	bmi.n	800cb1c <_printf_common+0xb0>
 800cac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cac8:	4649      	mov	r1, r9
 800caca:	4638      	mov	r0, r7
 800cacc:	47c0      	blx	r8
 800cace:	3001      	adds	r0, #1
 800cad0:	d01e      	beq.n	800cb10 <_printf_common+0xa4>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	6922      	ldr	r2, [r4, #16]
 800cad6:	f003 0306 	and.w	r3, r3, #6
 800cada:	2b04      	cmp	r3, #4
 800cadc:	bf02      	ittt	eq
 800cade:	68e5      	ldreq	r5, [r4, #12]
 800cae0:	6833      	ldreq	r3, [r6, #0]
 800cae2:	1aed      	subeq	r5, r5, r3
 800cae4:	68a3      	ldr	r3, [r4, #8]
 800cae6:	bf0c      	ite	eq
 800cae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caec:	2500      	movne	r5, #0
 800caee:	4293      	cmp	r3, r2
 800caf0:	bfc4      	itt	gt
 800caf2:	1a9b      	subgt	r3, r3, r2
 800caf4:	18ed      	addgt	r5, r5, r3
 800caf6:	2600      	movs	r6, #0
 800caf8:	341a      	adds	r4, #26
 800cafa:	42b5      	cmp	r5, r6
 800cafc:	d11a      	bne.n	800cb34 <_printf_common+0xc8>
 800cafe:	2000      	movs	r0, #0
 800cb00:	e008      	b.n	800cb14 <_printf_common+0xa8>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4652      	mov	r2, sl
 800cb06:	4649      	mov	r1, r9
 800cb08:	4638      	mov	r0, r7
 800cb0a:	47c0      	blx	r8
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d103      	bne.n	800cb18 <_printf_common+0xac>
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295
 800cb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb18:	3501      	adds	r5, #1
 800cb1a:	e7c6      	b.n	800caaa <_printf_common+0x3e>
 800cb1c:	18e1      	adds	r1, r4, r3
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	2030      	movs	r0, #48	; 0x30
 800cb22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb26:	4422      	add	r2, r4
 800cb28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb30:	3302      	adds	r3, #2
 800cb32:	e7c7      	b.n	800cac4 <_printf_common+0x58>
 800cb34:	2301      	movs	r3, #1
 800cb36:	4622      	mov	r2, r4
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	47c0      	blx	r8
 800cb3e:	3001      	adds	r0, #1
 800cb40:	d0e6      	beq.n	800cb10 <_printf_common+0xa4>
 800cb42:	3601      	adds	r6, #1
 800cb44:	e7d9      	b.n	800cafa <_printf_common+0x8e>
	...

0800cb48 <_printf_i>:
 800cb48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4c:	7e0f      	ldrb	r7, [r1, #24]
 800cb4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb50:	2f78      	cmp	r7, #120	; 0x78
 800cb52:	4691      	mov	r9, r2
 800cb54:	4680      	mov	r8, r0
 800cb56:	460c      	mov	r4, r1
 800cb58:	469a      	mov	sl, r3
 800cb5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb5e:	d807      	bhi.n	800cb70 <_printf_i+0x28>
 800cb60:	2f62      	cmp	r7, #98	; 0x62
 800cb62:	d80a      	bhi.n	800cb7a <_printf_i+0x32>
 800cb64:	2f00      	cmp	r7, #0
 800cb66:	f000 80d4 	beq.w	800cd12 <_printf_i+0x1ca>
 800cb6a:	2f58      	cmp	r7, #88	; 0x58
 800cb6c:	f000 80c0 	beq.w	800ccf0 <_printf_i+0x1a8>
 800cb70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb78:	e03a      	b.n	800cbf0 <_printf_i+0xa8>
 800cb7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb7e:	2b15      	cmp	r3, #21
 800cb80:	d8f6      	bhi.n	800cb70 <_printf_i+0x28>
 800cb82:	a101      	add	r1, pc, #4	; (adr r1, 800cb88 <_printf_i+0x40>)
 800cb84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb88:	0800cbe1 	.word	0x0800cbe1
 800cb8c:	0800cbf5 	.word	0x0800cbf5
 800cb90:	0800cb71 	.word	0x0800cb71
 800cb94:	0800cb71 	.word	0x0800cb71
 800cb98:	0800cb71 	.word	0x0800cb71
 800cb9c:	0800cb71 	.word	0x0800cb71
 800cba0:	0800cbf5 	.word	0x0800cbf5
 800cba4:	0800cb71 	.word	0x0800cb71
 800cba8:	0800cb71 	.word	0x0800cb71
 800cbac:	0800cb71 	.word	0x0800cb71
 800cbb0:	0800cb71 	.word	0x0800cb71
 800cbb4:	0800ccf9 	.word	0x0800ccf9
 800cbb8:	0800cc21 	.word	0x0800cc21
 800cbbc:	0800ccb3 	.word	0x0800ccb3
 800cbc0:	0800cb71 	.word	0x0800cb71
 800cbc4:	0800cb71 	.word	0x0800cb71
 800cbc8:	0800cd1b 	.word	0x0800cd1b
 800cbcc:	0800cb71 	.word	0x0800cb71
 800cbd0:	0800cc21 	.word	0x0800cc21
 800cbd4:	0800cb71 	.word	0x0800cb71
 800cbd8:	0800cb71 	.word	0x0800cb71
 800cbdc:	0800ccbb 	.word	0x0800ccbb
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	1d1a      	adds	r2, r3, #4
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	602a      	str	r2, [r5, #0]
 800cbe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e09f      	b.n	800cd34 <_printf_i+0x1ec>
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	0607      	lsls	r7, r0, #24
 800cbfa:	f103 0104 	add.w	r1, r3, #4
 800cbfe:	6029      	str	r1, [r5, #0]
 800cc00:	d501      	bpl.n	800cc06 <_printf_i+0xbe>
 800cc02:	681e      	ldr	r6, [r3, #0]
 800cc04:	e003      	b.n	800cc0e <_printf_i+0xc6>
 800cc06:	0646      	lsls	r6, r0, #25
 800cc08:	d5fb      	bpl.n	800cc02 <_printf_i+0xba>
 800cc0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc0e:	2e00      	cmp	r6, #0
 800cc10:	da03      	bge.n	800cc1a <_printf_i+0xd2>
 800cc12:	232d      	movs	r3, #45	; 0x2d
 800cc14:	4276      	negs	r6, r6
 800cc16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc1a:	485a      	ldr	r0, [pc, #360]	; (800cd84 <_printf_i+0x23c>)
 800cc1c:	230a      	movs	r3, #10
 800cc1e:	e012      	b.n	800cc46 <_printf_i+0xfe>
 800cc20:	682b      	ldr	r3, [r5, #0]
 800cc22:	6820      	ldr	r0, [r4, #0]
 800cc24:	1d19      	adds	r1, r3, #4
 800cc26:	6029      	str	r1, [r5, #0]
 800cc28:	0605      	lsls	r5, r0, #24
 800cc2a:	d501      	bpl.n	800cc30 <_printf_i+0xe8>
 800cc2c:	681e      	ldr	r6, [r3, #0]
 800cc2e:	e002      	b.n	800cc36 <_printf_i+0xee>
 800cc30:	0641      	lsls	r1, r0, #25
 800cc32:	d5fb      	bpl.n	800cc2c <_printf_i+0xe4>
 800cc34:	881e      	ldrh	r6, [r3, #0]
 800cc36:	4853      	ldr	r0, [pc, #332]	; (800cd84 <_printf_i+0x23c>)
 800cc38:	2f6f      	cmp	r7, #111	; 0x6f
 800cc3a:	bf0c      	ite	eq
 800cc3c:	2308      	moveq	r3, #8
 800cc3e:	230a      	movne	r3, #10
 800cc40:	2100      	movs	r1, #0
 800cc42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc46:	6865      	ldr	r5, [r4, #4]
 800cc48:	60a5      	str	r5, [r4, #8]
 800cc4a:	2d00      	cmp	r5, #0
 800cc4c:	bfa2      	ittt	ge
 800cc4e:	6821      	ldrge	r1, [r4, #0]
 800cc50:	f021 0104 	bicge.w	r1, r1, #4
 800cc54:	6021      	strge	r1, [r4, #0]
 800cc56:	b90e      	cbnz	r6, 800cc5c <_printf_i+0x114>
 800cc58:	2d00      	cmp	r5, #0
 800cc5a:	d04b      	beq.n	800ccf4 <_printf_i+0x1ac>
 800cc5c:	4615      	mov	r5, r2
 800cc5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc62:	fb03 6711 	mls	r7, r3, r1, r6
 800cc66:	5dc7      	ldrb	r7, [r0, r7]
 800cc68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc6c:	4637      	mov	r7, r6
 800cc6e:	42bb      	cmp	r3, r7
 800cc70:	460e      	mov	r6, r1
 800cc72:	d9f4      	bls.n	800cc5e <_printf_i+0x116>
 800cc74:	2b08      	cmp	r3, #8
 800cc76:	d10b      	bne.n	800cc90 <_printf_i+0x148>
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	07de      	lsls	r6, r3, #31
 800cc7c:	d508      	bpl.n	800cc90 <_printf_i+0x148>
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	6861      	ldr	r1, [r4, #4]
 800cc82:	4299      	cmp	r1, r3
 800cc84:	bfde      	ittt	le
 800cc86:	2330      	movle	r3, #48	; 0x30
 800cc88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc90:	1b52      	subs	r2, r2, r5
 800cc92:	6122      	str	r2, [r4, #16]
 800cc94:	f8cd a000 	str.w	sl, [sp]
 800cc98:	464b      	mov	r3, r9
 800cc9a:	aa03      	add	r2, sp, #12
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4640      	mov	r0, r8
 800cca0:	f7ff fee4 	bl	800ca6c <_printf_common>
 800cca4:	3001      	adds	r0, #1
 800cca6:	d14a      	bne.n	800cd3e <_printf_i+0x1f6>
 800cca8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccac:	b004      	add	sp, #16
 800ccae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	f043 0320 	orr.w	r3, r3, #32
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	4833      	ldr	r0, [pc, #204]	; (800cd88 <_printf_i+0x240>)
 800ccbc:	2778      	movs	r7, #120	; 0x78
 800ccbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ccc2:	6823      	ldr	r3, [r4, #0]
 800ccc4:	6829      	ldr	r1, [r5, #0]
 800ccc6:	061f      	lsls	r7, r3, #24
 800ccc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cccc:	d402      	bmi.n	800ccd4 <_printf_i+0x18c>
 800ccce:	065f      	lsls	r7, r3, #25
 800ccd0:	bf48      	it	mi
 800ccd2:	b2b6      	uxthmi	r6, r6
 800ccd4:	07df      	lsls	r7, r3, #31
 800ccd6:	bf48      	it	mi
 800ccd8:	f043 0320 	orrmi.w	r3, r3, #32
 800ccdc:	6029      	str	r1, [r5, #0]
 800ccde:	bf48      	it	mi
 800cce0:	6023      	strmi	r3, [r4, #0]
 800cce2:	b91e      	cbnz	r6, 800ccec <_printf_i+0x1a4>
 800cce4:	6823      	ldr	r3, [r4, #0]
 800cce6:	f023 0320 	bic.w	r3, r3, #32
 800ccea:	6023      	str	r3, [r4, #0]
 800ccec:	2310      	movs	r3, #16
 800ccee:	e7a7      	b.n	800cc40 <_printf_i+0xf8>
 800ccf0:	4824      	ldr	r0, [pc, #144]	; (800cd84 <_printf_i+0x23c>)
 800ccf2:	e7e4      	b.n	800ccbe <_printf_i+0x176>
 800ccf4:	4615      	mov	r5, r2
 800ccf6:	e7bd      	b.n	800cc74 <_printf_i+0x12c>
 800ccf8:	682b      	ldr	r3, [r5, #0]
 800ccfa:	6826      	ldr	r6, [r4, #0]
 800ccfc:	6961      	ldr	r1, [r4, #20]
 800ccfe:	1d18      	adds	r0, r3, #4
 800cd00:	6028      	str	r0, [r5, #0]
 800cd02:	0635      	lsls	r5, r6, #24
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	d501      	bpl.n	800cd0c <_printf_i+0x1c4>
 800cd08:	6019      	str	r1, [r3, #0]
 800cd0a:	e002      	b.n	800cd12 <_printf_i+0x1ca>
 800cd0c:	0670      	lsls	r0, r6, #25
 800cd0e:	d5fb      	bpl.n	800cd08 <_printf_i+0x1c0>
 800cd10:	8019      	strh	r1, [r3, #0]
 800cd12:	2300      	movs	r3, #0
 800cd14:	6123      	str	r3, [r4, #16]
 800cd16:	4615      	mov	r5, r2
 800cd18:	e7bc      	b.n	800cc94 <_printf_i+0x14c>
 800cd1a:	682b      	ldr	r3, [r5, #0]
 800cd1c:	1d1a      	adds	r2, r3, #4
 800cd1e:	602a      	str	r2, [r5, #0]
 800cd20:	681d      	ldr	r5, [r3, #0]
 800cd22:	6862      	ldr	r2, [r4, #4]
 800cd24:	2100      	movs	r1, #0
 800cd26:	4628      	mov	r0, r5
 800cd28:	f7f3 fa5a 	bl	80001e0 <memchr>
 800cd2c:	b108      	cbz	r0, 800cd32 <_printf_i+0x1ea>
 800cd2e:	1b40      	subs	r0, r0, r5
 800cd30:	6060      	str	r0, [r4, #4]
 800cd32:	6863      	ldr	r3, [r4, #4]
 800cd34:	6123      	str	r3, [r4, #16]
 800cd36:	2300      	movs	r3, #0
 800cd38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd3c:	e7aa      	b.n	800cc94 <_printf_i+0x14c>
 800cd3e:	6923      	ldr	r3, [r4, #16]
 800cd40:	462a      	mov	r2, r5
 800cd42:	4649      	mov	r1, r9
 800cd44:	4640      	mov	r0, r8
 800cd46:	47d0      	blx	sl
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d0ad      	beq.n	800cca8 <_printf_i+0x160>
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	079b      	lsls	r3, r3, #30
 800cd50:	d413      	bmi.n	800cd7a <_printf_i+0x232>
 800cd52:	68e0      	ldr	r0, [r4, #12]
 800cd54:	9b03      	ldr	r3, [sp, #12]
 800cd56:	4298      	cmp	r0, r3
 800cd58:	bfb8      	it	lt
 800cd5a:	4618      	movlt	r0, r3
 800cd5c:	e7a6      	b.n	800ccac <_printf_i+0x164>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	4632      	mov	r2, r6
 800cd62:	4649      	mov	r1, r9
 800cd64:	4640      	mov	r0, r8
 800cd66:	47d0      	blx	sl
 800cd68:	3001      	adds	r0, #1
 800cd6a:	d09d      	beq.n	800cca8 <_printf_i+0x160>
 800cd6c:	3501      	adds	r5, #1
 800cd6e:	68e3      	ldr	r3, [r4, #12]
 800cd70:	9903      	ldr	r1, [sp, #12]
 800cd72:	1a5b      	subs	r3, r3, r1
 800cd74:	42ab      	cmp	r3, r5
 800cd76:	dcf2      	bgt.n	800cd5e <_printf_i+0x216>
 800cd78:	e7eb      	b.n	800cd52 <_printf_i+0x20a>
 800cd7a:	2500      	movs	r5, #0
 800cd7c:	f104 0619 	add.w	r6, r4, #25
 800cd80:	e7f5      	b.n	800cd6e <_printf_i+0x226>
 800cd82:	bf00      	nop
 800cd84:	080100c6 	.word	0x080100c6
 800cd88:	080100d7 	.word	0x080100d7

0800cd8c <std>:
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	b510      	push	{r4, lr}
 800cd90:	4604      	mov	r4, r0
 800cd92:	e9c0 3300 	strd	r3, r3, [r0]
 800cd96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd9a:	6083      	str	r3, [r0, #8]
 800cd9c:	8181      	strh	r1, [r0, #12]
 800cd9e:	6643      	str	r3, [r0, #100]	; 0x64
 800cda0:	81c2      	strh	r2, [r0, #14]
 800cda2:	6183      	str	r3, [r0, #24]
 800cda4:	4619      	mov	r1, r3
 800cda6:	2208      	movs	r2, #8
 800cda8:	305c      	adds	r0, #92	; 0x5c
 800cdaa:	f000 f9e5 	bl	800d178 <memset>
 800cdae:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <std+0x38>)
 800cdb0:	6263      	str	r3, [r4, #36]	; 0x24
 800cdb2:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <std+0x3c>)
 800cdb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdb6:	4b05      	ldr	r3, [pc, #20]	; (800cdcc <std+0x40>)
 800cdb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdba:	4b05      	ldr	r3, [pc, #20]	; (800cdd0 <std+0x44>)
 800cdbc:	6224      	str	r4, [r4, #32]
 800cdbe:	6323      	str	r3, [r4, #48]	; 0x30
 800cdc0:	bd10      	pop	{r4, pc}
 800cdc2:	bf00      	nop
 800cdc4:	0800cfc9 	.word	0x0800cfc9
 800cdc8:	0800cfeb 	.word	0x0800cfeb
 800cdcc:	0800d023 	.word	0x0800d023
 800cdd0:	0800d047 	.word	0x0800d047

0800cdd4 <stdio_exit_handler>:
 800cdd4:	4a02      	ldr	r2, [pc, #8]	; (800cde0 <stdio_exit_handler+0xc>)
 800cdd6:	4903      	ldr	r1, [pc, #12]	; (800cde4 <stdio_exit_handler+0x10>)
 800cdd8:	4803      	ldr	r0, [pc, #12]	; (800cde8 <stdio_exit_handler+0x14>)
 800cdda:	f000 b869 	b.w	800ceb0 <_fwalk_sglue>
 800cdde:	bf00      	nop
 800cde0:	200000fc 	.word	0x200000fc
 800cde4:	0800ebf9 	.word	0x0800ebf9
 800cde8:	20000108 	.word	0x20000108

0800cdec <cleanup_stdio>:
 800cdec:	6841      	ldr	r1, [r0, #4]
 800cdee:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <cleanup_stdio+0x34>)
 800cdf0:	4299      	cmp	r1, r3
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	d001      	beq.n	800cdfc <cleanup_stdio+0x10>
 800cdf8:	f001 fefe 	bl	800ebf8 <_fflush_r>
 800cdfc:	68a1      	ldr	r1, [r4, #8]
 800cdfe:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <cleanup_stdio+0x38>)
 800ce00:	4299      	cmp	r1, r3
 800ce02:	d002      	beq.n	800ce0a <cleanup_stdio+0x1e>
 800ce04:	4620      	mov	r0, r4
 800ce06:	f001 fef7 	bl	800ebf8 <_fflush_r>
 800ce0a:	68e1      	ldr	r1, [r4, #12]
 800ce0c:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <cleanup_stdio+0x3c>)
 800ce0e:	4299      	cmp	r1, r3
 800ce10:	d004      	beq.n	800ce1c <cleanup_stdio+0x30>
 800ce12:	4620      	mov	r0, r4
 800ce14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce18:	f001 beee 	b.w	800ebf8 <_fflush_r>
 800ce1c:	bd10      	pop	{r4, pc}
 800ce1e:	bf00      	nop
 800ce20:	20004b20 	.word	0x20004b20
 800ce24:	20004b88 	.word	0x20004b88
 800ce28:	20004bf0 	.word	0x20004bf0

0800ce2c <global_stdio_init.part.0>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <global_stdio_init.part.0+0x30>)
 800ce30:	4c0b      	ldr	r4, [pc, #44]	; (800ce60 <global_stdio_init.part.0+0x34>)
 800ce32:	4a0c      	ldr	r2, [pc, #48]	; (800ce64 <global_stdio_init.part.0+0x38>)
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	4620      	mov	r0, r4
 800ce38:	2200      	movs	r2, #0
 800ce3a:	2104      	movs	r1, #4
 800ce3c:	f7ff ffa6 	bl	800cd8c <std>
 800ce40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ce44:	2201      	movs	r2, #1
 800ce46:	2109      	movs	r1, #9
 800ce48:	f7ff ffa0 	bl	800cd8c <std>
 800ce4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ce50:	2202      	movs	r2, #2
 800ce52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce56:	2112      	movs	r1, #18
 800ce58:	f7ff bf98 	b.w	800cd8c <std>
 800ce5c:	20004c58 	.word	0x20004c58
 800ce60:	20004b20 	.word	0x20004b20
 800ce64:	0800cdd5 	.word	0x0800cdd5

0800ce68 <__sfp_lock_acquire>:
 800ce68:	4801      	ldr	r0, [pc, #4]	; (800ce70 <__sfp_lock_acquire+0x8>)
 800ce6a:	f000 ba01 	b.w	800d270 <__retarget_lock_acquire_recursive>
 800ce6e:	bf00      	nop
 800ce70:	20004c61 	.word	0x20004c61

0800ce74 <__sfp_lock_release>:
 800ce74:	4801      	ldr	r0, [pc, #4]	; (800ce7c <__sfp_lock_release+0x8>)
 800ce76:	f000 b9fc 	b.w	800d272 <__retarget_lock_release_recursive>
 800ce7a:	bf00      	nop
 800ce7c:	20004c61 	.word	0x20004c61

0800ce80 <__sinit>:
 800ce80:	b510      	push	{r4, lr}
 800ce82:	4604      	mov	r4, r0
 800ce84:	f7ff fff0 	bl	800ce68 <__sfp_lock_acquire>
 800ce88:	6a23      	ldr	r3, [r4, #32]
 800ce8a:	b11b      	cbz	r3, 800ce94 <__sinit+0x14>
 800ce8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce90:	f7ff bff0 	b.w	800ce74 <__sfp_lock_release>
 800ce94:	4b04      	ldr	r3, [pc, #16]	; (800cea8 <__sinit+0x28>)
 800ce96:	6223      	str	r3, [r4, #32]
 800ce98:	4b04      	ldr	r3, [pc, #16]	; (800ceac <__sinit+0x2c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1f5      	bne.n	800ce8c <__sinit+0xc>
 800cea0:	f7ff ffc4 	bl	800ce2c <global_stdio_init.part.0>
 800cea4:	e7f2      	b.n	800ce8c <__sinit+0xc>
 800cea6:	bf00      	nop
 800cea8:	0800cded 	.word	0x0800cded
 800ceac:	20004c58 	.word	0x20004c58

0800ceb0 <_fwalk_sglue>:
 800ceb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceb4:	4607      	mov	r7, r0
 800ceb6:	4688      	mov	r8, r1
 800ceb8:	4614      	mov	r4, r2
 800ceba:	2600      	movs	r6, #0
 800cebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cec0:	f1b9 0901 	subs.w	r9, r9, #1
 800cec4:	d505      	bpl.n	800ced2 <_fwalk_sglue+0x22>
 800cec6:	6824      	ldr	r4, [r4, #0]
 800cec8:	2c00      	cmp	r4, #0
 800ceca:	d1f7      	bne.n	800cebc <_fwalk_sglue+0xc>
 800cecc:	4630      	mov	r0, r6
 800cece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ced2:	89ab      	ldrh	r3, [r5, #12]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d907      	bls.n	800cee8 <_fwalk_sglue+0x38>
 800ced8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cedc:	3301      	adds	r3, #1
 800cede:	d003      	beq.n	800cee8 <_fwalk_sglue+0x38>
 800cee0:	4629      	mov	r1, r5
 800cee2:	4638      	mov	r0, r7
 800cee4:	47c0      	blx	r8
 800cee6:	4306      	orrs	r6, r0
 800cee8:	3568      	adds	r5, #104	; 0x68
 800ceea:	e7e9      	b.n	800cec0 <_fwalk_sglue+0x10>

0800ceec <iprintf>:
 800ceec:	b40f      	push	{r0, r1, r2, r3}
 800ceee:	b507      	push	{r0, r1, r2, lr}
 800cef0:	4906      	ldr	r1, [pc, #24]	; (800cf0c <iprintf+0x20>)
 800cef2:	ab04      	add	r3, sp, #16
 800cef4:	6808      	ldr	r0, [r1, #0]
 800cef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefa:	6881      	ldr	r1, [r0, #8]
 800cefc:	9301      	str	r3, [sp, #4]
 800cefe:	f001 fcdb 	bl	800e8b8 <_vfiprintf_r>
 800cf02:	b003      	add	sp, #12
 800cf04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf08:	b004      	add	sp, #16
 800cf0a:	4770      	bx	lr
 800cf0c:	20000154 	.word	0x20000154

0800cf10 <_puts_r>:
 800cf10:	6a03      	ldr	r3, [r0, #32]
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	6884      	ldr	r4, [r0, #8]
 800cf16:	4605      	mov	r5, r0
 800cf18:	460e      	mov	r6, r1
 800cf1a:	b90b      	cbnz	r3, 800cf20 <_puts_r+0x10>
 800cf1c:	f7ff ffb0 	bl	800ce80 <__sinit>
 800cf20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf22:	07db      	lsls	r3, r3, #31
 800cf24:	d405      	bmi.n	800cf32 <_puts_r+0x22>
 800cf26:	89a3      	ldrh	r3, [r4, #12]
 800cf28:	0598      	lsls	r0, r3, #22
 800cf2a:	d402      	bmi.n	800cf32 <_puts_r+0x22>
 800cf2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf2e:	f000 f99f 	bl	800d270 <__retarget_lock_acquire_recursive>
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	0719      	lsls	r1, r3, #28
 800cf36:	d513      	bpl.n	800cf60 <_puts_r+0x50>
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	b18b      	cbz	r3, 800cf60 <_puts_r+0x50>
 800cf3c:	3e01      	subs	r6, #1
 800cf3e:	68a3      	ldr	r3, [r4, #8]
 800cf40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf44:	3b01      	subs	r3, #1
 800cf46:	60a3      	str	r3, [r4, #8]
 800cf48:	b9e9      	cbnz	r1, 800cf86 <_puts_r+0x76>
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da2e      	bge.n	800cfac <_puts_r+0x9c>
 800cf4e:	4622      	mov	r2, r4
 800cf50:	210a      	movs	r1, #10
 800cf52:	4628      	mov	r0, r5
 800cf54:	f000 f87b 	bl	800d04e <__swbuf_r>
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d007      	beq.n	800cf6c <_puts_r+0x5c>
 800cf5c:	250a      	movs	r5, #10
 800cf5e:	e007      	b.n	800cf70 <_puts_r+0x60>
 800cf60:	4621      	mov	r1, r4
 800cf62:	4628      	mov	r0, r5
 800cf64:	f000 f8b0 	bl	800d0c8 <__swsetup_r>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0e7      	beq.n	800cf3c <_puts_r+0x2c>
 800cf6c:	f04f 35ff 	mov.w	r5, #4294967295
 800cf70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf72:	07da      	lsls	r2, r3, #31
 800cf74:	d405      	bmi.n	800cf82 <_puts_r+0x72>
 800cf76:	89a3      	ldrh	r3, [r4, #12]
 800cf78:	059b      	lsls	r3, r3, #22
 800cf7a:	d402      	bmi.n	800cf82 <_puts_r+0x72>
 800cf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf7e:	f000 f978 	bl	800d272 <__retarget_lock_release_recursive>
 800cf82:	4628      	mov	r0, r5
 800cf84:	bd70      	pop	{r4, r5, r6, pc}
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da04      	bge.n	800cf94 <_puts_r+0x84>
 800cf8a:	69a2      	ldr	r2, [r4, #24]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	dc06      	bgt.n	800cf9e <_puts_r+0x8e>
 800cf90:	290a      	cmp	r1, #10
 800cf92:	d004      	beq.n	800cf9e <_puts_r+0x8e>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	6022      	str	r2, [r4, #0]
 800cf9a:	7019      	strb	r1, [r3, #0]
 800cf9c:	e7cf      	b.n	800cf3e <_puts_r+0x2e>
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f000 f854 	bl	800d04e <__swbuf_r>
 800cfa6:	3001      	adds	r0, #1
 800cfa8:	d1c9      	bne.n	800cf3e <_puts_r+0x2e>
 800cfaa:	e7df      	b.n	800cf6c <_puts_r+0x5c>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	250a      	movs	r5, #10
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	6022      	str	r2, [r4, #0]
 800cfb4:	701d      	strb	r5, [r3, #0]
 800cfb6:	e7db      	b.n	800cf70 <_puts_r+0x60>

0800cfb8 <puts>:
 800cfb8:	4b02      	ldr	r3, [pc, #8]	; (800cfc4 <puts+0xc>)
 800cfba:	4601      	mov	r1, r0
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	f7ff bfa7 	b.w	800cf10 <_puts_r>
 800cfc2:	bf00      	nop
 800cfc4:	20000154 	.word	0x20000154

0800cfc8 <__sread>:
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	460c      	mov	r4, r1
 800cfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd0:	f000 f900 	bl	800d1d4 <_read_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	bfab      	itete	ge
 800cfd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfda:	89a3      	ldrhlt	r3, [r4, #12]
 800cfdc:	181b      	addge	r3, r3, r0
 800cfde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cfe2:	bfac      	ite	ge
 800cfe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cfe6:	81a3      	strhlt	r3, [r4, #12]
 800cfe8:	bd10      	pop	{r4, pc}

0800cfea <__swrite>:
 800cfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfee:	461f      	mov	r7, r3
 800cff0:	898b      	ldrh	r3, [r1, #12]
 800cff2:	05db      	lsls	r3, r3, #23
 800cff4:	4605      	mov	r5, r0
 800cff6:	460c      	mov	r4, r1
 800cff8:	4616      	mov	r6, r2
 800cffa:	d505      	bpl.n	800d008 <__swrite+0x1e>
 800cffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d000:	2302      	movs	r3, #2
 800d002:	2200      	movs	r2, #0
 800d004:	f000 f8d4 	bl	800d1b0 <_lseek_r>
 800d008:	89a3      	ldrh	r3, [r4, #12]
 800d00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d012:	81a3      	strh	r3, [r4, #12]
 800d014:	4632      	mov	r2, r6
 800d016:	463b      	mov	r3, r7
 800d018:	4628      	mov	r0, r5
 800d01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d01e:	f000 b8eb 	b.w	800d1f8 <_write_r>

0800d022 <__sseek>:
 800d022:	b510      	push	{r4, lr}
 800d024:	460c      	mov	r4, r1
 800d026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02a:	f000 f8c1 	bl	800d1b0 <_lseek_r>
 800d02e:	1c43      	adds	r3, r0, #1
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	bf15      	itete	ne
 800d034:	6560      	strne	r0, [r4, #84]	; 0x54
 800d036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d03e:	81a3      	strheq	r3, [r4, #12]
 800d040:	bf18      	it	ne
 800d042:	81a3      	strhne	r3, [r4, #12]
 800d044:	bd10      	pop	{r4, pc}

0800d046 <__sclose>:
 800d046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04a:	f000 b8a1 	b.w	800d190 <_close_r>

0800d04e <__swbuf_r>:
 800d04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d050:	460e      	mov	r6, r1
 800d052:	4614      	mov	r4, r2
 800d054:	4605      	mov	r5, r0
 800d056:	b118      	cbz	r0, 800d060 <__swbuf_r+0x12>
 800d058:	6a03      	ldr	r3, [r0, #32]
 800d05a:	b90b      	cbnz	r3, 800d060 <__swbuf_r+0x12>
 800d05c:	f7ff ff10 	bl	800ce80 <__sinit>
 800d060:	69a3      	ldr	r3, [r4, #24]
 800d062:	60a3      	str	r3, [r4, #8]
 800d064:	89a3      	ldrh	r3, [r4, #12]
 800d066:	071a      	lsls	r2, r3, #28
 800d068:	d525      	bpl.n	800d0b6 <__swbuf_r+0x68>
 800d06a:	6923      	ldr	r3, [r4, #16]
 800d06c:	b31b      	cbz	r3, 800d0b6 <__swbuf_r+0x68>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	1a98      	subs	r0, r3, r2
 800d074:	6963      	ldr	r3, [r4, #20]
 800d076:	b2f6      	uxtb	r6, r6
 800d078:	4283      	cmp	r3, r0
 800d07a:	4637      	mov	r7, r6
 800d07c:	dc04      	bgt.n	800d088 <__swbuf_r+0x3a>
 800d07e:	4621      	mov	r1, r4
 800d080:	4628      	mov	r0, r5
 800d082:	f001 fdb9 	bl	800ebf8 <_fflush_r>
 800d086:	b9e0      	cbnz	r0, 800d0c2 <__swbuf_r+0x74>
 800d088:	68a3      	ldr	r3, [r4, #8]
 800d08a:	3b01      	subs	r3, #1
 800d08c:	60a3      	str	r3, [r4, #8]
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	6022      	str	r2, [r4, #0]
 800d094:	701e      	strb	r6, [r3, #0]
 800d096:	6962      	ldr	r2, [r4, #20]
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d004      	beq.n	800d0a8 <__swbuf_r+0x5a>
 800d09e:	89a3      	ldrh	r3, [r4, #12]
 800d0a0:	07db      	lsls	r3, r3, #31
 800d0a2:	d506      	bpl.n	800d0b2 <__swbuf_r+0x64>
 800d0a4:	2e0a      	cmp	r6, #10
 800d0a6:	d104      	bne.n	800d0b2 <__swbuf_r+0x64>
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f001 fda4 	bl	800ebf8 <_fflush_r>
 800d0b0:	b938      	cbnz	r0, 800d0c2 <__swbuf_r+0x74>
 800d0b2:	4638      	mov	r0, r7
 800d0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f000 f805 	bl	800d0c8 <__swsetup_r>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0d5      	beq.n	800d06e <__swbuf_r+0x20>
 800d0c2:	f04f 37ff 	mov.w	r7, #4294967295
 800d0c6:	e7f4      	b.n	800d0b2 <__swbuf_r+0x64>

0800d0c8 <__swsetup_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4b2a      	ldr	r3, [pc, #168]	; (800d174 <__swsetup_r+0xac>)
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	6818      	ldr	r0, [r3, #0]
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	b118      	cbz	r0, 800d0dc <__swsetup_r+0x14>
 800d0d4:	6a03      	ldr	r3, [r0, #32]
 800d0d6:	b90b      	cbnz	r3, 800d0dc <__swsetup_r+0x14>
 800d0d8:	f7ff fed2 	bl	800ce80 <__sinit>
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0e2:	0718      	lsls	r0, r3, #28
 800d0e4:	d422      	bmi.n	800d12c <__swsetup_r+0x64>
 800d0e6:	06d9      	lsls	r1, r3, #27
 800d0e8:	d407      	bmi.n	800d0fa <__swsetup_r+0x32>
 800d0ea:	2309      	movs	r3, #9
 800d0ec:	602b      	str	r3, [r5, #0]
 800d0ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0f2:	81a3      	strh	r3, [r4, #12]
 800d0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f8:	e034      	b.n	800d164 <__swsetup_r+0x9c>
 800d0fa:	0758      	lsls	r0, r3, #29
 800d0fc:	d512      	bpl.n	800d124 <__swsetup_r+0x5c>
 800d0fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d100:	b141      	cbz	r1, 800d114 <__swsetup_r+0x4c>
 800d102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d106:	4299      	cmp	r1, r3
 800d108:	d002      	beq.n	800d110 <__swsetup_r+0x48>
 800d10a:	4628      	mov	r0, r5
 800d10c:	f000 ff2e 	bl	800df6c <_free_r>
 800d110:	2300      	movs	r3, #0
 800d112:	6363      	str	r3, [r4, #52]	; 0x34
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d11a:	81a3      	strh	r3, [r4, #12]
 800d11c:	2300      	movs	r3, #0
 800d11e:	6063      	str	r3, [r4, #4]
 800d120:	6923      	ldr	r3, [r4, #16]
 800d122:	6023      	str	r3, [r4, #0]
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	f043 0308 	orr.w	r3, r3, #8
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	b94b      	cbnz	r3, 800d144 <__swsetup_r+0x7c>
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d13a:	d003      	beq.n	800d144 <__swsetup_r+0x7c>
 800d13c:	4621      	mov	r1, r4
 800d13e:	4628      	mov	r0, r5
 800d140:	f001 fda8 	bl	800ec94 <__smakebuf_r>
 800d144:	89a0      	ldrh	r0, [r4, #12]
 800d146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d14a:	f010 0301 	ands.w	r3, r0, #1
 800d14e:	d00a      	beq.n	800d166 <__swsetup_r+0x9e>
 800d150:	2300      	movs	r3, #0
 800d152:	60a3      	str	r3, [r4, #8]
 800d154:	6963      	ldr	r3, [r4, #20]
 800d156:	425b      	negs	r3, r3
 800d158:	61a3      	str	r3, [r4, #24]
 800d15a:	6923      	ldr	r3, [r4, #16]
 800d15c:	b943      	cbnz	r3, 800d170 <__swsetup_r+0xa8>
 800d15e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d162:	d1c4      	bne.n	800d0ee <__swsetup_r+0x26>
 800d164:	bd38      	pop	{r3, r4, r5, pc}
 800d166:	0781      	lsls	r1, r0, #30
 800d168:	bf58      	it	pl
 800d16a:	6963      	ldrpl	r3, [r4, #20]
 800d16c:	60a3      	str	r3, [r4, #8]
 800d16e:	e7f4      	b.n	800d15a <__swsetup_r+0x92>
 800d170:	2000      	movs	r0, #0
 800d172:	e7f7      	b.n	800d164 <__swsetup_r+0x9c>
 800d174:	20000154 	.word	0x20000154

0800d178 <memset>:
 800d178:	4402      	add	r2, r0
 800d17a:	4603      	mov	r3, r0
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d100      	bne.n	800d182 <memset+0xa>
 800d180:	4770      	bx	lr
 800d182:	f803 1b01 	strb.w	r1, [r3], #1
 800d186:	e7f9      	b.n	800d17c <memset+0x4>

0800d188 <_localeconv_r>:
 800d188:	4800      	ldr	r0, [pc, #0]	; (800d18c <_localeconv_r+0x4>)
 800d18a:	4770      	bx	lr
 800d18c:	20000248 	.word	0x20000248

0800d190 <_close_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d06      	ldr	r5, [pc, #24]	; (800d1ac <_close_r+0x1c>)
 800d194:	2300      	movs	r3, #0
 800d196:	4604      	mov	r4, r0
 800d198:	4608      	mov	r0, r1
 800d19a:	602b      	str	r3, [r5, #0]
 800d19c:	f7f4 faff 	bl	800179e <_close>
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	d102      	bne.n	800d1aa <_close_r+0x1a>
 800d1a4:	682b      	ldr	r3, [r5, #0]
 800d1a6:	b103      	cbz	r3, 800d1aa <_close_r+0x1a>
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	20004c5c 	.word	0x20004c5c

0800d1b0 <_lseek_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4d07      	ldr	r5, [pc, #28]	; (800d1d0 <_lseek_r+0x20>)
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	4608      	mov	r0, r1
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	602a      	str	r2, [r5, #0]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	f7f4 fb14 	bl	80017ec <_lseek>
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	d102      	bne.n	800d1ce <_lseek_r+0x1e>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	b103      	cbz	r3, 800d1ce <_lseek_r+0x1e>
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	20004c5c 	.word	0x20004c5c

0800d1d4 <_read_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d07      	ldr	r5, [pc, #28]	; (800d1f4 <_read_r+0x20>)
 800d1d8:	4604      	mov	r4, r0
 800d1da:	4608      	mov	r0, r1
 800d1dc:	4611      	mov	r1, r2
 800d1de:	2200      	movs	r2, #0
 800d1e0:	602a      	str	r2, [r5, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f7f4 faa2 	bl	800172c <_read>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_read_r+0x1e>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_read_r+0x1e>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	20004c5c 	.word	0x20004c5c

0800d1f8 <_write_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d07      	ldr	r5, [pc, #28]	; (800d218 <_write_r+0x20>)
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	4608      	mov	r0, r1
 800d200:	4611      	mov	r1, r2
 800d202:	2200      	movs	r2, #0
 800d204:	602a      	str	r2, [r5, #0]
 800d206:	461a      	mov	r2, r3
 800d208:	f7f4 faad 	bl	8001766 <_write>
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d102      	bne.n	800d216 <_write_r+0x1e>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	b103      	cbz	r3, 800d216 <_write_r+0x1e>
 800d214:	6023      	str	r3, [r4, #0]
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	20004c5c 	.word	0x20004c5c

0800d21c <__errno>:
 800d21c:	4b01      	ldr	r3, [pc, #4]	; (800d224 <__errno+0x8>)
 800d21e:	6818      	ldr	r0, [r3, #0]
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	20000154 	.word	0x20000154

0800d228 <__libc_init_array>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	4d0d      	ldr	r5, [pc, #52]	; (800d260 <__libc_init_array+0x38>)
 800d22c:	4c0d      	ldr	r4, [pc, #52]	; (800d264 <__libc_init_array+0x3c>)
 800d22e:	1b64      	subs	r4, r4, r5
 800d230:	10a4      	asrs	r4, r4, #2
 800d232:	2600      	movs	r6, #0
 800d234:	42a6      	cmp	r6, r4
 800d236:	d109      	bne.n	800d24c <__libc_init_array+0x24>
 800d238:	4d0b      	ldr	r5, [pc, #44]	; (800d268 <__libc_init_array+0x40>)
 800d23a:	4c0c      	ldr	r4, [pc, #48]	; (800d26c <__libc_init_array+0x44>)
 800d23c:	f002 fdb0 	bl	800fda0 <_init>
 800d240:	1b64      	subs	r4, r4, r5
 800d242:	10a4      	asrs	r4, r4, #2
 800d244:	2600      	movs	r6, #0
 800d246:	42a6      	cmp	r6, r4
 800d248:	d105      	bne.n	800d256 <__libc_init_array+0x2e>
 800d24a:	bd70      	pop	{r4, r5, r6, pc}
 800d24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d250:	4798      	blx	r3
 800d252:	3601      	adds	r6, #1
 800d254:	e7ee      	b.n	800d234 <__libc_init_array+0xc>
 800d256:	f855 3b04 	ldr.w	r3, [r5], #4
 800d25a:	4798      	blx	r3
 800d25c:	3601      	adds	r6, #1
 800d25e:	e7f2      	b.n	800d246 <__libc_init_array+0x1e>
 800d260:	08010460 	.word	0x08010460
 800d264:	08010460 	.word	0x08010460
 800d268:	08010460 	.word	0x08010460
 800d26c:	08010464 	.word	0x08010464

0800d270 <__retarget_lock_acquire_recursive>:
 800d270:	4770      	bx	lr

0800d272 <__retarget_lock_release_recursive>:
 800d272:	4770      	bx	lr

0800d274 <quorem>:
 800d274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	6903      	ldr	r3, [r0, #16]
 800d27a:	690c      	ldr	r4, [r1, #16]
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	4607      	mov	r7, r0
 800d280:	db7e      	blt.n	800d380 <quorem+0x10c>
 800d282:	3c01      	subs	r4, #1
 800d284:	f101 0814 	add.w	r8, r1, #20
 800d288:	f100 0514 	add.w	r5, r0, #20
 800d28c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d29a:	3301      	adds	r3, #1
 800d29c:	429a      	cmp	r2, r3
 800d29e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2aa:	d331      	bcc.n	800d310 <quorem+0x9c>
 800d2ac:	f04f 0e00 	mov.w	lr, #0
 800d2b0:	4640      	mov	r0, r8
 800d2b2:	46ac      	mov	ip, r5
 800d2b4:	46f2      	mov	sl, lr
 800d2b6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2ba:	b293      	uxth	r3, r2
 800d2bc:	fb06 e303 	mla	r3, r6, r3, lr
 800d2c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2c4:	0c1a      	lsrs	r2, r3, #16
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	ebaa 0303 	sub.w	r3, sl, r3
 800d2cc:	f8dc a000 	ldr.w	sl, [ip]
 800d2d0:	fa13 f38a 	uxtah	r3, r3, sl
 800d2d4:	fb06 220e 	mla	r2, r6, lr, r2
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	9b00      	ldr	r3, [sp, #0]
 800d2dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2e0:	b292      	uxth	r2, r2
 800d2e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d2e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800d2ee:	4581      	cmp	r9, r0
 800d2f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2f4:	f84c 3b04 	str.w	r3, [ip], #4
 800d2f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d2fc:	d2db      	bcs.n	800d2b6 <quorem+0x42>
 800d2fe:	f855 300b 	ldr.w	r3, [r5, fp]
 800d302:	b92b      	cbnz	r3, 800d310 <quorem+0x9c>
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	3b04      	subs	r3, #4
 800d308:	429d      	cmp	r5, r3
 800d30a:	461a      	mov	r2, r3
 800d30c:	d32c      	bcc.n	800d368 <quorem+0xf4>
 800d30e:	613c      	str	r4, [r7, #16]
 800d310:	4638      	mov	r0, r7
 800d312:	f001 f9a7 	bl	800e664 <__mcmp>
 800d316:	2800      	cmp	r0, #0
 800d318:	db22      	blt.n	800d360 <quorem+0xec>
 800d31a:	3601      	adds	r6, #1
 800d31c:	4629      	mov	r1, r5
 800d31e:	2000      	movs	r0, #0
 800d320:	f858 2b04 	ldr.w	r2, [r8], #4
 800d324:	f8d1 c000 	ldr.w	ip, [r1]
 800d328:	b293      	uxth	r3, r2
 800d32a:	1ac3      	subs	r3, r0, r3
 800d32c:	0c12      	lsrs	r2, r2, #16
 800d32e:	fa13 f38c 	uxtah	r3, r3, ip
 800d332:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d336:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d340:	45c1      	cmp	r9, r8
 800d342:	f841 3b04 	str.w	r3, [r1], #4
 800d346:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d34a:	d2e9      	bcs.n	800d320 <quorem+0xac>
 800d34c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d350:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d354:	b922      	cbnz	r2, 800d360 <quorem+0xec>
 800d356:	3b04      	subs	r3, #4
 800d358:	429d      	cmp	r5, r3
 800d35a:	461a      	mov	r2, r3
 800d35c:	d30a      	bcc.n	800d374 <quorem+0x100>
 800d35e:	613c      	str	r4, [r7, #16]
 800d360:	4630      	mov	r0, r6
 800d362:	b003      	add	sp, #12
 800d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d368:	6812      	ldr	r2, [r2, #0]
 800d36a:	3b04      	subs	r3, #4
 800d36c:	2a00      	cmp	r2, #0
 800d36e:	d1ce      	bne.n	800d30e <quorem+0x9a>
 800d370:	3c01      	subs	r4, #1
 800d372:	e7c9      	b.n	800d308 <quorem+0x94>
 800d374:	6812      	ldr	r2, [r2, #0]
 800d376:	3b04      	subs	r3, #4
 800d378:	2a00      	cmp	r2, #0
 800d37a:	d1f0      	bne.n	800d35e <quorem+0xea>
 800d37c:	3c01      	subs	r4, #1
 800d37e:	e7eb      	b.n	800d358 <quorem+0xe4>
 800d380:	2000      	movs	r0, #0
 800d382:	e7ee      	b.n	800d362 <quorem+0xee>
 800d384:	0000      	movs	r0, r0
	...

0800d388 <_dtoa_r>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	ed2d 8b04 	vpush	{d8-d9}
 800d390:	69c5      	ldr	r5, [r0, #28]
 800d392:	b093      	sub	sp, #76	; 0x4c
 800d394:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d398:	ec57 6b10 	vmov	r6, r7, d0
 800d39c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3a0:	9107      	str	r1, [sp, #28]
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	920a      	str	r2, [sp, #40]	; 0x28
 800d3a6:	930d      	str	r3, [sp, #52]	; 0x34
 800d3a8:	b975      	cbnz	r5, 800d3c8 <_dtoa_r+0x40>
 800d3aa:	2010      	movs	r0, #16
 800d3ac:	f000 fe2a 	bl	800e004 <malloc>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	61e0      	str	r0, [r4, #28]
 800d3b4:	b920      	cbnz	r0, 800d3c0 <_dtoa_r+0x38>
 800d3b6:	4bae      	ldr	r3, [pc, #696]	; (800d670 <_dtoa_r+0x2e8>)
 800d3b8:	21ef      	movs	r1, #239	; 0xef
 800d3ba:	48ae      	ldr	r0, [pc, #696]	; (800d674 <_dtoa_r+0x2ec>)
 800d3bc:	f001 fce6 	bl	800ed8c <__assert_func>
 800d3c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3c4:	6005      	str	r5, [r0, #0]
 800d3c6:	60c5      	str	r5, [r0, #12]
 800d3c8:	69e3      	ldr	r3, [r4, #28]
 800d3ca:	6819      	ldr	r1, [r3, #0]
 800d3cc:	b151      	cbz	r1, 800d3e4 <_dtoa_r+0x5c>
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	604a      	str	r2, [r1, #4]
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4093      	lsls	r3, r2
 800d3d6:	608b      	str	r3, [r1, #8]
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f000 ff07 	bl	800e1ec <_Bfree>
 800d3de:	69e3      	ldr	r3, [r4, #28]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	1e3b      	subs	r3, r7, #0
 800d3e6:	bfbb      	ittet	lt
 800d3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3ec:	9303      	strlt	r3, [sp, #12]
 800d3ee:	2300      	movge	r3, #0
 800d3f0:	2201      	movlt	r2, #1
 800d3f2:	bfac      	ite	ge
 800d3f4:	f8c8 3000 	strge.w	r3, [r8]
 800d3f8:	f8c8 2000 	strlt.w	r2, [r8]
 800d3fc:	4b9e      	ldr	r3, [pc, #632]	; (800d678 <_dtoa_r+0x2f0>)
 800d3fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d402:	ea33 0308 	bics.w	r3, r3, r8
 800d406:	d11b      	bne.n	800d440 <_dtoa_r+0xb8>
 800d408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d40a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d40e:	6013      	str	r3, [r2, #0]
 800d410:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d414:	4333      	orrs	r3, r6
 800d416:	f000 8593 	beq.w	800df40 <_dtoa_r+0xbb8>
 800d41a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d41c:	b963      	cbnz	r3, 800d438 <_dtoa_r+0xb0>
 800d41e:	4b97      	ldr	r3, [pc, #604]	; (800d67c <_dtoa_r+0x2f4>)
 800d420:	e027      	b.n	800d472 <_dtoa_r+0xea>
 800d422:	4b97      	ldr	r3, [pc, #604]	; (800d680 <_dtoa_r+0x2f8>)
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	3308      	adds	r3, #8
 800d428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d42a:	6013      	str	r3, [r2, #0]
 800d42c:	9800      	ldr	r0, [sp, #0]
 800d42e:	b013      	add	sp, #76	; 0x4c
 800d430:	ecbd 8b04 	vpop	{d8-d9}
 800d434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d438:	4b90      	ldr	r3, [pc, #576]	; (800d67c <_dtoa_r+0x2f4>)
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	3303      	adds	r3, #3
 800d43e:	e7f3      	b.n	800d428 <_dtoa_r+0xa0>
 800d440:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d444:	2200      	movs	r2, #0
 800d446:	ec51 0b17 	vmov	r0, r1, d7
 800d44a:	eeb0 8a47 	vmov.f32	s16, s14
 800d44e:	eef0 8a67 	vmov.f32	s17, s15
 800d452:	2300      	movs	r3, #0
 800d454:	f7f3 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 800d458:	4681      	mov	r9, r0
 800d45a:	b160      	cbz	r0, 800d476 <_dtoa_r+0xee>
 800d45c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d45e:	2301      	movs	r3, #1
 800d460:	6013      	str	r3, [r2, #0]
 800d462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 8568 	beq.w	800df3a <_dtoa_r+0xbb2>
 800d46a:	4b86      	ldr	r3, [pc, #536]	; (800d684 <_dtoa_r+0x2fc>)
 800d46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	3b01      	subs	r3, #1
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	e7da      	b.n	800d42c <_dtoa_r+0xa4>
 800d476:	aa10      	add	r2, sp, #64	; 0x40
 800d478:	a911      	add	r1, sp, #68	; 0x44
 800d47a:	4620      	mov	r0, r4
 800d47c:	eeb0 0a48 	vmov.f32	s0, s16
 800d480:	eef0 0a68 	vmov.f32	s1, s17
 800d484:	f001 f994 	bl	800e7b0 <__d2b>
 800d488:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d48c:	4682      	mov	sl, r0
 800d48e:	2d00      	cmp	r5, #0
 800d490:	d07f      	beq.n	800d592 <_dtoa_r+0x20a>
 800d492:	ee18 3a90 	vmov	r3, s17
 800d496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d49a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d49e:	ec51 0b18 	vmov	r0, r1, d8
 800d4a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d4a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	4b75      	ldr	r3, [pc, #468]	; (800d688 <_dtoa_r+0x300>)
 800d4b4:	f7f2 fef0 	bl	8000298 <__aeabi_dsub>
 800d4b8:	a367      	add	r3, pc, #412	; (adr r3, 800d658 <_dtoa_r+0x2d0>)
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	f7f3 f8a3 	bl	8000608 <__aeabi_dmul>
 800d4c2:	a367      	add	r3, pc, #412	; (adr r3, 800d660 <_dtoa_r+0x2d8>)
 800d4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c8:	f7f2 fee8 	bl	800029c <__adddf3>
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	460f      	mov	r7, r1
 800d4d2:	f7f3 f82f 	bl	8000534 <__aeabi_i2d>
 800d4d6:	a364      	add	r3, pc, #400	; (adr r3, 800d668 <_dtoa_r+0x2e0>)
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	f7f3 f894 	bl	8000608 <__aeabi_dmul>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	f7f2 fed8 	bl	800029c <__adddf3>
 800d4ec:	4606      	mov	r6, r0
 800d4ee:	460f      	mov	r7, r1
 800d4f0:	f7f3 fb3a 	bl	8000b68 <__aeabi_d2iz>
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	4683      	mov	fp, r0
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	f7f3 faf5 	bl	8000aec <__aeabi_dcmplt>
 800d502:	b148      	cbz	r0, 800d518 <_dtoa_r+0x190>
 800d504:	4658      	mov	r0, fp
 800d506:	f7f3 f815 	bl	8000534 <__aeabi_i2d>
 800d50a:	4632      	mov	r2, r6
 800d50c:	463b      	mov	r3, r7
 800d50e:	f7f3 fae3 	bl	8000ad8 <__aeabi_dcmpeq>
 800d512:	b908      	cbnz	r0, 800d518 <_dtoa_r+0x190>
 800d514:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d518:	f1bb 0f16 	cmp.w	fp, #22
 800d51c:	d857      	bhi.n	800d5ce <_dtoa_r+0x246>
 800d51e:	4b5b      	ldr	r3, [pc, #364]	; (800d68c <_dtoa_r+0x304>)
 800d520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	ec51 0b18 	vmov	r0, r1, d8
 800d52c:	f7f3 fade 	bl	8000aec <__aeabi_dcmplt>
 800d530:	2800      	cmp	r0, #0
 800d532:	d04e      	beq.n	800d5d2 <_dtoa_r+0x24a>
 800d534:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d538:	2300      	movs	r3, #0
 800d53a:	930c      	str	r3, [sp, #48]	; 0x30
 800d53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d53e:	1b5b      	subs	r3, r3, r5
 800d540:	1e5a      	subs	r2, r3, #1
 800d542:	bf45      	ittet	mi
 800d544:	f1c3 0301 	rsbmi	r3, r3, #1
 800d548:	9305      	strmi	r3, [sp, #20]
 800d54a:	2300      	movpl	r3, #0
 800d54c:	2300      	movmi	r3, #0
 800d54e:	9206      	str	r2, [sp, #24]
 800d550:	bf54      	ite	pl
 800d552:	9305      	strpl	r3, [sp, #20]
 800d554:	9306      	strmi	r3, [sp, #24]
 800d556:	f1bb 0f00 	cmp.w	fp, #0
 800d55a:	db3c      	blt.n	800d5d6 <_dtoa_r+0x24e>
 800d55c:	9b06      	ldr	r3, [sp, #24]
 800d55e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d562:	445b      	add	r3, fp
 800d564:	9306      	str	r3, [sp, #24]
 800d566:	2300      	movs	r3, #0
 800d568:	9308      	str	r3, [sp, #32]
 800d56a:	9b07      	ldr	r3, [sp, #28]
 800d56c:	2b09      	cmp	r3, #9
 800d56e:	d868      	bhi.n	800d642 <_dtoa_r+0x2ba>
 800d570:	2b05      	cmp	r3, #5
 800d572:	bfc4      	itt	gt
 800d574:	3b04      	subgt	r3, #4
 800d576:	9307      	strgt	r3, [sp, #28]
 800d578:	9b07      	ldr	r3, [sp, #28]
 800d57a:	f1a3 0302 	sub.w	r3, r3, #2
 800d57e:	bfcc      	ite	gt
 800d580:	2500      	movgt	r5, #0
 800d582:	2501      	movle	r5, #1
 800d584:	2b03      	cmp	r3, #3
 800d586:	f200 8085 	bhi.w	800d694 <_dtoa_r+0x30c>
 800d58a:	e8df f003 	tbb	[pc, r3]
 800d58e:	3b2e      	.short	0x3b2e
 800d590:	5839      	.short	0x5839
 800d592:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d596:	441d      	add	r5, r3
 800d598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	bfc1      	itttt	gt
 800d5a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d5a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d5ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d5b0:	bfd6      	itet	le
 800d5b2:	f1c3 0320 	rsble	r3, r3, #32
 800d5b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d5ba:	fa06 f003 	lslle.w	r0, r6, r3
 800d5be:	f7f2 ffa9 	bl	8000514 <__aeabi_ui2d>
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d5c8:	3d01      	subs	r5, #1
 800d5ca:	920e      	str	r2, [sp, #56]	; 0x38
 800d5cc:	e76f      	b.n	800d4ae <_dtoa_r+0x126>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e7b3      	b.n	800d53a <_dtoa_r+0x1b2>
 800d5d2:	900c      	str	r0, [sp, #48]	; 0x30
 800d5d4:	e7b2      	b.n	800d53c <_dtoa_r+0x1b4>
 800d5d6:	9b05      	ldr	r3, [sp, #20]
 800d5d8:	eba3 030b 	sub.w	r3, r3, fp
 800d5dc:	9305      	str	r3, [sp, #20]
 800d5de:	f1cb 0300 	rsb	r3, fp, #0
 800d5e2:	9308      	str	r3, [sp, #32]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5e8:	e7bf      	b.n	800d56a <_dtoa_r+0x1e2>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	dc52      	bgt.n	800d69a <_dtoa_r+0x312>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	9304      	str	r3, [sp, #16]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	920a      	str	r2, [sp, #40]	; 0x28
 800d5fe:	e00b      	b.n	800d618 <_dtoa_r+0x290>
 800d600:	2301      	movs	r3, #1
 800d602:	e7f3      	b.n	800d5ec <_dtoa_r+0x264>
 800d604:	2300      	movs	r3, #0
 800d606:	9309      	str	r3, [sp, #36]	; 0x24
 800d608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d60a:	445b      	add	r3, fp
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	3301      	adds	r3, #1
 800d610:	2b01      	cmp	r3, #1
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	bfb8      	it	lt
 800d616:	2301      	movlt	r3, #1
 800d618:	69e0      	ldr	r0, [r4, #28]
 800d61a:	2100      	movs	r1, #0
 800d61c:	2204      	movs	r2, #4
 800d61e:	f102 0614 	add.w	r6, r2, #20
 800d622:	429e      	cmp	r6, r3
 800d624:	d93d      	bls.n	800d6a2 <_dtoa_r+0x31a>
 800d626:	6041      	str	r1, [r0, #4]
 800d628:	4620      	mov	r0, r4
 800d62a:	f000 fd9f 	bl	800e16c <_Balloc>
 800d62e:	9000      	str	r0, [sp, #0]
 800d630:	2800      	cmp	r0, #0
 800d632:	d139      	bne.n	800d6a8 <_dtoa_r+0x320>
 800d634:	4b16      	ldr	r3, [pc, #88]	; (800d690 <_dtoa_r+0x308>)
 800d636:	4602      	mov	r2, r0
 800d638:	f240 11af 	movw	r1, #431	; 0x1af
 800d63c:	e6bd      	b.n	800d3ba <_dtoa_r+0x32>
 800d63e:	2301      	movs	r3, #1
 800d640:	e7e1      	b.n	800d606 <_dtoa_r+0x27e>
 800d642:	2501      	movs	r5, #1
 800d644:	2300      	movs	r3, #0
 800d646:	9307      	str	r3, [sp, #28]
 800d648:	9509      	str	r5, [sp, #36]	; 0x24
 800d64a:	f04f 33ff 	mov.w	r3, #4294967295
 800d64e:	9301      	str	r3, [sp, #4]
 800d650:	9304      	str	r3, [sp, #16]
 800d652:	2200      	movs	r2, #0
 800d654:	2312      	movs	r3, #18
 800d656:	e7d1      	b.n	800d5fc <_dtoa_r+0x274>
 800d658:	636f4361 	.word	0x636f4361
 800d65c:	3fd287a7 	.word	0x3fd287a7
 800d660:	8b60c8b3 	.word	0x8b60c8b3
 800d664:	3fc68a28 	.word	0x3fc68a28
 800d668:	509f79fb 	.word	0x509f79fb
 800d66c:	3fd34413 	.word	0x3fd34413
 800d670:	080100f5 	.word	0x080100f5
 800d674:	0801010c 	.word	0x0801010c
 800d678:	7ff00000 	.word	0x7ff00000
 800d67c:	080100f1 	.word	0x080100f1
 800d680:	080100e8 	.word	0x080100e8
 800d684:	080100c5 	.word	0x080100c5
 800d688:	3ff80000 	.word	0x3ff80000
 800d68c:	080101f8 	.word	0x080101f8
 800d690:	08010164 	.word	0x08010164
 800d694:	2301      	movs	r3, #1
 800d696:	9309      	str	r3, [sp, #36]	; 0x24
 800d698:	e7d7      	b.n	800d64a <_dtoa_r+0x2c2>
 800d69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	9304      	str	r3, [sp, #16]
 800d6a0:	e7ba      	b.n	800d618 <_dtoa_r+0x290>
 800d6a2:	3101      	adds	r1, #1
 800d6a4:	0052      	lsls	r2, r2, #1
 800d6a6:	e7ba      	b.n	800d61e <_dtoa_r+0x296>
 800d6a8:	69e3      	ldr	r3, [r4, #28]
 800d6aa:	9a00      	ldr	r2, [sp, #0]
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	9b04      	ldr	r3, [sp, #16]
 800d6b0:	2b0e      	cmp	r3, #14
 800d6b2:	f200 80a8 	bhi.w	800d806 <_dtoa_r+0x47e>
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	f000 80a5 	beq.w	800d806 <_dtoa_r+0x47e>
 800d6bc:	f1bb 0f00 	cmp.w	fp, #0
 800d6c0:	dd38      	ble.n	800d734 <_dtoa_r+0x3ac>
 800d6c2:	4bc0      	ldr	r3, [pc, #768]	; (800d9c4 <_dtoa_r+0x63c>)
 800d6c4:	f00b 020f 	and.w	r2, fp, #15
 800d6c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d6d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d6d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d6d8:	d019      	beq.n	800d70e <_dtoa_r+0x386>
 800d6da:	4bbb      	ldr	r3, [pc, #748]	; (800d9c8 <_dtoa_r+0x640>)
 800d6dc:	ec51 0b18 	vmov	r0, r1, d8
 800d6e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6e4:	f7f3 f8ba 	bl	800085c <__aeabi_ddiv>
 800d6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6ec:	f008 080f 	and.w	r8, r8, #15
 800d6f0:	2503      	movs	r5, #3
 800d6f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d9c8 <_dtoa_r+0x640>
 800d6f6:	f1b8 0f00 	cmp.w	r8, #0
 800d6fa:	d10a      	bne.n	800d712 <_dtoa_r+0x38a>
 800d6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d700:	4632      	mov	r2, r6
 800d702:	463b      	mov	r3, r7
 800d704:	f7f3 f8aa 	bl	800085c <__aeabi_ddiv>
 800d708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d70c:	e02b      	b.n	800d766 <_dtoa_r+0x3de>
 800d70e:	2502      	movs	r5, #2
 800d710:	e7ef      	b.n	800d6f2 <_dtoa_r+0x36a>
 800d712:	f018 0f01 	tst.w	r8, #1
 800d716:	d008      	beq.n	800d72a <_dtoa_r+0x3a2>
 800d718:	4630      	mov	r0, r6
 800d71a:	4639      	mov	r1, r7
 800d71c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d720:	f7f2 ff72 	bl	8000608 <__aeabi_dmul>
 800d724:	3501      	adds	r5, #1
 800d726:	4606      	mov	r6, r0
 800d728:	460f      	mov	r7, r1
 800d72a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d72e:	f109 0908 	add.w	r9, r9, #8
 800d732:	e7e0      	b.n	800d6f6 <_dtoa_r+0x36e>
 800d734:	f000 809f 	beq.w	800d876 <_dtoa_r+0x4ee>
 800d738:	f1cb 0600 	rsb	r6, fp, #0
 800d73c:	4ba1      	ldr	r3, [pc, #644]	; (800d9c4 <_dtoa_r+0x63c>)
 800d73e:	4fa2      	ldr	r7, [pc, #648]	; (800d9c8 <_dtoa_r+0x640>)
 800d740:	f006 020f 	and.w	r2, r6, #15
 800d744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	ec51 0b18 	vmov	r0, r1, d8
 800d750:	f7f2 ff5a 	bl	8000608 <__aeabi_dmul>
 800d754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d758:	1136      	asrs	r6, r6, #4
 800d75a:	2300      	movs	r3, #0
 800d75c:	2502      	movs	r5, #2
 800d75e:	2e00      	cmp	r6, #0
 800d760:	d17e      	bne.n	800d860 <_dtoa_r+0x4d8>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1d0      	bne.n	800d708 <_dtoa_r+0x380>
 800d766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d768:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f000 8084 	beq.w	800d87a <_dtoa_r+0x4f2>
 800d772:	4b96      	ldr	r3, [pc, #600]	; (800d9cc <_dtoa_r+0x644>)
 800d774:	2200      	movs	r2, #0
 800d776:	4640      	mov	r0, r8
 800d778:	4649      	mov	r1, r9
 800d77a:	f7f3 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d07b      	beq.n	800d87a <_dtoa_r+0x4f2>
 800d782:	9b04      	ldr	r3, [sp, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d078      	beq.n	800d87a <_dtoa_r+0x4f2>
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	dd39      	ble.n	800d802 <_dtoa_r+0x47a>
 800d78e:	4b90      	ldr	r3, [pc, #576]	; (800d9d0 <_dtoa_r+0x648>)
 800d790:	2200      	movs	r2, #0
 800d792:	4640      	mov	r0, r8
 800d794:	4649      	mov	r1, r9
 800d796:	f7f2 ff37 	bl	8000608 <__aeabi_dmul>
 800d79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d79e:	9e01      	ldr	r6, [sp, #4]
 800d7a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f7f2 fec2 	bl	8000534 <__aeabi_i2d>
 800d7b0:	4642      	mov	r2, r8
 800d7b2:	464b      	mov	r3, r9
 800d7b4:	f7f2 ff28 	bl	8000608 <__aeabi_dmul>
 800d7b8:	4b86      	ldr	r3, [pc, #536]	; (800d9d4 <_dtoa_r+0x64c>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f7f2 fd6e 	bl	800029c <__adddf3>
 800d7c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7c8:	9303      	str	r3, [sp, #12]
 800d7ca:	2e00      	cmp	r6, #0
 800d7cc:	d158      	bne.n	800d880 <_dtoa_r+0x4f8>
 800d7ce:	4b82      	ldr	r3, [pc, #520]	; (800d9d8 <_dtoa_r+0x650>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	4649      	mov	r1, r9
 800d7d6:	f7f2 fd5f 	bl	8000298 <__aeabi_dsub>
 800d7da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4689      	mov	r9, r1
 800d7e2:	f7f3 f9a1 	bl	8000b28 <__aeabi_dcmpgt>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f040 8296 	bne.w	800dd18 <_dtoa_r+0x990>
 800d7ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	f7f3 f978 	bl	8000aec <__aeabi_dcmplt>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	f040 8289 	bne.w	800dd14 <_dtoa_r+0x98c>
 800d802:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f2c0 814e 	blt.w	800daaa <_dtoa_r+0x722>
 800d80e:	f1bb 0f0e 	cmp.w	fp, #14
 800d812:	f300 814a 	bgt.w	800daaa <_dtoa_r+0x722>
 800d816:	4b6b      	ldr	r3, [pc, #428]	; (800d9c4 <_dtoa_r+0x63c>)
 800d818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d81c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d822:	2b00      	cmp	r3, #0
 800d824:	f280 80dc 	bge.w	800d9e0 <_dtoa_r+0x658>
 800d828:	9b04      	ldr	r3, [sp, #16]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f300 80d8 	bgt.w	800d9e0 <_dtoa_r+0x658>
 800d830:	f040 826f 	bne.w	800dd12 <_dtoa_r+0x98a>
 800d834:	4b68      	ldr	r3, [pc, #416]	; (800d9d8 <_dtoa_r+0x650>)
 800d836:	2200      	movs	r2, #0
 800d838:	4640      	mov	r0, r8
 800d83a:	4649      	mov	r1, r9
 800d83c:	f7f2 fee4 	bl	8000608 <__aeabi_dmul>
 800d840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d844:	f7f3 f966 	bl	8000b14 <__aeabi_dcmpge>
 800d848:	9e04      	ldr	r6, [sp, #16]
 800d84a:	4637      	mov	r7, r6
 800d84c:	2800      	cmp	r0, #0
 800d84e:	f040 8245 	bne.w	800dcdc <_dtoa_r+0x954>
 800d852:	9d00      	ldr	r5, [sp, #0]
 800d854:	2331      	movs	r3, #49	; 0x31
 800d856:	f805 3b01 	strb.w	r3, [r5], #1
 800d85a:	f10b 0b01 	add.w	fp, fp, #1
 800d85e:	e241      	b.n	800dce4 <_dtoa_r+0x95c>
 800d860:	07f2      	lsls	r2, r6, #31
 800d862:	d505      	bpl.n	800d870 <_dtoa_r+0x4e8>
 800d864:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d868:	f7f2 fece 	bl	8000608 <__aeabi_dmul>
 800d86c:	3501      	adds	r5, #1
 800d86e:	2301      	movs	r3, #1
 800d870:	1076      	asrs	r6, r6, #1
 800d872:	3708      	adds	r7, #8
 800d874:	e773      	b.n	800d75e <_dtoa_r+0x3d6>
 800d876:	2502      	movs	r5, #2
 800d878:	e775      	b.n	800d766 <_dtoa_r+0x3de>
 800d87a:	9e04      	ldr	r6, [sp, #16]
 800d87c:	465f      	mov	r7, fp
 800d87e:	e792      	b.n	800d7a6 <_dtoa_r+0x41e>
 800d880:	9900      	ldr	r1, [sp, #0]
 800d882:	4b50      	ldr	r3, [pc, #320]	; (800d9c4 <_dtoa_r+0x63c>)
 800d884:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d888:	4431      	add	r1, r6
 800d88a:	9102      	str	r1, [sp, #8]
 800d88c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d88e:	eeb0 9a47 	vmov.f32	s18, s14
 800d892:	eef0 9a67 	vmov.f32	s19, s15
 800d896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d89a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d89e:	2900      	cmp	r1, #0
 800d8a0:	d044      	beq.n	800d92c <_dtoa_r+0x5a4>
 800d8a2:	494e      	ldr	r1, [pc, #312]	; (800d9dc <_dtoa_r+0x654>)
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	f7f2 ffd9 	bl	800085c <__aeabi_ddiv>
 800d8aa:	ec53 2b19 	vmov	r2, r3, d9
 800d8ae:	f7f2 fcf3 	bl	8000298 <__aeabi_dsub>
 800d8b2:	9d00      	ldr	r5, [sp, #0]
 800d8b4:	ec41 0b19 	vmov	d9, r0, r1
 800d8b8:	4649      	mov	r1, r9
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	f7f3 f954 	bl	8000b68 <__aeabi_d2iz>
 800d8c0:	4606      	mov	r6, r0
 800d8c2:	f7f2 fe37 	bl	8000534 <__aeabi_i2d>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	4649      	mov	r1, r9
 800d8ce:	f7f2 fce3 	bl	8000298 <__aeabi_dsub>
 800d8d2:	3630      	adds	r6, #48	; 0x30
 800d8d4:	f805 6b01 	strb.w	r6, [r5], #1
 800d8d8:	ec53 2b19 	vmov	r2, r3, d9
 800d8dc:	4680      	mov	r8, r0
 800d8de:	4689      	mov	r9, r1
 800d8e0:	f7f3 f904 	bl	8000aec <__aeabi_dcmplt>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d164      	bne.n	800d9b2 <_dtoa_r+0x62a>
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	4937      	ldr	r1, [pc, #220]	; (800d9cc <_dtoa_r+0x644>)
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	f7f2 fcd2 	bl	8000298 <__aeabi_dsub>
 800d8f4:	ec53 2b19 	vmov	r2, r3, d9
 800d8f8:	f7f3 f8f8 	bl	8000aec <__aeabi_dcmplt>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	f040 80b6 	bne.w	800da6e <_dtoa_r+0x6e6>
 800d902:	9b02      	ldr	r3, [sp, #8]
 800d904:	429d      	cmp	r5, r3
 800d906:	f43f af7c 	beq.w	800d802 <_dtoa_r+0x47a>
 800d90a:	4b31      	ldr	r3, [pc, #196]	; (800d9d0 <_dtoa_r+0x648>)
 800d90c:	ec51 0b19 	vmov	r0, r1, d9
 800d910:	2200      	movs	r2, #0
 800d912:	f7f2 fe79 	bl	8000608 <__aeabi_dmul>
 800d916:	4b2e      	ldr	r3, [pc, #184]	; (800d9d0 <_dtoa_r+0x648>)
 800d918:	ec41 0b19 	vmov	d9, r0, r1
 800d91c:	2200      	movs	r2, #0
 800d91e:	4640      	mov	r0, r8
 800d920:	4649      	mov	r1, r9
 800d922:	f7f2 fe71 	bl	8000608 <__aeabi_dmul>
 800d926:	4680      	mov	r8, r0
 800d928:	4689      	mov	r9, r1
 800d92a:	e7c5      	b.n	800d8b8 <_dtoa_r+0x530>
 800d92c:	ec51 0b17 	vmov	r0, r1, d7
 800d930:	f7f2 fe6a 	bl	8000608 <__aeabi_dmul>
 800d934:	9b02      	ldr	r3, [sp, #8]
 800d936:	9d00      	ldr	r5, [sp, #0]
 800d938:	930f      	str	r3, [sp, #60]	; 0x3c
 800d93a:	ec41 0b19 	vmov	d9, r0, r1
 800d93e:	4649      	mov	r1, r9
 800d940:	4640      	mov	r0, r8
 800d942:	f7f3 f911 	bl	8000b68 <__aeabi_d2iz>
 800d946:	4606      	mov	r6, r0
 800d948:	f7f2 fdf4 	bl	8000534 <__aeabi_i2d>
 800d94c:	3630      	adds	r6, #48	; 0x30
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fc9f 	bl	8000298 <__aeabi_dsub>
 800d95a:	f805 6b01 	strb.w	r6, [r5], #1
 800d95e:	9b02      	ldr	r3, [sp, #8]
 800d960:	429d      	cmp	r5, r3
 800d962:	4680      	mov	r8, r0
 800d964:	4689      	mov	r9, r1
 800d966:	f04f 0200 	mov.w	r2, #0
 800d96a:	d124      	bne.n	800d9b6 <_dtoa_r+0x62e>
 800d96c:	4b1b      	ldr	r3, [pc, #108]	; (800d9dc <_dtoa_r+0x654>)
 800d96e:	ec51 0b19 	vmov	r0, r1, d9
 800d972:	f7f2 fc93 	bl	800029c <__adddf3>
 800d976:	4602      	mov	r2, r0
 800d978:	460b      	mov	r3, r1
 800d97a:	4640      	mov	r0, r8
 800d97c:	4649      	mov	r1, r9
 800d97e:	f7f3 f8d3 	bl	8000b28 <__aeabi_dcmpgt>
 800d982:	2800      	cmp	r0, #0
 800d984:	d173      	bne.n	800da6e <_dtoa_r+0x6e6>
 800d986:	ec53 2b19 	vmov	r2, r3, d9
 800d98a:	4914      	ldr	r1, [pc, #80]	; (800d9dc <_dtoa_r+0x654>)
 800d98c:	2000      	movs	r0, #0
 800d98e:	f7f2 fc83 	bl	8000298 <__aeabi_dsub>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4640      	mov	r0, r8
 800d998:	4649      	mov	r1, r9
 800d99a:	f7f3 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	f43f af2f 	beq.w	800d802 <_dtoa_r+0x47a>
 800d9a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d9a6:	1e6b      	subs	r3, r5, #1
 800d9a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9ae:	2b30      	cmp	r3, #48	; 0x30
 800d9b0:	d0f8      	beq.n	800d9a4 <_dtoa_r+0x61c>
 800d9b2:	46bb      	mov	fp, r7
 800d9b4:	e04a      	b.n	800da4c <_dtoa_r+0x6c4>
 800d9b6:	4b06      	ldr	r3, [pc, #24]	; (800d9d0 <_dtoa_r+0x648>)
 800d9b8:	f7f2 fe26 	bl	8000608 <__aeabi_dmul>
 800d9bc:	4680      	mov	r8, r0
 800d9be:	4689      	mov	r9, r1
 800d9c0:	e7bd      	b.n	800d93e <_dtoa_r+0x5b6>
 800d9c2:	bf00      	nop
 800d9c4:	080101f8 	.word	0x080101f8
 800d9c8:	080101d0 	.word	0x080101d0
 800d9cc:	3ff00000 	.word	0x3ff00000
 800d9d0:	40240000 	.word	0x40240000
 800d9d4:	401c0000 	.word	0x401c0000
 800d9d8:	40140000 	.word	0x40140000
 800d9dc:	3fe00000 	.word	0x3fe00000
 800d9e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d9e4:	9d00      	ldr	r5, [sp, #0]
 800d9e6:	4642      	mov	r2, r8
 800d9e8:	464b      	mov	r3, r9
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	f7f2 ff35 	bl	800085c <__aeabi_ddiv>
 800d9f2:	f7f3 f8b9 	bl	8000b68 <__aeabi_d2iz>
 800d9f6:	9001      	str	r0, [sp, #4]
 800d9f8:	f7f2 fd9c 	bl	8000534 <__aeabi_i2d>
 800d9fc:	4642      	mov	r2, r8
 800d9fe:	464b      	mov	r3, r9
 800da00:	f7f2 fe02 	bl	8000608 <__aeabi_dmul>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	4630      	mov	r0, r6
 800da0a:	4639      	mov	r1, r7
 800da0c:	f7f2 fc44 	bl	8000298 <__aeabi_dsub>
 800da10:	9e01      	ldr	r6, [sp, #4]
 800da12:	9f04      	ldr	r7, [sp, #16]
 800da14:	3630      	adds	r6, #48	; 0x30
 800da16:	f805 6b01 	strb.w	r6, [r5], #1
 800da1a:	9e00      	ldr	r6, [sp, #0]
 800da1c:	1bae      	subs	r6, r5, r6
 800da1e:	42b7      	cmp	r7, r6
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	d134      	bne.n	800da90 <_dtoa_r+0x708>
 800da26:	f7f2 fc39 	bl	800029c <__adddf3>
 800da2a:	4642      	mov	r2, r8
 800da2c:	464b      	mov	r3, r9
 800da2e:	4606      	mov	r6, r0
 800da30:	460f      	mov	r7, r1
 800da32:	f7f3 f879 	bl	8000b28 <__aeabi_dcmpgt>
 800da36:	b9c8      	cbnz	r0, 800da6c <_dtoa_r+0x6e4>
 800da38:	4642      	mov	r2, r8
 800da3a:	464b      	mov	r3, r9
 800da3c:	4630      	mov	r0, r6
 800da3e:	4639      	mov	r1, r7
 800da40:	f7f3 f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 800da44:	b110      	cbz	r0, 800da4c <_dtoa_r+0x6c4>
 800da46:	9b01      	ldr	r3, [sp, #4]
 800da48:	07db      	lsls	r3, r3, #31
 800da4a:	d40f      	bmi.n	800da6c <_dtoa_r+0x6e4>
 800da4c:	4651      	mov	r1, sl
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 fbcc 	bl	800e1ec <_Bfree>
 800da54:	2300      	movs	r3, #0
 800da56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da58:	702b      	strb	r3, [r5, #0]
 800da5a:	f10b 0301 	add.w	r3, fp, #1
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da62:	2b00      	cmp	r3, #0
 800da64:	f43f ace2 	beq.w	800d42c <_dtoa_r+0xa4>
 800da68:	601d      	str	r5, [r3, #0]
 800da6a:	e4df      	b.n	800d42c <_dtoa_r+0xa4>
 800da6c:	465f      	mov	r7, fp
 800da6e:	462b      	mov	r3, r5
 800da70:	461d      	mov	r5, r3
 800da72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da76:	2a39      	cmp	r2, #57	; 0x39
 800da78:	d106      	bne.n	800da88 <_dtoa_r+0x700>
 800da7a:	9a00      	ldr	r2, [sp, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d1f7      	bne.n	800da70 <_dtoa_r+0x6e8>
 800da80:	9900      	ldr	r1, [sp, #0]
 800da82:	2230      	movs	r2, #48	; 0x30
 800da84:	3701      	adds	r7, #1
 800da86:	700a      	strb	r2, [r1, #0]
 800da88:	781a      	ldrb	r2, [r3, #0]
 800da8a:	3201      	adds	r2, #1
 800da8c:	701a      	strb	r2, [r3, #0]
 800da8e:	e790      	b.n	800d9b2 <_dtoa_r+0x62a>
 800da90:	4ba3      	ldr	r3, [pc, #652]	; (800dd20 <_dtoa_r+0x998>)
 800da92:	2200      	movs	r2, #0
 800da94:	f7f2 fdb8 	bl	8000608 <__aeabi_dmul>
 800da98:	2200      	movs	r2, #0
 800da9a:	2300      	movs	r3, #0
 800da9c:	4606      	mov	r6, r0
 800da9e:	460f      	mov	r7, r1
 800daa0:	f7f3 f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d09e      	beq.n	800d9e6 <_dtoa_r+0x65e>
 800daa8:	e7d0      	b.n	800da4c <_dtoa_r+0x6c4>
 800daaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daac:	2a00      	cmp	r2, #0
 800daae:	f000 80ca 	beq.w	800dc46 <_dtoa_r+0x8be>
 800dab2:	9a07      	ldr	r2, [sp, #28]
 800dab4:	2a01      	cmp	r2, #1
 800dab6:	f300 80ad 	bgt.w	800dc14 <_dtoa_r+0x88c>
 800daba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	f000 80a5 	beq.w	800dc0c <_dtoa_r+0x884>
 800dac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dac6:	9e08      	ldr	r6, [sp, #32]
 800dac8:	9d05      	ldr	r5, [sp, #20]
 800daca:	9a05      	ldr	r2, [sp, #20]
 800dacc:	441a      	add	r2, r3
 800dace:	9205      	str	r2, [sp, #20]
 800dad0:	9a06      	ldr	r2, [sp, #24]
 800dad2:	2101      	movs	r1, #1
 800dad4:	441a      	add	r2, r3
 800dad6:	4620      	mov	r0, r4
 800dad8:	9206      	str	r2, [sp, #24]
 800dada:	f000 fc3d 	bl	800e358 <__i2b>
 800dade:	4607      	mov	r7, r0
 800dae0:	b165      	cbz	r5, 800dafc <_dtoa_r+0x774>
 800dae2:	9b06      	ldr	r3, [sp, #24]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	dd09      	ble.n	800dafc <_dtoa_r+0x774>
 800dae8:	42ab      	cmp	r3, r5
 800daea:	9a05      	ldr	r2, [sp, #20]
 800daec:	bfa8      	it	ge
 800daee:	462b      	movge	r3, r5
 800daf0:	1ad2      	subs	r2, r2, r3
 800daf2:	9205      	str	r2, [sp, #20]
 800daf4:	9a06      	ldr	r2, [sp, #24]
 800daf6:	1aed      	subs	r5, r5, r3
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	9306      	str	r3, [sp, #24]
 800dafc:	9b08      	ldr	r3, [sp, #32]
 800dafe:	b1f3      	cbz	r3, 800db3e <_dtoa_r+0x7b6>
 800db00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 80a3 	beq.w	800dc4e <_dtoa_r+0x8c6>
 800db08:	2e00      	cmp	r6, #0
 800db0a:	dd10      	ble.n	800db2e <_dtoa_r+0x7a6>
 800db0c:	4639      	mov	r1, r7
 800db0e:	4632      	mov	r2, r6
 800db10:	4620      	mov	r0, r4
 800db12:	f000 fce1 	bl	800e4d8 <__pow5mult>
 800db16:	4652      	mov	r2, sl
 800db18:	4601      	mov	r1, r0
 800db1a:	4607      	mov	r7, r0
 800db1c:	4620      	mov	r0, r4
 800db1e:	f000 fc31 	bl	800e384 <__multiply>
 800db22:	4651      	mov	r1, sl
 800db24:	4680      	mov	r8, r0
 800db26:	4620      	mov	r0, r4
 800db28:	f000 fb60 	bl	800e1ec <_Bfree>
 800db2c:	46c2      	mov	sl, r8
 800db2e:	9b08      	ldr	r3, [sp, #32]
 800db30:	1b9a      	subs	r2, r3, r6
 800db32:	d004      	beq.n	800db3e <_dtoa_r+0x7b6>
 800db34:	4651      	mov	r1, sl
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fcce 	bl	800e4d8 <__pow5mult>
 800db3c:	4682      	mov	sl, r0
 800db3e:	2101      	movs	r1, #1
 800db40:	4620      	mov	r0, r4
 800db42:	f000 fc09 	bl	800e358 <__i2b>
 800db46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db48:	2b00      	cmp	r3, #0
 800db4a:	4606      	mov	r6, r0
 800db4c:	f340 8081 	ble.w	800dc52 <_dtoa_r+0x8ca>
 800db50:	461a      	mov	r2, r3
 800db52:	4601      	mov	r1, r0
 800db54:	4620      	mov	r0, r4
 800db56:	f000 fcbf 	bl	800e4d8 <__pow5mult>
 800db5a:	9b07      	ldr	r3, [sp, #28]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	4606      	mov	r6, r0
 800db60:	dd7a      	ble.n	800dc58 <_dtoa_r+0x8d0>
 800db62:	f04f 0800 	mov.w	r8, #0
 800db66:	6933      	ldr	r3, [r6, #16]
 800db68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800db6c:	6918      	ldr	r0, [r3, #16]
 800db6e:	f000 fba5 	bl	800e2bc <__hi0bits>
 800db72:	f1c0 0020 	rsb	r0, r0, #32
 800db76:	9b06      	ldr	r3, [sp, #24]
 800db78:	4418      	add	r0, r3
 800db7a:	f010 001f 	ands.w	r0, r0, #31
 800db7e:	f000 8094 	beq.w	800dcaa <_dtoa_r+0x922>
 800db82:	f1c0 0320 	rsb	r3, r0, #32
 800db86:	2b04      	cmp	r3, #4
 800db88:	f340 8085 	ble.w	800dc96 <_dtoa_r+0x90e>
 800db8c:	9b05      	ldr	r3, [sp, #20]
 800db8e:	f1c0 001c 	rsb	r0, r0, #28
 800db92:	4403      	add	r3, r0
 800db94:	9305      	str	r3, [sp, #20]
 800db96:	9b06      	ldr	r3, [sp, #24]
 800db98:	4403      	add	r3, r0
 800db9a:	4405      	add	r5, r0
 800db9c:	9306      	str	r3, [sp, #24]
 800db9e:	9b05      	ldr	r3, [sp, #20]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dd05      	ble.n	800dbb0 <_dtoa_r+0x828>
 800dba4:	4651      	mov	r1, sl
 800dba6:	461a      	mov	r2, r3
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f000 fcef 	bl	800e58c <__lshift>
 800dbae:	4682      	mov	sl, r0
 800dbb0:	9b06      	ldr	r3, [sp, #24]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dd05      	ble.n	800dbc2 <_dtoa_r+0x83a>
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	461a      	mov	r2, r3
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 fce6 	bl	800e58c <__lshift>
 800dbc0:	4606      	mov	r6, r0
 800dbc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d072      	beq.n	800dcae <_dtoa_r+0x926>
 800dbc8:	4631      	mov	r1, r6
 800dbca:	4650      	mov	r0, sl
 800dbcc:	f000 fd4a 	bl	800e664 <__mcmp>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	da6c      	bge.n	800dcae <_dtoa_r+0x926>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	4651      	mov	r1, sl
 800dbd8:	220a      	movs	r2, #10
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f000 fb28 	bl	800e230 <__multadd>
 800dbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbe6:	4682      	mov	sl, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f000 81b0 	beq.w	800df4e <_dtoa_r+0xbc6>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	220a      	movs	r2, #10
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 fb1b 	bl	800e230 <__multadd>
 800dbfa:	9b01      	ldr	r3, [sp, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	4607      	mov	r7, r0
 800dc00:	f300 8096 	bgt.w	800dd30 <_dtoa_r+0x9a8>
 800dc04:	9b07      	ldr	r3, [sp, #28]
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	dc59      	bgt.n	800dcbe <_dtoa_r+0x936>
 800dc0a:	e091      	b.n	800dd30 <_dtoa_r+0x9a8>
 800dc0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc12:	e758      	b.n	800dac6 <_dtoa_r+0x73e>
 800dc14:	9b04      	ldr	r3, [sp, #16]
 800dc16:	1e5e      	subs	r6, r3, #1
 800dc18:	9b08      	ldr	r3, [sp, #32]
 800dc1a:	42b3      	cmp	r3, r6
 800dc1c:	bfbf      	itttt	lt
 800dc1e:	9b08      	ldrlt	r3, [sp, #32]
 800dc20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dc22:	9608      	strlt	r6, [sp, #32]
 800dc24:	1af3      	sublt	r3, r6, r3
 800dc26:	bfb4      	ite	lt
 800dc28:	18d2      	addlt	r2, r2, r3
 800dc2a:	1b9e      	subge	r6, r3, r6
 800dc2c:	9b04      	ldr	r3, [sp, #16]
 800dc2e:	bfbc      	itt	lt
 800dc30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800dc32:	2600      	movlt	r6, #0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	bfb7      	itett	lt
 800dc38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800dc3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dc40:	1a9d      	sublt	r5, r3, r2
 800dc42:	2300      	movlt	r3, #0
 800dc44:	e741      	b.n	800daca <_dtoa_r+0x742>
 800dc46:	9e08      	ldr	r6, [sp, #32]
 800dc48:	9d05      	ldr	r5, [sp, #20]
 800dc4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dc4c:	e748      	b.n	800dae0 <_dtoa_r+0x758>
 800dc4e:	9a08      	ldr	r2, [sp, #32]
 800dc50:	e770      	b.n	800db34 <_dtoa_r+0x7ac>
 800dc52:	9b07      	ldr	r3, [sp, #28]
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	dc19      	bgt.n	800dc8c <_dtoa_r+0x904>
 800dc58:	9b02      	ldr	r3, [sp, #8]
 800dc5a:	b9bb      	cbnz	r3, 800dc8c <_dtoa_r+0x904>
 800dc5c:	9b03      	ldr	r3, [sp, #12]
 800dc5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc62:	b99b      	cbnz	r3, 800dc8c <_dtoa_r+0x904>
 800dc64:	9b03      	ldr	r3, [sp, #12]
 800dc66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc6a:	0d1b      	lsrs	r3, r3, #20
 800dc6c:	051b      	lsls	r3, r3, #20
 800dc6e:	b183      	cbz	r3, 800dc92 <_dtoa_r+0x90a>
 800dc70:	9b05      	ldr	r3, [sp, #20]
 800dc72:	3301      	adds	r3, #1
 800dc74:	9305      	str	r3, [sp, #20]
 800dc76:	9b06      	ldr	r3, [sp, #24]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	9306      	str	r3, [sp, #24]
 800dc7c:	f04f 0801 	mov.w	r8, #1
 800dc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f47f af6f 	bne.w	800db66 <_dtoa_r+0x7de>
 800dc88:	2001      	movs	r0, #1
 800dc8a:	e774      	b.n	800db76 <_dtoa_r+0x7ee>
 800dc8c:	f04f 0800 	mov.w	r8, #0
 800dc90:	e7f6      	b.n	800dc80 <_dtoa_r+0x8f8>
 800dc92:	4698      	mov	r8, r3
 800dc94:	e7f4      	b.n	800dc80 <_dtoa_r+0x8f8>
 800dc96:	d082      	beq.n	800db9e <_dtoa_r+0x816>
 800dc98:	9a05      	ldr	r2, [sp, #20]
 800dc9a:	331c      	adds	r3, #28
 800dc9c:	441a      	add	r2, r3
 800dc9e:	9205      	str	r2, [sp, #20]
 800dca0:	9a06      	ldr	r2, [sp, #24]
 800dca2:	441a      	add	r2, r3
 800dca4:	441d      	add	r5, r3
 800dca6:	9206      	str	r2, [sp, #24]
 800dca8:	e779      	b.n	800db9e <_dtoa_r+0x816>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	e7f4      	b.n	800dc98 <_dtoa_r+0x910>
 800dcae:	9b04      	ldr	r3, [sp, #16]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dc37      	bgt.n	800dd24 <_dtoa_r+0x99c>
 800dcb4:	9b07      	ldr	r3, [sp, #28]
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	dd34      	ble.n	800dd24 <_dtoa_r+0x99c>
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	9301      	str	r3, [sp, #4]
 800dcbe:	9b01      	ldr	r3, [sp, #4]
 800dcc0:	b963      	cbnz	r3, 800dcdc <_dtoa_r+0x954>
 800dcc2:	4631      	mov	r1, r6
 800dcc4:	2205      	movs	r2, #5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 fab2 	bl	800e230 <__multadd>
 800dccc:	4601      	mov	r1, r0
 800dcce:	4606      	mov	r6, r0
 800dcd0:	4650      	mov	r0, sl
 800dcd2:	f000 fcc7 	bl	800e664 <__mcmp>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f73f adbb 	bgt.w	800d852 <_dtoa_r+0x4ca>
 800dcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcde:	9d00      	ldr	r5, [sp, #0]
 800dce0:	ea6f 0b03 	mvn.w	fp, r3
 800dce4:	f04f 0800 	mov.w	r8, #0
 800dce8:	4631      	mov	r1, r6
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 fa7e 	bl	800e1ec <_Bfree>
 800dcf0:	2f00      	cmp	r7, #0
 800dcf2:	f43f aeab 	beq.w	800da4c <_dtoa_r+0x6c4>
 800dcf6:	f1b8 0f00 	cmp.w	r8, #0
 800dcfa:	d005      	beq.n	800dd08 <_dtoa_r+0x980>
 800dcfc:	45b8      	cmp	r8, r7
 800dcfe:	d003      	beq.n	800dd08 <_dtoa_r+0x980>
 800dd00:	4641      	mov	r1, r8
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 fa72 	bl	800e1ec <_Bfree>
 800dd08:	4639      	mov	r1, r7
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f000 fa6e 	bl	800e1ec <_Bfree>
 800dd10:	e69c      	b.n	800da4c <_dtoa_r+0x6c4>
 800dd12:	2600      	movs	r6, #0
 800dd14:	4637      	mov	r7, r6
 800dd16:	e7e1      	b.n	800dcdc <_dtoa_r+0x954>
 800dd18:	46bb      	mov	fp, r7
 800dd1a:	4637      	mov	r7, r6
 800dd1c:	e599      	b.n	800d852 <_dtoa_r+0x4ca>
 800dd1e:	bf00      	nop
 800dd20:	40240000 	.word	0x40240000
 800dd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 80c8 	beq.w	800debc <_dtoa_r+0xb34>
 800dd2c:	9b04      	ldr	r3, [sp, #16]
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	2d00      	cmp	r5, #0
 800dd32:	dd05      	ble.n	800dd40 <_dtoa_r+0x9b8>
 800dd34:	4639      	mov	r1, r7
 800dd36:	462a      	mov	r2, r5
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 fc27 	bl	800e58c <__lshift>
 800dd3e:	4607      	mov	r7, r0
 800dd40:	f1b8 0f00 	cmp.w	r8, #0
 800dd44:	d05b      	beq.n	800ddfe <_dtoa_r+0xa76>
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f000 fa0f 	bl	800e16c <_Balloc>
 800dd4e:	4605      	mov	r5, r0
 800dd50:	b928      	cbnz	r0, 800dd5e <_dtoa_r+0x9d6>
 800dd52:	4b83      	ldr	r3, [pc, #524]	; (800df60 <_dtoa_r+0xbd8>)
 800dd54:	4602      	mov	r2, r0
 800dd56:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dd5a:	f7ff bb2e 	b.w	800d3ba <_dtoa_r+0x32>
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	3202      	adds	r2, #2
 800dd62:	0092      	lsls	r2, r2, #2
 800dd64:	f107 010c 	add.w	r1, r7, #12
 800dd68:	300c      	adds	r0, #12
 800dd6a:	f001 f801 	bl	800ed70 <memcpy>
 800dd6e:	2201      	movs	r2, #1
 800dd70:	4629      	mov	r1, r5
 800dd72:	4620      	mov	r0, r4
 800dd74:	f000 fc0a 	bl	800e58c <__lshift>
 800dd78:	9b00      	ldr	r3, [sp, #0]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	9304      	str	r3, [sp, #16]
 800dd7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd82:	4413      	add	r3, r2
 800dd84:	9308      	str	r3, [sp, #32]
 800dd86:	9b02      	ldr	r3, [sp, #8]
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	46b8      	mov	r8, r7
 800dd8e:	9306      	str	r3, [sp, #24]
 800dd90:	4607      	mov	r7, r0
 800dd92:	9b04      	ldr	r3, [sp, #16]
 800dd94:	4631      	mov	r1, r6
 800dd96:	3b01      	subs	r3, #1
 800dd98:	4650      	mov	r0, sl
 800dd9a:	9301      	str	r3, [sp, #4]
 800dd9c:	f7ff fa6a 	bl	800d274 <quorem>
 800dda0:	4641      	mov	r1, r8
 800dda2:	9002      	str	r0, [sp, #8]
 800dda4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dda8:	4650      	mov	r0, sl
 800ddaa:	f000 fc5b 	bl	800e664 <__mcmp>
 800ddae:	463a      	mov	r2, r7
 800ddb0:	9005      	str	r0, [sp, #20]
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 fc71 	bl	800e69c <__mdiff>
 800ddba:	68c2      	ldr	r2, [r0, #12]
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	bb02      	cbnz	r2, 800de02 <_dtoa_r+0xa7a>
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	4650      	mov	r0, sl
 800ddc4:	f000 fc4e 	bl	800e664 <__mcmp>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	4629      	mov	r1, r5
 800ddcc:	4620      	mov	r0, r4
 800ddce:	9209      	str	r2, [sp, #36]	; 0x24
 800ddd0:	f000 fa0c 	bl	800e1ec <_Bfree>
 800ddd4:	9b07      	ldr	r3, [sp, #28]
 800ddd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd8:	9d04      	ldr	r5, [sp, #16]
 800ddda:	ea43 0102 	orr.w	r1, r3, r2
 800ddde:	9b06      	ldr	r3, [sp, #24]
 800dde0:	4319      	orrs	r1, r3
 800dde2:	d110      	bne.n	800de06 <_dtoa_r+0xa7e>
 800dde4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dde8:	d029      	beq.n	800de3e <_dtoa_r+0xab6>
 800ddea:	9b05      	ldr	r3, [sp, #20]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	dd02      	ble.n	800ddf6 <_dtoa_r+0xa6e>
 800ddf0:	9b02      	ldr	r3, [sp, #8]
 800ddf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ddf6:	9b01      	ldr	r3, [sp, #4]
 800ddf8:	f883 9000 	strb.w	r9, [r3]
 800ddfc:	e774      	b.n	800dce8 <_dtoa_r+0x960>
 800ddfe:	4638      	mov	r0, r7
 800de00:	e7ba      	b.n	800dd78 <_dtoa_r+0x9f0>
 800de02:	2201      	movs	r2, #1
 800de04:	e7e1      	b.n	800ddca <_dtoa_r+0xa42>
 800de06:	9b05      	ldr	r3, [sp, #20]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	db04      	blt.n	800de16 <_dtoa_r+0xa8e>
 800de0c:	9907      	ldr	r1, [sp, #28]
 800de0e:	430b      	orrs	r3, r1
 800de10:	9906      	ldr	r1, [sp, #24]
 800de12:	430b      	orrs	r3, r1
 800de14:	d120      	bne.n	800de58 <_dtoa_r+0xad0>
 800de16:	2a00      	cmp	r2, #0
 800de18:	dded      	ble.n	800ddf6 <_dtoa_r+0xa6e>
 800de1a:	4651      	mov	r1, sl
 800de1c:	2201      	movs	r2, #1
 800de1e:	4620      	mov	r0, r4
 800de20:	f000 fbb4 	bl	800e58c <__lshift>
 800de24:	4631      	mov	r1, r6
 800de26:	4682      	mov	sl, r0
 800de28:	f000 fc1c 	bl	800e664 <__mcmp>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	dc03      	bgt.n	800de38 <_dtoa_r+0xab0>
 800de30:	d1e1      	bne.n	800ddf6 <_dtoa_r+0xa6e>
 800de32:	f019 0f01 	tst.w	r9, #1
 800de36:	d0de      	beq.n	800ddf6 <_dtoa_r+0xa6e>
 800de38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de3c:	d1d8      	bne.n	800ddf0 <_dtoa_r+0xa68>
 800de3e:	9a01      	ldr	r2, [sp, #4]
 800de40:	2339      	movs	r3, #57	; 0x39
 800de42:	7013      	strb	r3, [r2, #0]
 800de44:	462b      	mov	r3, r5
 800de46:	461d      	mov	r5, r3
 800de48:	3b01      	subs	r3, #1
 800de4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de4e:	2a39      	cmp	r2, #57	; 0x39
 800de50:	d06c      	beq.n	800df2c <_dtoa_r+0xba4>
 800de52:	3201      	adds	r2, #1
 800de54:	701a      	strb	r2, [r3, #0]
 800de56:	e747      	b.n	800dce8 <_dtoa_r+0x960>
 800de58:	2a00      	cmp	r2, #0
 800de5a:	dd07      	ble.n	800de6c <_dtoa_r+0xae4>
 800de5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de60:	d0ed      	beq.n	800de3e <_dtoa_r+0xab6>
 800de62:	9a01      	ldr	r2, [sp, #4]
 800de64:	f109 0301 	add.w	r3, r9, #1
 800de68:	7013      	strb	r3, [r2, #0]
 800de6a:	e73d      	b.n	800dce8 <_dtoa_r+0x960>
 800de6c:	9b04      	ldr	r3, [sp, #16]
 800de6e:	9a08      	ldr	r2, [sp, #32]
 800de70:	f803 9c01 	strb.w	r9, [r3, #-1]
 800de74:	4293      	cmp	r3, r2
 800de76:	d043      	beq.n	800df00 <_dtoa_r+0xb78>
 800de78:	4651      	mov	r1, sl
 800de7a:	2300      	movs	r3, #0
 800de7c:	220a      	movs	r2, #10
 800de7e:	4620      	mov	r0, r4
 800de80:	f000 f9d6 	bl	800e230 <__multadd>
 800de84:	45b8      	cmp	r8, r7
 800de86:	4682      	mov	sl, r0
 800de88:	f04f 0300 	mov.w	r3, #0
 800de8c:	f04f 020a 	mov.w	r2, #10
 800de90:	4641      	mov	r1, r8
 800de92:	4620      	mov	r0, r4
 800de94:	d107      	bne.n	800dea6 <_dtoa_r+0xb1e>
 800de96:	f000 f9cb 	bl	800e230 <__multadd>
 800de9a:	4680      	mov	r8, r0
 800de9c:	4607      	mov	r7, r0
 800de9e:	9b04      	ldr	r3, [sp, #16]
 800dea0:	3301      	adds	r3, #1
 800dea2:	9304      	str	r3, [sp, #16]
 800dea4:	e775      	b.n	800dd92 <_dtoa_r+0xa0a>
 800dea6:	f000 f9c3 	bl	800e230 <__multadd>
 800deaa:	4639      	mov	r1, r7
 800deac:	4680      	mov	r8, r0
 800deae:	2300      	movs	r3, #0
 800deb0:	220a      	movs	r2, #10
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 f9bc 	bl	800e230 <__multadd>
 800deb8:	4607      	mov	r7, r0
 800deba:	e7f0      	b.n	800de9e <_dtoa_r+0xb16>
 800debc:	9b04      	ldr	r3, [sp, #16]
 800debe:	9301      	str	r3, [sp, #4]
 800dec0:	9d00      	ldr	r5, [sp, #0]
 800dec2:	4631      	mov	r1, r6
 800dec4:	4650      	mov	r0, sl
 800dec6:	f7ff f9d5 	bl	800d274 <quorem>
 800deca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dece:	9b00      	ldr	r3, [sp, #0]
 800ded0:	f805 9b01 	strb.w	r9, [r5], #1
 800ded4:	1aea      	subs	r2, r5, r3
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	4293      	cmp	r3, r2
 800deda:	dd07      	ble.n	800deec <_dtoa_r+0xb64>
 800dedc:	4651      	mov	r1, sl
 800dede:	2300      	movs	r3, #0
 800dee0:	220a      	movs	r2, #10
 800dee2:	4620      	mov	r0, r4
 800dee4:	f000 f9a4 	bl	800e230 <__multadd>
 800dee8:	4682      	mov	sl, r0
 800deea:	e7ea      	b.n	800dec2 <_dtoa_r+0xb3a>
 800deec:	9b01      	ldr	r3, [sp, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	bfc8      	it	gt
 800def2:	461d      	movgt	r5, r3
 800def4:	9b00      	ldr	r3, [sp, #0]
 800def6:	bfd8      	it	le
 800def8:	2501      	movle	r5, #1
 800defa:	441d      	add	r5, r3
 800defc:	f04f 0800 	mov.w	r8, #0
 800df00:	4651      	mov	r1, sl
 800df02:	2201      	movs	r2, #1
 800df04:	4620      	mov	r0, r4
 800df06:	f000 fb41 	bl	800e58c <__lshift>
 800df0a:	4631      	mov	r1, r6
 800df0c:	4682      	mov	sl, r0
 800df0e:	f000 fba9 	bl	800e664 <__mcmp>
 800df12:	2800      	cmp	r0, #0
 800df14:	dc96      	bgt.n	800de44 <_dtoa_r+0xabc>
 800df16:	d102      	bne.n	800df1e <_dtoa_r+0xb96>
 800df18:	f019 0f01 	tst.w	r9, #1
 800df1c:	d192      	bne.n	800de44 <_dtoa_r+0xabc>
 800df1e:	462b      	mov	r3, r5
 800df20:	461d      	mov	r5, r3
 800df22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df26:	2a30      	cmp	r2, #48	; 0x30
 800df28:	d0fa      	beq.n	800df20 <_dtoa_r+0xb98>
 800df2a:	e6dd      	b.n	800dce8 <_dtoa_r+0x960>
 800df2c:	9a00      	ldr	r2, [sp, #0]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d189      	bne.n	800de46 <_dtoa_r+0xabe>
 800df32:	f10b 0b01 	add.w	fp, fp, #1
 800df36:	2331      	movs	r3, #49	; 0x31
 800df38:	e796      	b.n	800de68 <_dtoa_r+0xae0>
 800df3a:	4b0a      	ldr	r3, [pc, #40]	; (800df64 <_dtoa_r+0xbdc>)
 800df3c:	f7ff ba99 	b.w	800d472 <_dtoa_r+0xea>
 800df40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df42:	2b00      	cmp	r3, #0
 800df44:	f47f aa6d 	bne.w	800d422 <_dtoa_r+0x9a>
 800df48:	4b07      	ldr	r3, [pc, #28]	; (800df68 <_dtoa_r+0xbe0>)
 800df4a:	f7ff ba92 	b.w	800d472 <_dtoa_r+0xea>
 800df4e:	9b01      	ldr	r3, [sp, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	dcb5      	bgt.n	800dec0 <_dtoa_r+0xb38>
 800df54:	9b07      	ldr	r3, [sp, #28]
 800df56:	2b02      	cmp	r3, #2
 800df58:	f73f aeb1 	bgt.w	800dcbe <_dtoa_r+0x936>
 800df5c:	e7b0      	b.n	800dec0 <_dtoa_r+0xb38>
 800df5e:	bf00      	nop
 800df60:	08010164 	.word	0x08010164
 800df64:	080100c4 	.word	0x080100c4
 800df68:	080100e8 	.word	0x080100e8

0800df6c <_free_r>:
 800df6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df6e:	2900      	cmp	r1, #0
 800df70:	d044      	beq.n	800dffc <_free_r+0x90>
 800df72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df76:	9001      	str	r0, [sp, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f1a1 0404 	sub.w	r4, r1, #4
 800df7e:	bfb8      	it	lt
 800df80:	18e4      	addlt	r4, r4, r3
 800df82:	f000 f8e7 	bl	800e154 <__malloc_lock>
 800df86:	4a1e      	ldr	r2, [pc, #120]	; (800e000 <_free_r+0x94>)
 800df88:	9801      	ldr	r0, [sp, #4]
 800df8a:	6813      	ldr	r3, [r2, #0]
 800df8c:	b933      	cbnz	r3, 800df9c <_free_r+0x30>
 800df8e:	6063      	str	r3, [r4, #4]
 800df90:	6014      	str	r4, [r2, #0]
 800df92:	b003      	add	sp, #12
 800df94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df98:	f000 b8e2 	b.w	800e160 <__malloc_unlock>
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	d908      	bls.n	800dfb2 <_free_r+0x46>
 800dfa0:	6825      	ldr	r5, [r4, #0]
 800dfa2:	1961      	adds	r1, r4, r5
 800dfa4:	428b      	cmp	r3, r1
 800dfa6:	bf01      	itttt	eq
 800dfa8:	6819      	ldreq	r1, [r3, #0]
 800dfaa:	685b      	ldreq	r3, [r3, #4]
 800dfac:	1949      	addeq	r1, r1, r5
 800dfae:	6021      	streq	r1, [r4, #0]
 800dfb0:	e7ed      	b.n	800df8e <_free_r+0x22>
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	b10b      	cbz	r3, 800dfbc <_free_r+0x50>
 800dfb8:	42a3      	cmp	r3, r4
 800dfba:	d9fa      	bls.n	800dfb2 <_free_r+0x46>
 800dfbc:	6811      	ldr	r1, [r2, #0]
 800dfbe:	1855      	adds	r5, r2, r1
 800dfc0:	42a5      	cmp	r5, r4
 800dfc2:	d10b      	bne.n	800dfdc <_free_r+0x70>
 800dfc4:	6824      	ldr	r4, [r4, #0]
 800dfc6:	4421      	add	r1, r4
 800dfc8:	1854      	adds	r4, r2, r1
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	6011      	str	r1, [r2, #0]
 800dfce:	d1e0      	bne.n	800df92 <_free_r+0x26>
 800dfd0:	681c      	ldr	r4, [r3, #0]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	6053      	str	r3, [r2, #4]
 800dfd6:	440c      	add	r4, r1
 800dfd8:	6014      	str	r4, [r2, #0]
 800dfda:	e7da      	b.n	800df92 <_free_r+0x26>
 800dfdc:	d902      	bls.n	800dfe4 <_free_r+0x78>
 800dfde:	230c      	movs	r3, #12
 800dfe0:	6003      	str	r3, [r0, #0]
 800dfe2:	e7d6      	b.n	800df92 <_free_r+0x26>
 800dfe4:	6825      	ldr	r5, [r4, #0]
 800dfe6:	1961      	adds	r1, r4, r5
 800dfe8:	428b      	cmp	r3, r1
 800dfea:	bf04      	itt	eq
 800dfec:	6819      	ldreq	r1, [r3, #0]
 800dfee:	685b      	ldreq	r3, [r3, #4]
 800dff0:	6063      	str	r3, [r4, #4]
 800dff2:	bf04      	itt	eq
 800dff4:	1949      	addeq	r1, r1, r5
 800dff6:	6021      	streq	r1, [r4, #0]
 800dff8:	6054      	str	r4, [r2, #4]
 800dffa:	e7ca      	b.n	800df92 <_free_r+0x26>
 800dffc:	b003      	add	sp, #12
 800dffe:	bd30      	pop	{r4, r5, pc}
 800e000:	20004c64 	.word	0x20004c64

0800e004 <malloc>:
 800e004:	4b02      	ldr	r3, [pc, #8]	; (800e010 <malloc+0xc>)
 800e006:	4601      	mov	r1, r0
 800e008:	6818      	ldr	r0, [r3, #0]
 800e00a:	f000 b823 	b.w	800e054 <_malloc_r>
 800e00e:	bf00      	nop
 800e010:	20000154 	.word	0x20000154

0800e014 <sbrk_aligned>:
 800e014:	b570      	push	{r4, r5, r6, lr}
 800e016:	4e0e      	ldr	r6, [pc, #56]	; (800e050 <sbrk_aligned+0x3c>)
 800e018:	460c      	mov	r4, r1
 800e01a:	6831      	ldr	r1, [r6, #0]
 800e01c:	4605      	mov	r5, r0
 800e01e:	b911      	cbnz	r1, 800e026 <sbrk_aligned+0x12>
 800e020:	f000 fe96 	bl	800ed50 <_sbrk_r>
 800e024:	6030      	str	r0, [r6, #0]
 800e026:	4621      	mov	r1, r4
 800e028:	4628      	mov	r0, r5
 800e02a:	f000 fe91 	bl	800ed50 <_sbrk_r>
 800e02e:	1c43      	adds	r3, r0, #1
 800e030:	d00a      	beq.n	800e048 <sbrk_aligned+0x34>
 800e032:	1cc4      	adds	r4, r0, #3
 800e034:	f024 0403 	bic.w	r4, r4, #3
 800e038:	42a0      	cmp	r0, r4
 800e03a:	d007      	beq.n	800e04c <sbrk_aligned+0x38>
 800e03c:	1a21      	subs	r1, r4, r0
 800e03e:	4628      	mov	r0, r5
 800e040:	f000 fe86 	bl	800ed50 <_sbrk_r>
 800e044:	3001      	adds	r0, #1
 800e046:	d101      	bne.n	800e04c <sbrk_aligned+0x38>
 800e048:	f04f 34ff 	mov.w	r4, #4294967295
 800e04c:	4620      	mov	r0, r4
 800e04e:	bd70      	pop	{r4, r5, r6, pc}
 800e050:	20004c68 	.word	0x20004c68

0800e054 <_malloc_r>:
 800e054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e058:	1ccd      	adds	r5, r1, #3
 800e05a:	f025 0503 	bic.w	r5, r5, #3
 800e05e:	3508      	adds	r5, #8
 800e060:	2d0c      	cmp	r5, #12
 800e062:	bf38      	it	cc
 800e064:	250c      	movcc	r5, #12
 800e066:	2d00      	cmp	r5, #0
 800e068:	4607      	mov	r7, r0
 800e06a:	db01      	blt.n	800e070 <_malloc_r+0x1c>
 800e06c:	42a9      	cmp	r1, r5
 800e06e:	d905      	bls.n	800e07c <_malloc_r+0x28>
 800e070:	230c      	movs	r3, #12
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	2600      	movs	r6, #0
 800e076:	4630      	mov	r0, r6
 800e078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e150 <_malloc_r+0xfc>
 800e080:	f000 f868 	bl	800e154 <__malloc_lock>
 800e084:	f8d8 3000 	ldr.w	r3, [r8]
 800e088:	461c      	mov	r4, r3
 800e08a:	bb5c      	cbnz	r4, 800e0e4 <_malloc_r+0x90>
 800e08c:	4629      	mov	r1, r5
 800e08e:	4638      	mov	r0, r7
 800e090:	f7ff ffc0 	bl	800e014 <sbrk_aligned>
 800e094:	1c43      	adds	r3, r0, #1
 800e096:	4604      	mov	r4, r0
 800e098:	d155      	bne.n	800e146 <_malloc_r+0xf2>
 800e09a:	f8d8 4000 	ldr.w	r4, [r8]
 800e09e:	4626      	mov	r6, r4
 800e0a0:	2e00      	cmp	r6, #0
 800e0a2:	d145      	bne.n	800e130 <_malloc_r+0xdc>
 800e0a4:	2c00      	cmp	r4, #0
 800e0a6:	d048      	beq.n	800e13a <_malloc_r+0xe6>
 800e0a8:	6823      	ldr	r3, [r4, #0]
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	eb04 0903 	add.w	r9, r4, r3
 800e0b2:	f000 fe4d 	bl	800ed50 <_sbrk_r>
 800e0b6:	4581      	cmp	r9, r0
 800e0b8:	d13f      	bne.n	800e13a <_malloc_r+0xe6>
 800e0ba:	6821      	ldr	r1, [r4, #0]
 800e0bc:	1a6d      	subs	r5, r5, r1
 800e0be:	4629      	mov	r1, r5
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f7ff ffa7 	bl	800e014 <sbrk_aligned>
 800e0c6:	3001      	adds	r0, #1
 800e0c8:	d037      	beq.n	800e13a <_malloc_r+0xe6>
 800e0ca:	6823      	ldr	r3, [r4, #0]
 800e0cc:	442b      	add	r3, r5
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d038      	beq.n	800e14a <_malloc_r+0xf6>
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	42a2      	cmp	r2, r4
 800e0dc:	d12b      	bne.n	800e136 <_malloc_r+0xe2>
 800e0de:	2200      	movs	r2, #0
 800e0e0:	605a      	str	r2, [r3, #4]
 800e0e2:	e00f      	b.n	800e104 <_malloc_r+0xb0>
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	1b52      	subs	r2, r2, r5
 800e0e8:	d41f      	bmi.n	800e12a <_malloc_r+0xd6>
 800e0ea:	2a0b      	cmp	r2, #11
 800e0ec:	d917      	bls.n	800e11e <_malloc_r+0xca>
 800e0ee:	1961      	adds	r1, r4, r5
 800e0f0:	42a3      	cmp	r3, r4
 800e0f2:	6025      	str	r5, [r4, #0]
 800e0f4:	bf18      	it	ne
 800e0f6:	6059      	strne	r1, [r3, #4]
 800e0f8:	6863      	ldr	r3, [r4, #4]
 800e0fa:	bf08      	it	eq
 800e0fc:	f8c8 1000 	streq.w	r1, [r8]
 800e100:	5162      	str	r2, [r4, r5]
 800e102:	604b      	str	r3, [r1, #4]
 800e104:	4638      	mov	r0, r7
 800e106:	f104 060b 	add.w	r6, r4, #11
 800e10a:	f000 f829 	bl	800e160 <__malloc_unlock>
 800e10e:	f026 0607 	bic.w	r6, r6, #7
 800e112:	1d23      	adds	r3, r4, #4
 800e114:	1af2      	subs	r2, r6, r3
 800e116:	d0ae      	beq.n	800e076 <_malloc_r+0x22>
 800e118:	1b9b      	subs	r3, r3, r6
 800e11a:	50a3      	str	r3, [r4, r2]
 800e11c:	e7ab      	b.n	800e076 <_malloc_r+0x22>
 800e11e:	42a3      	cmp	r3, r4
 800e120:	6862      	ldr	r2, [r4, #4]
 800e122:	d1dd      	bne.n	800e0e0 <_malloc_r+0x8c>
 800e124:	f8c8 2000 	str.w	r2, [r8]
 800e128:	e7ec      	b.n	800e104 <_malloc_r+0xb0>
 800e12a:	4623      	mov	r3, r4
 800e12c:	6864      	ldr	r4, [r4, #4]
 800e12e:	e7ac      	b.n	800e08a <_malloc_r+0x36>
 800e130:	4634      	mov	r4, r6
 800e132:	6876      	ldr	r6, [r6, #4]
 800e134:	e7b4      	b.n	800e0a0 <_malloc_r+0x4c>
 800e136:	4613      	mov	r3, r2
 800e138:	e7cc      	b.n	800e0d4 <_malloc_r+0x80>
 800e13a:	230c      	movs	r3, #12
 800e13c:	603b      	str	r3, [r7, #0]
 800e13e:	4638      	mov	r0, r7
 800e140:	f000 f80e 	bl	800e160 <__malloc_unlock>
 800e144:	e797      	b.n	800e076 <_malloc_r+0x22>
 800e146:	6025      	str	r5, [r4, #0]
 800e148:	e7dc      	b.n	800e104 <_malloc_r+0xb0>
 800e14a:	605b      	str	r3, [r3, #4]
 800e14c:	deff      	udf	#255	; 0xff
 800e14e:	bf00      	nop
 800e150:	20004c64 	.word	0x20004c64

0800e154 <__malloc_lock>:
 800e154:	4801      	ldr	r0, [pc, #4]	; (800e15c <__malloc_lock+0x8>)
 800e156:	f7ff b88b 	b.w	800d270 <__retarget_lock_acquire_recursive>
 800e15a:	bf00      	nop
 800e15c:	20004c60 	.word	0x20004c60

0800e160 <__malloc_unlock>:
 800e160:	4801      	ldr	r0, [pc, #4]	; (800e168 <__malloc_unlock+0x8>)
 800e162:	f7ff b886 	b.w	800d272 <__retarget_lock_release_recursive>
 800e166:	bf00      	nop
 800e168:	20004c60 	.word	0x20004c60

0800e16c <_Balloc>:
 800e16c:	b570      	push	{r4, r5, r6, lr}
 800e16e:	69c6      	ldr	r6, [r0, #28]
 800e170:	4604      	mov	r4, r0
 800e172:	460d      	mov	r5, r1
 800e174:	b976      	cbnz	r6, 800e194 <_Balloc+0x28>
 800e176:	2010      	movs	r0, #16
 800e178:	f7ff ff44 	bl	800e004 <malloc>
 800e17c:	4602      	mov	r2, r0
 800e17e:	61e0      	str	r0, [r4, #28]
 800e180:	b920      	cbnz	r0, 800e18c <_Balloc+0x20>
 800e182:	4b18      	ldr	r3, [pc, #96]	; (800e1e4 <_Balloc+0x78>)
 800e184:	4818      	ldr	r0, [pc, #96]	; (800e1e8 <_Balloc+0x7c>)
 800e186:	216b      	movs	r1, #107	; 0x6b
 800e188:	f000 fe00 	bl	800ed8c <__assert_func>
 800e18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e190:	6006      	str	r6, [r0, #0]
 800e192:	60c6      	str	r6, [r0, #12]
 800e194:	69e6      	ldr	r6, [r4, #28]
 800e196:	68f3      	ldr	r3, [r6, #12]
 800e198:	b183      	cbz	r3, 800e1bc <_Balloc+0x50>
 800e19a:	69e3      	ldr	r3, [r4, #28]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1a2:	b9b8      	cbnz	r0, 800e1d4 <_Balloc+0x68>
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800e1aa:	1d72      	adds	r2, r6, #5
 800e1ac:	0092      	lsls	r2, r2, #2
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f000 fe0a 	bl	800edc8 <_calloc_r>
 800e1b4:	b160      	cbz	r0, 800e1d0 <_Balloc+0x64>
 800e1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1ba:	e00e      	b.n	800e1da <_Balloc+0x6e>
 800e1bc:	2221      	movs	r2, #33	; 0x21
 800e1be:	2104      	movs	r1, #4
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 fe01 	bl	800edc8 <_calloc_r>
 800e1c6:	69e3      	ldr	r3, [r4, #28]
 800e1c8:	60f0      	str	r0, [r6, #12]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1e4      	bne.n	800e19a <_Balloc+0x2e>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	bd70      	pop	{r4, r5, r6, pc}
 800e1d4:	6802      	ldr	r2, [r0, #0]
 800e1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1e0:	e7f7      	b.n	800e1d2 <_Balloc+0x66>
 800e1e2:	bf00      	nop
 800e1e4:	080100f5 	.word	0x080100f5
 800e1e8:	08010175 	.word	0x08010175

0800e1ec <_Bfree>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	69c6      	ldr	r6, [r0, #28]
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	b976      	cbnz	r6, 800e214 <_Bfree+0x28>
 800e1f6:	2010      	movs	r0, #16
 800e1f8:	f7ff ff04 	bl	800e004 <malloc>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	61e8      	str	r0, [r5, #28]
 800e200:	b920      	cbnz	r0, 800e20c <_Bfree+0x20>
 800e202:	4b09      	ldr	r3, [pc, #36]	; (800e228 <_Bfree+0x3c>)
 800e204:	4809      	ldr	r0, [pc, #36]	; (800e22c <_Bfree+0x40>)
 800e206:	218f      	movs	r1, #143	; 0x8f
 800e208:	f000 fdc0 	bl	800ed8c <__assert_func>
 800e20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e210:	6006      	str	r6, [r0, #0]
 800e212:	60c6      	str	r6, [r0, #12]
 800e214:	b13c      	cbz	r4, 800e226 <_Bfree+0x3a>
 800e216:	69eb      	ldr	r3, [r5, #28]
 800e218:	6862      	ldr	r2, [r4, #4]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e220:	6021      	str	r1, [r4, #0]
 800e222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e226:	bd70      	pop	{r4, r5, r6, pc}
 800e228:	080100f5 	.word	0x080100f5
 800e22c:	08010175 	.word	0x08010175

0800e230 <__multadd>:
 800e230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e234:	690d      	ldr	r5, [r1, #16]
 800e236:	4607      	mov	r7, r0
 800e238:	460c      	mov	r4, r1
 800e23a:	461e      	mov	r6, r3
 800e23c:	f101 0c14 	add.w	ip, r1, #20
 800e240:	2000      	movs	r0, #0
 800e242:	f8dc 3000 	ldr.w	r3, [ip]
 800e246:	b299      	uxth	r1, r3
 800e248:	fb02 6101 	mla	r1, r2, r1, r6
 800e24c:	0c1e      	lsrs	r6, r3, #16
 800e24e:	0c0b      	lsrs	r3, r1, #16
 800e250:	fb02 3306 	mla	r3, r2, r6, r3
 800e254:	b289      	uxth	r1, r1
 800e256:	3001      	adds	r0, #1
 800e258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e25c:	4285      	cmp	r5, r0
 800e25e:	f84c 1b04 	str.w	r1, [ip], #4
 800e262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e266:	dcec      	bgt.n	800e242 <__multadd+0x12>
 800e268:	b30e      	cbz	r6, 800e2ae <__multadd+0x7e>
 800e26a:	68a3      	ldr	r3, [r4, #8]
 800e26c:	42ab      	cmp	r3, r5
 800e26e:	dc19      	bgt.n	800e2a4 <__multadd+0x74>
 800e270:	6861      	ldr	r1, [r4, #4]
 800e272:	4638      	mov	r0, r7
 800e274:	3101      	adds	r1, #1
 800e276:	f7ff ff79 	bl	800e16c <_Balloc>
 800e27a:	4680      	mov	r8, r0
 800e27c:	b928      	cbnz	r0, 800e28a <__multadd+0x5a>
 800e27e:	4602      	mov	r2, r0
 800e280:	4b0c      	ldr	r3, [pc, #48]	; (800e2b4 <__multadd+0x84>)
 800e282:	480d      	ldr	r0, [pc, #52]	; (800e2b8 <__multadd+0x88>)
 800e284:	21ba      	movs	r1, #186	; 0xba
 800e286:	f000 fd81 	bl	800ed8c <__assert_func>
 800e28a:	6922      	ldr	r2, [r4, #16]
 800e28c:	3202      	adds	r2, #2
 800e28e:	f104 010c 	add.w	r1, r4, #12
 800e292:	0092      	lsls	r2, r2, #2
 800e294:	300c      	adds	r0, #12
 800e296:	f000 fd6b 	bl	800ed70 <memcpy>
 800e29a:	4621      	mov	r1, r4
 800e29c:	4638      	mov	r0, r7
 800e29e:	f7ff ffa5 	bl	800e1ec <_Bfree>
 800e2a2:	4644      	mov	r4, r8
 800e2a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2a8:	3501      	adds	r5, #1
 800e2aa:	615e      	str	r6, [r3, #20]
 800e2ac:	6125      	str	r5, [r4, #16]
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b4:	08010164 	.word	0x08010164
 800e2b8:	08010175 	.word	0x08010175

0800e2bc <__hi0bits>:
 800e2bc:	0c03      	lsrs	r3, r0, #16
 800e2be:	041b      	lsls	r3, r3, #16
 800e2c0:	b9d3      	cbnz	r3, 800e2f8 <__hi0bits+0x3c>
 800e2c2:	0400      	lsls	r0, r0, #16
 800e2c4:	2310      	movs	r3, #16
 800e2c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e2ca:	bf04      	itt	eq
 800e2cc:	0200      	lsleq	r0, r0, #8
 800e2ce:	3308      	addeq	r3, #8
 800e2d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e2d4:	bf04      	itt	eq
 800e2d6:	0100      	lsleq	r0, r0, #4
 800e2d8:	3304      	addeq	r3, #4
 800e2da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e2de:	bf04      	itt	eq
 800e2e0:	0080      	lsleq	r0, r0, #2
 800e2e2:	3302      	addeq	r3, #2
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	db05      	blt.n	800e2f4 <__hi0bits+0x38>
 800e2e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e2ec:	f103 0301 	add.w	r3, r3, #1
 800e2f0:	bf08      	it	eq
 800e2f2:	2320      	moveq	r3, #32
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	4770      	bx	lr
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e7e4      	b.n	800e2c6 <__hi0bits+0xa>

0800e2fc <__lo0bits>:
 800e2fc:	6803      	ldr	r3, [r0, #0]
 800e2fe:	f013 0207 	ands.w	r2, r3, #7
 800e302:	d00c      	beq.n	800e31e <__lo0bits+0x22>
 800e304:	07d9      	lsls	r1, r3, #31
 800e306:	d422      	bmi.n	800e34e <__lo0bits+0x52>
 800e308:	079a      	lsls	r2, r3, #30
 800e30a:	bf49      	itett	mi
 800e30c:	085b      	lsrmi	r3, r3, #1
 800e30e:	089b      	lsrpl	r3, r3, #2
 800e310:	6003      	strmi	r3, [r0, #0]
 800e312:	2201      	movmi	r2, #1
 800e314:	bf5c      	itt	pl
 800e316:	6003      	strpl	r3, [r0, #0]
 800e318:	2202      	movpl	r2, #2
 800e31a:	4610      	mov	r0, r2
 800e31c:	4770      	bx	lr
 800e31e:	b299      	uxth	r1, r3
 800e320:	b909      	cbnz	r1, 800e326 <__lo0bits+0x2a>
 800e322:	0c1b      	lsrs	r3, r3, #16
 800e324:	2210      	movs	r2, #16
 800e326:	b2d9      	uxtb	r1, r3
 800e328:	b909      	cbnz	r1, 800e32e <__lo0bits+0x32>
 800e32a:	3208      	adds	r2, #8
 800e32c:	0a1b      	lsrs	r3, r3, #8
 800e32e:	0719      	lsls	r1, r3, #28
 800e330:	bf04      	itt	eq
 800e332:	091b      	lsreq	r3, r3, #4
 800e334:	3204      	addeq	r2, #4
 800e336:	0799      	lsls	r1, r3, #30
 800e338:	bf04      	itt	eq
 800e33a:	089b      	lsreq	r3, r3, #2
 800e33c:	3202      	addeq	r2, #2
 800e33e:	07d9      	lsls	r1, r3, #31
 800e340:	d403      	bmi.n	800e34a <__lo0bits+0x4e>
 800e342:	085b      	lsrs	r3, r3, #1
 800e344:	f102 0201 	add.w	r2, r2, #1
 800e348:	d003      	beq.n	800e352 <__lo0bits+0x56>
 800e34a:	6003      	str	r3, [r0, #0]
 800e34c:	e7e5      	b.n	800e31a <__lo0bits+0x1e>
 800e34e:	2200      	movs	r2, #0
 800e350:	e7e3      	b.n	800e31a <__lo0bits+0x1e>
 800e352:	2220      	movs	r2, #32
 800e354:	e7e1      	b.n	800e31a <__lo0bits+0x1e>
	...

0800e358 <__i2b>:
 800e358:	b510      	push	{r4, lr}
 800e35a:	460c      	mov	r4, r1
 800e35c:	2101      	movs	r1, #1
 800e35e:	f7ff ff05 	bl	800e16c <_Balloc>
 800e362:	4602      	mov	r2, r0
 800e364:	b928      	cbnz	r0, 800e372 <__i2b+0x1a>
 800e366:	4b05      	ldr	r3, [pc, #20]	; (800e37c <__i2b+0x24>)
 800e368:	4805      	ldr	r0, [pc, #20]	; (800e380 <__i2b+0x28>)
 800e36a:	f240 1145 	movw	r1, #325	; 0x145
 800e36e:	f000 fd0d 	bl	800ed8c <__assert_func>
 800e372:	2301      	movs	r3, #1
 800e374:	6144      	str	r4, [r0, #20]
 800e376:	6103      	str	r3, [r0, #16]
 800e378:	bd10      	pop	{r4, pc}
 800e37a:	bf00      	nop
 800e37c:	08010164 	.word	0x08010164
 800e380:	08010175 	.word	0x08010175

0800e384 <__multiply>:
 800e384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e388:	4691      	mov	r9, r2
 800e38a:	690a      	ldr	r2, [r1, #16]
 800e38c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e390:	429a      	cmp	r2, r3
 800e392:	bfb8      	it	lt
 800e394:	460b      	movlt	r3, r1
 800e396:	460c      	mov	r4, r1
 800e398:	bfbc      	itt	lt
 800e39a:	464c      	movlt	r4, r9
 800e39c:	4699      	movlt	r9, r3
 800e39e:	6927      	ldr	r7, [r4, #16]
 800e3a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e3a4:	68a3      	ldr	r3, [r4, #8]
 800e3a6:	6861      	ldr	r1, [r4, #4]
 800e3a8:	eb07 060a 	add.w	r6, r7, sl
 800e3ac:	42b3      	cmp	r3, r6
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	bfb8      	it	lt
 800e3b2:	3101      	addlt	r1, #1
 800e3b4:	f7ff feda 	bl	800e16c <_Balloc>
 800e3b8:	b930      	cbnz	r0, 800e3c8 <__multiply+0x44>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	4b44      	ldr	r3, [pc, #272]	; (800e4d0 <__multiply+0x14c>)
 800e3be:	4845      	ldr	r0, [pc, #276]	; (800e4d4 <__multiply+0x150>)
 800e3c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e3c4:	f000 fce2 	bl	800ed8c <__assert_func>
 800e3c8:	f100 0514 	add.w	r5, r0, #20
 800e3cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e3d0:	462b      	mov	r3, r5
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	4543      	cmp	r3, r8
 800e3d6:	d321      	bcc.n	800e41c <__multiply+0x98>
 800e3d8:	f104 0314 	add.w	r3, r4, #20
 800e3dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e3e0:	f109 0314 	add.w	r3, r9, #20
 800e3e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e3e8:	9202      	str	r2, [sp, #8]
 800e3ea:	1b3a      	subs	r2, r7, r4
 800e3ec:	3a15      	subs	r2, #21
 800e3ee:	f022 0203 	bic.w	r2, r2, #3
 800e3f2:	3204      	adds	r2, #4
 800e3f4:	f104 0115 	add.w	r1, r4, #21
 800e3f8:	428f      	cmp	r7, r1
 800e3fa:	bf38      	it	cc
 800e3fc:	2204      	movcc	r2, #4
 800e3fe:	9201      	str	r2, [sp, #4]
 800e400:	9a02      	ldr	r2, [sp, #8]
 800e402:	9303      	str	r3, [sp, #12]
 800e404:	429a      	cmp	r2, r3
 800e406:	d80c      	bhi.n	800e422 <__multiply+0x9e>
 800e408:	2e00      	cmp	r6, #0
 800e40a:	dd03      	ble.n	800e414 <__multiply+0x90>
 800e40c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e410:	2b00      	cmp	r3, #0
 800e412:	d05b      	beq.n	800e4cc <__multiply+0x148>
 800e414:	6106      	str	r6, [r0, #16]
 800e416:	b005      	add	sp, #20
 800e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41c:	f843 2b04 	str.w	r2, [r3], #4
 800e420:	e7d8      	b.n	800e3d4 <__multiply+0x50>
 800e422:	f8b3 a000 	ldrh.w	sl, [r3]
 800e426:	f1ba 0f00 	cmp.w	sl, #0
 800e42a:	d024      	beq.n	800e476 <__multiply+0xf2>
 800e42c:	f104 0e14 	add.w	lr, r4, #20
 800e430:	46a9      	mov	r9, r5
 800e432:	f04f 0c00 	mov.w	ip, #0
 800e436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e43a:	f8d9 1000 	ldr.w	r1, [r9]
 800e43e:	fa1f fb82 	uxth.w	fp, r2
 800e442:	b289      	uxth	r1, r1
 800e444:	fb0a 110b 	mla	r1, sl, fp, r1
 800e448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e44c:	f8d9 2000 	ldr.w	r2, [r9]
 800e450:	4461      	add	r1, ip
 800e452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e456:	fb0a c20b 	mla	r2, sl, fp, ip
 800e45a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e45e:	b289      	uxth	r1, r1
 800e460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e464:	4577      	cmp	r7, lr
 800e466:	f849 1b04 	str.w	r1, [r9], #4
 800e46a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e46e:	d8e2      	bhi.n	800e436 <__multiply+0xb2>
 800e470:	9a01      	ldr	r2, [sp, #4]
 800e472:	f845 c002 	str.w	ip, [r5, r2]
 800e476:	9a03      	ldr	r2, [sp, #12]
 800e478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e47c:	3304      	adds	r3, #4
 800e47e:	f1b9 0f00 	cmp.w	r9, #0
 800e482:	d021      	beq.n	800e4c8 <__multiply+0x144>
 800e484:	6829      	ldr	r1, [r5, #0]
 800e486:	f104 0c14 	add.w	ip, r4, #20
 800e48a:	46ae      	mov	lr, r5
 800e48c:	f04f 0a00 	mov.w	sl, #0
 800e490:	f8bc b000 	ldrh.w	fp, [ip]
 800e494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e498:	fb09 220b 	mla	r2, r9, fp, r2
 800e49c:	4452      	add	r2, sl
 800e49e:	b289      	uxth	r1, r1
 800e4a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4a4:	f84e 1b04 	str.w	r1, [lr], #4
 800e4a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e4ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e4b0:	f8be 1000 	ldrh.w	r1, [lr]
 800e4b4:	fb09 110a 	mla	r1, r9, sl, r1
 800e4b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e4bc:	4567      	cmp	r7, ip
 800e4be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e4c2:	d8e5      	bhi.n	800e490 <__multiply+0x10c>
 800e4c4:	9a01      	ldr	r2, [sp, #4]
 800e4c6:	50a9      	str	r1, [r5, r2]
 800e4c8:	3504      	adds	r5, #4
 800e4ca:	e799      	b.n	800e400 <__multiply+0x7c>
 800e4cc:	3e01      	subs	r6, #1
 800e4ce:	e79b      	b.n	800e408 <__multiply+0x84>
 800e4d0:	08010164 	.word	0x08010164
 800e4d4:	08010175 	.word	0x08010175

0800e4d8 <__pow5mult>:
 800e4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4dc:	4615      	mov	r5, r2
 800e4de:	f012 0203 	ands.w	r2, r2, #3
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	d007      	beq.n	800e4f8 <__pow5mult+0x20>
 800e4e8:	4c25      	ldr	r4, [pc, #148]	; (800e580 <__pow5mult+0xa8>)
 800e4ea:	3a01      	subs	r2, #1
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4f2:	f7ff fe9d 	bl	800e230 <__multadd>
 800e4f6:	4607      	mov	r7, r0
 800e4f8:	10ad      	asrs	r5, r5, #2
 800e4fa:	d03d      	beq.n	800e578 <__pow5mult+0xa0>
 800e4fc:	69f4      	ldr	r4, [r6, #28]
 800e4fe:	b97c      	cbnz	r4, 800e520 <__pow5mult+0x48>
 800e500:	2010      	movs	r0, #16
 800e502:	f7ff fd7f 	bl	800e004 <malloc>
 800e506:	4602      	mov	r2, r0
 800e508:	61f0      	str	r0, [r6, #28]
 800e50a:	b928      	cbnz	r0, 800e518 <__pow5mult+0x40>
 800e50c:	4b1d      	ldr	r3, [pc, #116]	; (800e584 <__pow5mult+0xac>)
 800e50e:	481e      	ldr	r0, [pc, #120]	; (800e588 <__pow5mult+0xb0>)
 800e510:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e514:	f000 fc3a 	bl	800ed8c <__assert_func>
 800e518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e51c:	6004      	str	r4, [r0, #0]
 800e51e:	60c4      	str	r4, [r0, #12]
 800e520:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e528:	b94c      	cbnz	r4, 800e53e <__pow5mult+0x66>
 800e52a:	f240 2171 	movw	r1, #625	; 0x271
 800e52e:	4630      	mov	r0, r6
 800e530:	f7ff ff12 	bl	800e358 <__i2b>
 800e534:	2300      	movs	r3, #0
 800e536:	f8c8 0008 	str.w	r0, [r8, #8]
 800e53a:	4604      	mov	r4, r0
 800e53c:	6003      	str	r3, [r0, #0]
 800e53e:	f04f 0900 	mov.w	r9, #0
 800e542:	07eb      	lsls	r3, r5, #31
 800e544:	d50a      	bpl.n	800e55c <__pow5mult+0x84>
 800e546:	4639      	mov	r1, r7
 800e548:	4622      	mov	r2, r4
 800e54a:	4630      	mov	r0, r6
 800e54c:	f7ff ff1a 	bl	800e384 <__multiply>
 800e550:	4639      	mov	r1, r7
 800e552:	4680      	mov	r8, r0
 800e554:	4630      	mov	r0, r6
 800e556:	f7ff fe49 	bl	800e1ec <_Bfree>
 800e55a:	4647      	mov	r7, r8
 800e55c:	106d      	asrs	r5, r5, #1
 800e55e:	d00b      	beq.n	800e578 <__pow5mult+0xa0>
 800e560:	6820      	ldr	r0, [r4, #0]
 800e562:	b938      	cbnz	r0, 800e574 <__pow5mult+0x9c>
 800e564:	4622      	mov	r2, r4
 800e566:	4621      	mov	r1, r4
 800e568:	4630      	mov	r0, r6
 800e56a:	f7ff ff0b 	bl	800e384 <__multiply>
 800e56e:	6020      	str	r0, [r4, #0]
 800e570:	f8c0 9000 	str.w	r9, [r0]
 800e574:	4604      	mov	r4, r0
 800e576:	e7e4      	b.n	800e542 <__pow5mult+0x6a>
 800e578:	4638      	mov	r0, r7
 800e57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e57e:	bf00      	nop
 800e580:	080102c0 	.word	0x080102c0
 800e584:	080100f5 	.word	0x080100f5
 800e588:	08010175 	.word	0x08010175

0800e58c <__lshift>:
 800e58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e590:	460c      	mov	r4, r1
 800e592:	6849      	ldr	r1, [r1, #4]
 800e594:	6923      	ldr	r3, [r4, #16]
 800e596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e59a:	68a3      	ldr	r3, [r4, #8]
 800e59c:	4607      	mov	r7, r0
 800e59e:	4691      	mov	r9, r2
 800e5a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5a4:	f108 0601 	add.w	r6, r8, #1
 800e5a8:	42b3      	cmp	r3, r6
 800e5aa:	db0b      	blt.n	800e5c4 <__lshift+0x38>
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	f7ff fddd 	bl	800e16c <_Balloc>
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	b948      	cbnz	r0, 800e5ca <__lshift+0x3e>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	4b28      	ldr	r3, [pc, #160]	; (800e65c <__lshift+0xd0>)
 800e5ba:	4829      	ldr	r0, [pc, #164]	; (800e660 <__lshift+0xd4>)
 800e5bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e5c0:	f000 fbe4 	bl	800ed8c <__assert_func>
 800e5c4:	3101      	adds	r1, #1
 800e5c6:	005b      	lsls	r3, r3, #1
 800e5c8:	e7ee      	b.n	800e5a8 <__lshift+0x1c>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f100 0114 	add.w	r1, r0, #20
 800e5d0:	f100 0210 	add.w	r2, r0, #16
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	4553      	cmp	r3, sl
 800e5d8:	db33      	blt.n	800e642 <__lshift+0xb6>
 800e5da:	6920      	ldr	r0, [r4, #16]
 800e5dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5e0:	f104 0314 	add.w	r3, r4, #20
 800e5e4:	f019 091f 	ands.w	r9, r9, #31
 800e5e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e5f0:	d02b      	beq.n	800e64a <__lshift+0xbe>
 800e5f2:	f1c9 0e20 	rsb	lr, r9, #32
 800e5f6:	468a      	mov	sl, r1
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	6818      	ldr	r0, [r3, #0]
 800e5fc:	fa00 f009 	lsl.w	r0, r0, r9
 800e600:	4310      	orrs	r0, r2
 800e602:	f84a 0b04 	str.w	r0, [sl], #4
 800e606:	f853 2b04 	ldr.w	r2, [r3], #4
 800e60a:	459c      	cmp	ip, r3
 800e60c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e610:	d8f3      	bhi.n	800e5fa <__lshift+0x6e>
 800e612:	ebac 0304 	sub.w	r3, ip, r4
 800e616:	3b15      	subs	r3, #21
 800e618:	f023 0303 	bic.w	r3, r3, #3
 800e61c:	3304      	adds	r3, #4
 800e61e:	f104 0015 	add.w	r0, r4, #21
 800e622:	4584      	cmp	ip, r0
 800e624:	bf38      	it	cc
 800e626:	2304      	movcc	r3, #4
 800e628:	50ca      	str	r2, [r1, r3]
 800e62a:	b10a      	cbz	r2, 800e630 <__lshift+0xa4>
 800e62c:	f108 0602 	add.w	r6, r8, #2
 800e630:	3e01      	subs	r6, #1
 800e632:	4638      	mov	r0, r7
 800e634:	612e      	str	r6, [r5, #16]
 800e636:	4621      	mov	r1, r4
 800e638:	f7ff fdd8 	bl	800e1ec <_Bfree>
 800e63c:	4628      	mov	r0, r5
 800e63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e642:	f842 0f04 	str.w	r0, [r2, #4]!
 800e646:	3301      	adds	r3, #1
 800e648:	e7c5      	b.n	800e5d6 <__lshift+0x4a>
 800e64a:	3904      	subs	r1, #4
 800e64c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e650:	f841 2f04 	str.w	r2, [r1, #4]!
 800e654:	459c      	cmp	ip, r3
 800e656:	d8f9      	bhi.n	800e64c <__lshift+0xc0>
 800e658:	e7ea      	b.n	800e630 <__lshift+0xa4>
 800e65a:	bf00      	nop
 800e65c:	08010164 	.word	0x08010164
 800e660:	08010175 	.word	0x08010175

0800e664 <__mcmp>:
 800e664:	b530      	push	{r4, r5, lr}
 800e666:	6902      	ldr	r2, [r0, #16]
 800e668:	690c      	ldr	r4, [r1, #16]
 800e66a:	1b12      	subs	r2, r2, r4
 800e66c:	d10e      	bne.n	800e68c <__mcmp+0x28>
 800e66e:	f100 0314 	add.w	r3, r0, #20
 800e672:	3114      	adds	r1, #20
 800e674:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e678:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e67c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e680:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e684:	42a5      	cmp	r5, r4
 800e686:	d003      	beq.n	800e690 <__mcmp+0x2c>
 800e688:	d305      	bcc.n	800e696 <__mcmp+0x32>
 800e68a:	2201      	movs	r2, #1
 800e68c:	4610      	mov	r0, r2
 800e68e:	bd30      	pop	{r4, r5, pc}
 800e690:	4283      	cmp	r3, r0
 800e692:	d3f3      	bcc.n	800e67c <__mcmp+0x18>
 800e694:	e7fa      	b.n	800e68c <__mcmp+0x28>
 800e696:	f04f 32ff 	mov.w	r2, #4294967295
 800e69a:	e7f7      	b.n	800e68c <__mcmp+0x28>

0800e69c <__mdiff>:
 800e69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	4690      	mov	r8, r2
 800e6aa:	f7ff ffdb 	bl	800e664 <__mcmp>
 800e6ae:	1e05      	subs	r5, r0, #0
 800e6b0:	d110      	bne.n	800e6d4 <__mdiff+0x38>
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	f7ff fd59 	bl	800e16c <_Balloc>
 800e6ba:	b930      	cbnz	r0, 800e6ca <__mdiff+0x2e>
 800e6bc:	4b3a      	ldr	r3, [pc, #232]	; (800e7a8 <__mdiff+0x10c>)
 800e6be:	4602      	mov	r2, r0
 800e6c0:	f240 2137 	movw	r1, #567	; 0x237
 800e6c4:	4839      	ldr	r0, [pc, #228]	; (800e7ac <__mdiff+0x110>)
 800e6c6:	f000 fb61 	bl	800ed8c <__assert_func>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d4:	bfa4      	itt	ge
 800e6d6:	4643      	movge	r3, r8
 800e6d8:	46a0      	movge	r8, r4
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e6e0:	bfa6      	itte	ge
 800e6e2:	461c      	movge	r4, r3
 800e6e4:	2500      	movge	r5, #0
 800e6e6:	2501      	movlt	r5, #1
 800e6e8:	f7ff fd40 	bl	800e16c <_Balloc>
 800e6ec:	b920      	cbnz	r0, 800e6f8 <__mdiff+0x5c>
 800e6ee:	4b2e      	ldr	r3, [pc, #184]	; (800e7a8 <__mdiff+0x10c>)
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	f240 2145 	movw	r1, #581	; 0x245
 800e6f6:	e7e5      	b.n	800e6c4 <__mdiff+0x28>
 800e6f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e6fc:	6926      	ldr	r6, [r4, #16]
 800e6fe:	60c5      	str	r5, [r0, #12]
 800e700:	f104 0914 	add.w	r9, r4, #20
 800e704:	f108 0514 	add.w	r5, r8, #20
 800e708:	f100 0e14 	add.w	lr, r0, #20
 800e70c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e710:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e714:	f108 0210 	add.w	r2, r8, #16
 800e718:	46f2      	mov	sl, lr
 800e71a:	2100      	movs	r1, #0
 800e71c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e720:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e724:	fa11 f88b 	uxtah	r8, r1, fp
 800e728:	b299      	uxth	r1, r3
 800e72a:	0c1b      	lsrs	r3, r3, #16
 800e72c:	eba8 0801 	sub.w	r8, r8, r1
 800e730:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e734:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e738:	fa1f f888 	uxth.w	r8, r8
 800e73c:	1419      	asrs	r1, r3, #16
 800e73e:	454e      	cmp	r6, r9
 800e740:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e744:	f84a 3b04 	str.w	r3, [sl], #4
 800e748:	d8e8      	bhi.n	800e71c <__mdiff+0x80>
 800e74a:	1b33      	subs	r3, r6, r4
 800e74c:	3b15      	subs	r3, #21
 800e74e:	f023 0303 	bic.w	r3, r3, #3
 800e752:	3304      	adds	r3, #4
 800e754:	3415      	adds	r4, #21
 800e756:	42a6      	cmp	r6, r4
 800e758:	bf38      	it	cc
 800e75a:	2304      	movcc	r3, #4
 800e75c:	441d      	add	r5, r3
 800e75e:	4473      	add	r3, lr
 800e760:	469e      	mov	lr, r3
 800e762:	462e      	mov	r6, r5
 800e764:	4566      	cmp	r6, ip
 800e766:	d30e      	bcc.n	800e786 <__mdiff+0xea>
 800e768:	f10c 0203 	add.w	r2, ip, #3
 800e76c:	1b52      	subs	r2, r2, r5
 800e76e:	f022 0203 	bic.w	r2, r2, #3
 800e772:	3d03      	subs	r5, #3
 800e774:	45ac      	cmp	ip, r5
 800e776:	bf38      	it	cc
 800e778:	2200      	movcc	r2, #0
 800e77a:	4413      	add	r3, r2
 800e77c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e780:	b17a      	cbz	r2, 800e7a2 <__mdiff+0x106>
 800e782:	6107      	str	r7, [r0, #16]
 800e784:	e7a4      	b.n	800e6d0 <__mdiff+0x34>
 800e786:	f856 8b04 	ldr.w	r8, [r6], #4
 800e78a:	fa11 f288 	uxtah	r2, r1, r8
 800e78e:	1414      	asrs	r4, r2, #16
 800e790:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e794:	b292      	uxth	r2, r2
 800e796:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e79a:	f84e 2b04 	str.w	r2, [lr], #4
 800e79e:	1421      	asrs	r1, r4, #16
 800e7a0:	e7e0      	b.n	800e764 <__mdiff+0xc8>
 800e7a2:	3f01      	subs	r7, #1
 800e7a4:	e7ea      	b.n	800e77c <__mdiff+0xe0>
 800e7a6:	bf00      	nop
 800e7a8:	08010164 	.word	0x08010164
 800e7ac:	08010175 	.word	0x08010175

0800e7b0 <__d2b>:
 800e7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7b4:	460f      	mov	r7, r1
 800e7b6:	2101      	movs	r1, #1
 800e7b8:	ec59 8b10 	vmov	r8, r9, d0
 800e7bc:	4616      	mov	r6, r2
 800e7be:	f7ff fcd5 	bl	800e16c <_Balloc>
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	b930      	cbnz	r0, 800e7d4 <__d2b+0x24>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	4b24      	ldr	r3, [pc, #144]	; (800e85c <__d2b+0xac>)
 800e7ca:	4825      	ldr	r0, [pc, #148]	; (800e860 <__d2b+0xb0>)
 800e7cc:	f240 310f 	movw	r1, #783	; 0x30f
 800e7d0:	f000 fadc 	bl	800ed8c <__assert_func>
 800e7d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e7d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7dc:	bb2d      	cbnz	r5, 800e82a <__d2b+0x7a>
 800e7de:	9301      	str	r3, [sp, #4]
 800e7e0:	f1b8 0300 	subs.w	r3, r8, #0
 800e7e4:	d026      	beq.n	800e834 <__d2b+0x84>
 800e7e6:	4668      	mov	r0, sp
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	f7ff fd87 	bl	800e2fc <__lo0bits>
 800e7ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e7f2:	b1e8      	cbz	r0, 800e830 <__d2b+0x80>
 800e7f4:	f1c0 0320 	rsb	r3, r0, #32
 800e7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e7fc:	430b      	orrs	r3, r1
 800e7fe:	40c2      	lsrs	r2, r0
 800e800:	6163      	str	r3, [r4, #20]
 800e802:	9201      	str	r2, [sp, #4]
 800e804:	9b01      	ldr	r3, [sp, #4]
 800e806:	61a3      	str	r3, [r4, #24]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	bf14      	ite	ne
 800e80c:	2202      	movne	r2, #2
 800e80e:	2201      	moveq	r2, #1
 800e810:	6122      	str	r2, [r4, #16]
 800e812:	b1bd      	cbz	r5, 800e844 <__d2b+0x94>
 800e814:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e818:	4405      	add	r5, r0
 800e81a:	603d      	str	r5, [r7, #0]
 800e81c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e820:	6030      	str	r0, [r6, #0]
 800e822:	4620      	mov	r0, r4
 800e824:	b003      	add	sp, #12
 800e826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e82a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e82e:	e7d6      	b.n	800e7de <__d2b+0x2e>
 800e830:	6161      	str	r1, [r4, #20]
 800e832:	e7e7      	b.n	800e804 <__d2b+0x54>
 800e834:	a801      	add	r0, sp, #4
 800e836:	f7ff fd61 	bl	800e2fc <__lo0bits>
 800e83a:	9b01      	ldr	r3, [sp, #4]
 800e83c:	6163      	str	r3, [r4, #20]
 800e83e:	3020      	adds	r0, #32
 800e840:	2201      	movs	r2, #1
 800e842:	e7e5      	b.n	800e810 <__d2b+0x60>
 800e844:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e848:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e84c:	6038      	str	r0, [r7, #0]
 800e84e:	6918      	ldr	r0, [r3, #16]
 800e850:	f7ff fd34 	bl	800e2bc <__hi0bits>
 800e854:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e858:	e7e2      	b.n	800e820 <__d2b+0x70>
 800e85a:	bf00      	nop
 800e85c:	08010164 	.word	0x08010164
 800e860:	08010175 	.word	0x08010175

0800e864 <__sfputc_r>:
 800e864:	6893      	ldr	r3, [r2, #8]
 800e866:	3b01      	subs	r3, #1
 800e868:	2b00      	cmp	r3, #0
 800e86a:	b410      	push	{r4}
 800e86c:	6093      	str	r3, [r2, #8]
 800e86e:	da08      	bge.n	800e882 <__sfputc_r+0x1e>
 800e870:	6994      	ldr	r4, [r2, #24]
 800e872:	42a3      	cmp	r3, r4
 800e874:	db01      	blt.n	800e87a <__sfputc_r+0x16>
 800e876:	290a      	cmp	r1, #10
 800e878:	d103      	bne.n	800e882 <__sfputc_r+0x1e>
 800e87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e87e:	f7fe bbe6 	b.w	800d04e <__swbuf_r>
 800e882:	6813      	ldr	r3, [r2, #0]
 800e884:	1c58      	adds	r0, r3, #1
 800e886:	6010      	str	r0, [r2, #0]
 800e888:	7019      	strb	r1, [r3, #0]
 800e88a:	4608      	mov	r0, r1
 800e88c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <__sfputs_r>:
 800e892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e894:	4606      	mov	r6, r0
 800e896:	460f      	mov	r7, r1
 800e898:	4614      	mov	r4, r2
 800e89a:	18d5      	adds	r5, r2, r3
 800e89c:	42ac      	cmp	r4, r5
 800e89e:	d101      	bne.n	800e8a4 <__sfputs_r+0x12>
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	e007      	b.n	800e8b4 <__sfputs_r+0x22>
 800e8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a8:	463a      	mov	r2, r7
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f7ff ffda 	bl	800e864 <__sfputc_r>
 800e8b0:	1c43      	adds	r3, r0, #1
 800e8b2:	d1f3      	bne.n	800e89c <__sfputs_r+0xa>
 800e8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8b8 <_vfiprintf_r>:
 800e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8bc:	460d      	mov	r5, r1
 800e8be:	b09d      	sub	sp, #116	; 0x74
 800e8c0:	4614      	mov	r4, r2
 800e8c2:	4698      	mov	r8, r3
 800e8c4:	4606      	mov	r6, r0
 800e8c6:	b118      	cbz	r0, 800e8d0 <_vfiprintf_r+0x18>
 800e8c8:	6a03      	ldr	r3, [r0, #32]
 800e8ca:	b90b      	cbnz	r3, 800e8d0 <_vfiprintf_r+0x18>
 800e8cc:	f7fe fad8 	bl	800ce80 <__sinit>
 800e8d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8d2:	07d9      	lsls	r1, r3, #31
 800e8d4:	d405      	bmi.n	800e8e2 <_vfiprintf_r+0x2a>
 800e8d6:	89ab      	ldrh	r3, [r5, #12]
 800e8d8:	059a      	lsls	r2, r3, #22
 800e8da:	d402      	bmi.n	800e8e2 <_vfiprintf_r+0x2a>
 800e8dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8de:	f7fe fcc7 	bl	800d270 <__retarget_lock_acquire_recursive>
 800e8e2:	89ab      	ldrh	r3, [r5, #12]
 800e8e4:	071b      	lsls	r3, r3, #28
 800e8e6:	d501      	bpl.n	800e8ec <_vfiprintf_r+0x34>
 800e8e8:	692b      	ldr	r3, [r5, #16]
 800e8ea:	b99b      	cbnz	r3, 800e914 <_vfiprintf_r+0x5c>
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7fe fbea 	bl	800d0c8 <__swsetup_r>
 800e8f4:	b170      	cbz	r0, 800e914 <_vfiprintf_r+0x5c>
 800e8f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8f8:	07dc      	lsls	r4, r3, #31
 800e8fa:	d504      	bpl.n	800e906 <_vfiprintf_r+0x4e>
 800e8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e900:	b01d      	add	sp, #116	; 0x74
 800e902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e906:	89ab      	ldrh	r3, [r5, #12]
 800e908:	0598      	lsls	r0, r3, #22
 800e90a:	d4f7      	bmi.n	800e8fc <_vfiprintf_r+0x44>
 800e90c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e90e:	f7fe fcb0 	bl	800d272 <__retarget_lock_release_recursive>
 800e912:	e7f3      	b.n	800e8fc <_vfiprintf_r+0x44>
 800e914:	2300      	movs	r3, #0
 800e916:	9309      	str	r3, [sp, #36]	; 0x24
 800e918:	2320      	movs	r3, #32
 800e91a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e922:	2330      	movs	r3, #48	; 0x30
 800e924:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ead8 <_vfiprintf_r+0x220>
 800e928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e92c:	f04f 0901 	mov.w	r9, #1
 800e930:	4623      	mov	r3, r4
 800e932:	469a      	mov	sl, r3
 800e934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e938:	b10a      	cbz	r2, 800e93e <_vfiprintf_r+0x86>
 800e93a:	2a25      	cmp	r2, #37	; 0x25
 800e93c:	d1f9      	bne.n	800e932 <_vfiprintf_r+0x7a>
 800e93e:	ebba 0b04 	subs.w	fp, sl, r4
 800e942:	d00b      	beq.n	800e95c <_vfiprintf_r+0xa4>
 800e944:	465b      	mov	r3, fp
 800e946:	4622      	mov	r2, r4
 800e948:	4629      	mov	r1, r5
 800e94a:	4630      	mov	r0, r6
 800e94c:	f7ff ffa1 	bl	800e892 <__sfputs_r>
 800e950:	3001      	adds	r0, #1
 800e952:	f000 80a9 	beq.w	800eaa8 <_vfiprintf_r+0x1f0>
 800e956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e958:	445a      	add	r2, fp
 800e95a:	9209      	str	r2, [sp, #36]	; 0x24
 800e95c:	f89a 3000 	ldrb.w	r3, [sl]
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 80a1 	beq.w	800eaa8 <_vfiprintf_r+0x1f0>
 800e966:	2300      	movs	r3, #0
 800e968:	f04f 32ff 	mov.w	r2, #4294967295
 800e96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e970:	f10a 0a01 	add.w	sl, sl, #1
 800e974:	9304      	str	r3, [sp, #16]
 800e976:	9307      	str	r3, [sp, #28]
 800e978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e97c:	931a      	str	r3, [sp, #104]	; 0x68
 800e97e:	4654      	mov	r4, sl
 800e980:	2205      	movs	r2, #5
 800e982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e986:	4854      	ldr	r0, [pc, #336]	; (800ead8 <_vfiprintf_r+0x220>)
 800e988:	f7f1 fc2a 	bl	80001e0 <memchr>
 800e98c:	9a04      	ldr	r2, [sp, #16]
 800e98e:	b9d8      	cbnz	r0, 800e9c8 <_vfiprintf_r+0x110>
 800e990:	06d1      	lsls	r1, r2, #27
 800e992:	bf44      	itt	mi
 800e994:	2320      	movmi	r3, #32
 800e996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e99a:	0713      	lsls	r3, r2, #28
 800e99c:	bf44      	itt	mi
 800e99e:	232b      	movmi	r3, #43	; 0x2b
 800e9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e9aa:	d015      	beq.n	800e9d8 <_vfiprintf_r+0x120>
 800e9ac:	9a07      	ldr	r2, [sp, #28]
 800e9ae:	4654      	mov	r4, sl
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	f04f 0c0a 	mov.w	ip, #10
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9bc:	3b30      	subs	r3, #48	; 0x30
 800e9be:	2b09      	cmp	r3, #9
 800e9c0:	d94d      	bls.n	800ea5e <_vfiprintf_r+0x1a6>
 800e9c2:	b1b0      	cbz	r0, 800e9f2 <_vfiprintf_r+0x13a>
 800e9c4:	9207      	str	r2, [sp, #28]
 800e9c6:	e014      	b.n	800e9f2 <_vfiprintf_r+0x13a>
 800e9c8:	eba0 0308 	sub.w	r3, r0, r8
 800e9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	9304      	str	r3, [sp, #16]
 800e9d4:	46a2      	mov	sl, r4
 800e9d6:	e7d2      	b.n	800e97e <_vfiprintf_r+0xc6>
 800e9d8:	9b03      	ldr	r3, [sp, #12]
 800e9da:	1d19      	adds	r1, r3, #4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	9103      	str	r1, [sp, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfbb      	ittet	lt
 800e9e4:	425b      	neglt	r3, r3
 800e9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ea:	9307      	strge	r3, [sp, #28]
 800e9ec:	9307      	strlt	r3, [sp, #28]
 800e9ee:	bfb8      	it	lt
 800e9f0:	9204      	strlt	r2, [sp, #16]
 800e9f2:	7823      	ldrb	r3, [r4, #0]
 800e9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9f6:	d10c      	bne.n	800ea12 <_vfiprintf_r+0x15a>
 800e9f8:	7863      	ldrb	r3, [r4, #1]
 800e9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e9fc:	d134      	bne.n	800ea68 <_vfiprintf_r+0x1b0>
 800e9fe:	9b03      	ldr	r3, [sp, #12]
 800ea00:	1d1a      	adds	r2, r3, #4
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	9203      	str	r2, [sp, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	bfb8      	it	lt
 800ea0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea0e:	3402      	adds	r4, #2
 800ea10:	9305      	str	r3, [sp, #20]
 800ea12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eae8 <_vfiprintf_r+0x230>
 800ea16:	7821      	ldrb	r1, [r4, #0]
 800ea18:	2203      	movs	r2, #3
 800ea1a:	4650      	mov	r0, sl
 800ea1c:	f7f1 fbe0 	bl	80001e0 <memchr>
 800ea20:	b138      	cbz	r0, 800ea32 <_vfiprintf_r+0x17a>
 800ea22:	9b04      	ldr	r3, [sp, #16]
 800ea24:	eba0 000a 	sub.w	r0, r0, sl
 800ea28:	2240      	movs	r2, #64	; 0x40
 800ea2a:	4082      	lsls	r2, r0
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	3401      	adds	r4, #1
 800ea30:	9304      	str	r3, [sp, #16]
 800ea32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea36:	4829      	ldr	r0, [pc, #164]	; (800eadc <_vfiprintf_r+0x224>)
 800ea38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea3c:	2206      	movs	r2, #6
 800ea3e:	f7f1 fbcf 	bl	80001e0 <memchr>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	d03f      	beq.n	800eac6 <_vfiprintf_r+0x20e>
 800ea46:	4b26      	ldr	r3, [pc, #152]	; (800eae0 <_vfiprintf_r+0x228>)
 800ea48:	bb1b      	cbnz	r3, 800ea92 <_vfiprintf_r+0x1da>
 800ea4a:	9b03      	ldr	r3, [sp, #12]
 800ea4c:	3307      	adds	r3, #7
 800ea4e:	f023 0307 	bic.w	r3, r3, #7
 800ea52:	3308      	adds	r3, #8
 800ea54:	9303      	str	r3, [sp, #12]
 800ea56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea58:	443b      	add	r3, r7
 800ea5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea5c:	e768      	b.n	800e930 <_vfiprintf_r+0x78>
 800ea5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea62:	460c      	mov	r4, r1
 800ea64:	2001      	movs	r0, #1
 800ea66:	e7a6      	b.n	800e9b6 <_vfiprintf_r+0xfe>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	3401      	adds	r4, #1
 800ea6c:	9305      	str	r3, [sp, #20]
 800ea6e:	4619      	mov	r1, r3
 800ea70:	f04f 0c0a 	mov.w	ip, #10
 800ea74:	4620      	mov	r0, r4
 800ea76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea7a:	3a30      	subs	r2, #48	; 0x30
 800ea7c:	2a09      	cmp	r2, #9
 800ea7e:	d903      	bls.n	800ea88 <_vfiprintf_r+0x1d0>
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d0c6      	beq.n	800ea12 <_vfiprintf_r+0x15a>
 800ea84:	9105      	str	r1, [sp, #20]
 800ea86:	e7c4      	b.n	800ea12 <_vfiprintf_r+0x15a>
 800ea88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e7f0      	b.n	800ea74 <_vfiprintf_r+0x1bc>
 800ea92:	ab03      	add	r3, sp, #12
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	462a      	mov	r2, r5
 800ea98:	4b12      	ldr	r3, [pc, #72]	; (800eae4 <_vfiprintf_r+0x22c>)
 800ea9a:	a904      	add	r1, sp, #16
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	f7fd fdaf 	bl	800c600 <_printf_float>
 800eaa2:	4607      	mov	r7, r0
 800eaa4:	1c78      	adds	r0, r7, #1
 800eaa6:	d1d6      	bne.n	800ea56 <_vfiprintf_r+0x19e>
 800eaa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaaa:	07d9      	lsls	r1, r3, #31
 800eaac:	d405      	bmi.n	800eaba <_vfiprintf_r+0x202>
 800eaae:	89ab      	ldrh	r3, [r5, #12]
 800eab0:	059a      	lsls	r2, r3, #22
 800eab2:	d402      	bmi.n	800eaba <_vfiprintf_r+0x202>
 800eab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eab6:	f7fe fbdc 	bl	800d272 <__retarget_lock_release_recursive>
 800eaba:	89ab      	ldrh	r3, [r5, #12]
 800eabc:	065b      	lsls	r3, r3, #25
 800eabe:	f53f af1d 	bmi.w	800e8fc <_vfiprintf_r+0x44>
 800eac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eac4:	e71c      	b.n	800e900 <_vfiprintf_r+0x48>
 800eac6:	ab03      	add	r3, sp, #12
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	462a      	mov	r2, r5
 800eacc:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <_vfiprintf_r+0x22c>)
 800eace:	a904      	add	r1, sp, #16
 800ead0:	4630      	mov	r0, r6
 800ead2:	f7fe f839 	bl	800cb48 <_printf_i>
 800ead6:	e7e4      	b.n	800eaa2 <_vfiprintf_r+0x1ea>
 800ead8:	080102cc 	.word	0x080102cc
 800eadc:	080102d6 	.word	0x080102d6
 800eae0:	0800c601 	.word	0x0800c601
 800eae4:	0800e893 	.word	0x0800e893
 800eae8:	080102d2 	.word	0x080102d2

0800eaec <__sflush_r>:
 800eaec:	898a      	ldrh	r2, [r1, #12]
 800eaee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf2:	4605      	mov	r5, r0
 800eaf4:	0710      	lsls	r0, r2, #28
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	d458      	bmi.n	800ebac <__sflush_r+0xc0>
 800eafa:	684b      	ldr	r3, [r1, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	dc05      	bgt.n	800eb0c <__sflush_r+0x20>
 800eb00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dc02      	bgt.n	800eb0c <__sflush_r+0x20>
 800eb06:	2000      	movs	r0, #0
 800eb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb0e:	2e00      	cmp	r6, #0
 800eb10:	d0f9      	beq.n	800eb06 <__sflush_r+0x1a>
 800eb12:	2300      	movs	r3, #0
 800eb14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb18:	682f      	ldr	r7, [r5, #0]
 800eb1a:	6a21      	ldr	r1, [r4, #32]
 800eb1c:	602b      	str	r3, [r5, #0]
 800eb1e:	d032      	beq.n	800eb86 <__sflush_r+0x9a>
 800eb20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb22:	89a3      	ldrh	r3, [r4, #12]
 800eb24:	075a      	lsls	r2, r3, #29
 800eb26:	d505      	bpl.n	800eb34 <__sflush_r+0x48>
 800eb28:	6863      	ldr	r3, [r4, #4]
 800eb2a:	1ac0      	subs	r0, r0, r3
 800eb2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb2e:	b10b      	cbz	r3, 800eb34 <__sflush_r+0x48>
 800eb30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb32:	1ac0      	subs	r0, r0, r3
 800eb34:	2300      	movs	r3, #0
 800eb36:	4602      	mov	r2, r0
 800eb38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb3a:	6a21      	ldr	r1, [r4, #32]
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	47b0      	blx	r6
 800eb40:	1c43      	adds	r3, r0, #1
 800eb42:	89a3      	ldrh	r3, [r4, #12]
 800eb44:	d106      	bne.n	800eb54 <__sflush_r+0x68>
 800eb46:	6829      	ldr	r1, [r5, #0]
 800eb48:	291d      	cmp	r1, #29
 800eb4a:	d82b      	bhi.n	800eba4 <__sflush_r+0xb8>
 800eb4c:	4a29      	ldr	r2, [pc, #164]	; (800ebf4 <__sflush_r+0x108>)
 800eb4e:	410a      	asrs	r2, r1
 800eb50:	07d6      	lsls	r6, r2, #31
 800eb52:	d427      	bmi.n	800eba4 <__sflush_r+0xb8>
 800eb54:	2200      	movs	r2, #0
 800eb56:	6062      	str	r2, [r4, #4]
 800eb58:	04d9      	lsls	r1, r3, #19
 800eb5a:	6922      	ldr	r2, [r4, #16]
 800eb5c:	6022      	str	r2, [r4, #0]
 800eb5e:	d504      	bpl.n	800eb6a <__sflush_r+0x7e>
 800eb60:	1c42      	adds	r2, r0, #1
 800eb62:	d101      	bne.n	800eb68 <__sflush_r+0x7c>
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	b903      	cbnz	r3, 800eb6a <__sflush_r+0x7e>
 800eb68:	6560      	str	r0, [r4, #84]	; 0x54
 800eb6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6c:	602f      	str	r7, [r5, #0]
 800eb6e:	2900      	cmp	r1, #0
 800eb70:	d0c9      	beq.n	800eb06 <__sflush_r+0x1a>
 800eb72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb76:	4299      	cmp	r1, r3
 800eb78:	d002      	beq.n	800eb80 <__sflush_r+0x94>
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f7ff f9f6 	bl	800df6c <_free_r>
 800eb80:	2000      	movs	r0, #0
 800eb82:	6360      	str	r0, [r4, #52]	; 0x34
 800eb84:	e7c0      	b.n	800eb08 <__sflush_r+0x1c>
 800eb86:	2301      	movs	r3, #1
 800eb88:	4628      	mov	r0, r5
 800eb8a:	47b0      	blx	r6
 800eb8c:	1c41      	adds	r1, r0, #1
 800eb8e:	d1c8      	bne.n	800eb22 <__sflush_r+0x36>
 800eb90:	682b      	ldr	r3, [r5, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d0c5      	beq.n	800eb22 <__sflush_r+0x36>
 800eb96:	2b1d      	cmp	r3, #29
 800eb98:	d001      	beq.n	800eb9e <__sflush_r+0xb2>
 800eb9a:	2b16      	cmp	r3, #22
 800eb9c:	d101      	bne.n	800eba2 <__sflush_r+0xb6>
 800eb9e:	602f      	str	r7, [r5, #0]
 800eba0:	e7b1      	b.n	800eb06 <__sflush_r+0x1a>
 800eba2:	89a3      	ldrh	r3, [r4, #12]
 800eba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eba8:	81a3      	strh	r3, [r4, #12]
 800ebaa:	e7ad      	b.n	800eb08 <__sflush_r+0x1c>
 800ebac:	690f      	ldr	r7, [r1, #16]
 800ebae:	2f00      	cmp	r7, #0
 800ebb0:	d0a9      	beq.n	800eb06 <__sflush_r+0x1a>
 800ebb2:	0793      	lsls	r3, r2, #30
 800ebb4:	680e      	ldr	r6, [r1, #0]
 800ebb6:	bf08      	it	eq
 800ebb8:	694b      	ldreq	r3, [r1, #20]
 800ebba:	600f      	str	r7, [r1, #0]
 800ebbc:	bf18      	it	ne
 800ebbe:	2300      	movne	r3, #0
 800ebc0:	eba6 0807 	sub.w	r8, r6, r7
 800ebc4:	608b      	str	r3, [r1, #8]
 800ebc6:	f1b8 0f00 	cmp.w	r8, #0
 800ebca:	dd9c      	ble.n	800eb06 <__sflush_r+0x1a>
 800ebcc:	6a21      	ldr	r1, [r4, #32]
 800ebce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebd0:	4643      	mov	r3, r8
 800ebd2:	463a      	mov	r2, r7
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	47b0      	blx	r6
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	dc06      	bgt.n	800ebea <__sflush_r+0xfe>
 800ebdc:	89a3      	ldrh	r3, [r4, #12]
 800ebde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe2:	81a3      	strh	r3, [r4, #12]
 800ebe4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe8:	e78e      	b.n	800eb08 <__sflush_r+0x1c>
 800ebea:	4407      	add	r7, r0
 800ebec:	eba8 0800 	sub.w	r8, r8, r0
 800ebf0:	e7e9      	b.n	800ebc6 <__sflush_r+0xda>
 800ebf2:	bf00      	nop
 800ebf4:	dfbffffe 	.word	0xdfbffffe

0800ebf8 <_fflush_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	690b      	ldr	r3, [r1, #16]
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	460c      	mov	r4, r1
 800ec00:	b913      	cbnz	r3, 800ec08 <_fflush_r+0x10>
 800ec02:	2500      	movs	r5, #0
 800ec04:	4628      	mov	r0, r5
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	b118      	cbz	r0, 800ec12 <_fflush_r+0x1a>
 800ec0a:	6a03      	ldr	r3, [r0, #32]
 800ec0c:	b90b      	cbnz	r3, 800ec12 <_fflush_r+0x1a>
 800ec0e:	f7fe f937 	bl	800ce80 <__sinit>
 800ec12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0f3      	beq.n	800ec02 <_fflush_r+0xa>
 800ec1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec1c:	07d0      	lsls	r0, r2, #31
 800ec1e:	d404      	bmi.n	800ec2a <_fflush_r+0x32>
 800ec20:	0599      	lsls	r1, r3, #22
 800ec22:	d402      	bmi.n	800ec2a <_fflush_r+0x32>
 800ec24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec26:	f7fe fb23 	bl	800d270 <__retarget_lock_acquire_recursive>
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	f7ff ff5d 	bl	800eaec <__sflush_r>
 800ec32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec34:	07da      	lsls	r2, r3, #31
 800ec36:	4605      	mov	r5, r0
 800ec38:	d4e4      	bmi.n	800ec04 <_fflush_r+0xc>
 800ec3a:	89a3      	ldrh	r3, [r4, #12]
 800ec3c:	059b      	lsls	r3, r3, #22
 800ec3e:	d4e1      	bmi.n	800ec04 <_fflush_r+0xc>
 800ec40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec42:	f7fe fb16 	bl	800d272 <__retarget_lock_release_recursive>
 800ec46:	e7dd      	b.n	800ec04 <_fflush_r+0xc>

0800ec48 <__swhatbuf_r>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec50:	2900      	cmp	r1, #0
 800ec52:	b096      	sub	sp, #88	; 0x58
 800ec54:	4615      	mov	r5, r2
 800ec56:	461e      	mov	r6, r3
 800ec58:	da0d      	bge.n	800ec76 <__swhatbuf_r+0x2e>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ec60:	f04f 0100 	mov.w	r1, #0
 800ec64:	bf0c      	ite	eq
 800ec66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ec6a:	2340      	movne	r3, #64	; 0x40
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	6031      	str	r1, [r6, #0]
 800ec70:	602b      	str	r3, [r5, #0]
 800ec72:	b016      	add	sp, #88	; 0x58
 800ec74:	bd70      	pop	{r4, r5, r6, pc}
 800ec76:	466a      	mov	r2, sp
 800ec78:	f000 f848 	bl	800ed0c <_fstat_r>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	dbec      	blt.n	800ec5a <__swhatbuf_r+0x12>
 800ec80:	9901      	ldr	r1, [sp, #4]
 800ec82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ec86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ec8a:	4259      	negs	r1, r3
 800ec8c:	4159      	adcs	r1, r3
 800ec8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec92:	e7eb      	b.n	800ec6c <__swhatbuf_r+0x24>

0800ec94 <__smakebuf_r>:
 800ec94:	898b      	ldrh	r3, [r1, #12]
 800ec96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec98:	079d      	lsls	r5, r3, #30
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	d507      	bpl.n	800ecb0 <__smakebuf_r+0x1c>
 800eca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eca4:	6023      	str	r3, [r4, #0]
 800eca6:	6123      	str	r3, [r4, #16]
 800eca8:	2301      	movs	r3, #1
 800ecaa:	6163      	str	r3, [r4, #20]
 800ecac:	b002      	add	sp, #8
 800ecae:	bd70      	pop	{r4, r5, r6, pc}
 800ecb0:	ab01      	add	r3, sp, #4
 800ecb2:	466a      	mov	r2, sp
 800ecb4:	f7ff ffc8 	bl	800ec48 <__swhatbuf_r>
 800ecb8:	9900      	ldr	r1, [sp, #0]
 800ecba:	4605      	mov	r5, r0
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f7ff f9c9 	bl	800e054 <_malloc_r>
 800ecc2:	b948      	cbnz	r0, 800ecd8 <__smakebuf_r+0x44>
 800ecc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc8:	059a      	lsls	r2, r3, #22
 800ecca:	d4ef      	bmi.n	800ecac <__smakebuf_r+0x18>
 800eccc:	f023 0303 	bic.w	r3, r3, #3
 800ecd0:	f043 0302 	orr.w	r3, r3, #2
 800ecd4:	81a3      	strh	r3, [r4, #12]
 800ecd6:	e7e3      	b.n	800eca0 <__smakebuf_r+0xc>
 800ecd8:	89a3      	ldrh	r3, [r4, #12]
 800ecda:	6020      	str	r0, [r4, #0]
 800ecdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ece0:	81a3      	strh	r3, [r4, #12]
 800ece2:	9b00      	ldr	r3, [sp, #0]
 800ece4:	6163      	str	r3, [r4, #20]
 800ece6:	9b01      	ldr	r3, [sp, #4]
 800ece8:	6120      	str	r0, [r4, #16]
 800ecea:	b15b      	cbz	r3, 800ed04 <__smakebuf_r+0x70>
 800ecec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	f000 f81d 	bl	800ed30 <_isatty_r>
 800ecf6:	b128      	cbz	r0, 800ed04 <__smakebuf_r+0x70>
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	f023 0303 	bic.w	r3, r3, #3
 800ecfe:	f043 0301 	orr.w	r3, r3, #1
 800ed02:	81a3      	strh	r3, [r4, #12]
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	431d      	orrs	r5, r3
 800ed08:	81a5      	strh	r5, [r4, #12]
 800ed0a:	e7cf      	b.n	800ecac <__smakebuf_r+0x18>

0800ed0c <_fstat_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	4d07      	ldr	r5, [pc, #28]	; (800ed2c <_fstat_r+0x20>)
 800ed10:	2300      	movs	r3, #0
 800ed12:	4604      	mov	r4, r0
 800ed14:	4608      	mov	r0, r1
 800ed16:	4611      	mov	r1, r2
 800ed18:	602b      	str	r3, [r5, #0]
 800ed1a:	f7f2 fd4c 	bl	80017b6 <_fstat>
 800ed1e:	1c43      	adds	r3, r0, #1
 800ed20:	d102      	bne.n	800ed28 <_fstat_r+0x1c>
 800ed22:	682b      	ldr	r3, [r5, #0]
 800ed24:	b103      	cbz	r3, 800ed28 <_fstat_r+0x1c>
 800ed26:	6023      	str	r3, [r4, #0]
 800ed28:	bd38      	pop	{r3, r4, r5, pc}
 800ed2a:	bf00      	nop
 800ed2c:	20004c5c 	.word	0x20004c5c

0800ed30 <_isatty_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	4d06      	ldr	r5, [pc, #24]	; (800ed4c <_isatty_r+0x1c>)
 800ed34:	2300      	movs	r3, #0
 800ed36:	4604      	mov	r4, r0
 800ed38:	4608      	mov	r0, r1
 800ed3a:	602b      	str	r3, [r5, #0]
 800ed3c:	f7f2 fd4b 	bl	80017d6 <_isatty>
 800ed40:	1c43      	adds	r3, r0, #1
 800ed42:	d102      	bne.n	800ed4a <_isatty_r+0x1a>
 800ed44:	682b      	ldr	r3, [r5, #0]
 800ed46:	b103      	cbz	r3, 800ed4a <_isatty_r+0x1a>
 800ed48:	6023      	str	r3, [r4, #0]
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	20004c5c 	.word	0x20004c5c

0800ed50 <_sbrk_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4d06      	ldr	r5, [pc, #24]	; (800ed6c <_sbrk_r+0x1c>)
 800ed54:	2300      	movs	r3, #0
 800ed56:	4604      	mov	r4, r0
 800ed58:	4608      	mov	r0, r1
 800ed5a:	602b      	str	r3, [r5, #0]
 800ed5c:	f7f2 fd54 	bl	8001808 <_sbrk>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	d102      	bne.n	800ed6a <_sbrk_r+0x1a>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	b103      	cbz	r3, 800ed6a <_sbrk_r+0x1a>
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}
 800ed6c:	20004c5c 	.word	0x20004c5c

0800ed70 <memcpy>:
 800ed70:	440a      	add	r2, r1
 800ed72:	4291      	cmp	r1, r2
 800ed74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed78:	d100      	bne.n	800ed7c <memcpy+0xc>
 800ed7a:	4770      	bx	lr
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed86:	4291      	cmp	r1, r2
 800ed88:	d1f9      	bne.n	800ed7e <memcpy+0xe>
 800ed8a:	bd10      	pop	{r4, pc}

0800ed8c <__assert_func>:
 800ed8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed8e:	4614      	mov	r4, r2
 800ed90:	461a      	mov	r2, r3
 800ed92:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <__assert_func+0x2c>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4605      	mov	r5, r0
 800ed98:	68d8      	ldr	r0, [r3, #12]
 800ed9a:	b14c      	cbz	r4, 800edb0 <__assert_func+0x24>
 800ed9c:	4b07      	ldr	r3, [pc, #28]	; (800edbc <__assert_func+0x30>)
 800ed9e:	9100      	str	r1, [sp, #0]
 800eda0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eda4:	4906      	ldr	r1, [pc, #24]	; (800edc0 <__assert_func+0x34>)
 800eda6:	462b      	mov	r3, r5
 800eda8:	f000 f844 	bl	800ee34 <fiprintf>
 800edac:	f000 f854 	bl	800ee58 <abort>
 800edb0:	4b04      	ldr	r3, [pc, #16]	; (800edc4 <__assert_func+0x38>)
 800edb2:	461c      	mov	r4, r3
 800edb4:	e7f3      	b.n	800ed9e <__assert_func+0x12>
 800edb6:	bf00      	nop
 800edb8:	20000154 	.word	0x20000154
 800edbc:	080102e7 	.word	0x080102e7
 800edc0:	080102f4 	.word	0x080102f4
 800edc4:	08010322 	.word	0x08010322

0800edc8 <_calloc_r>:
 800edc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edca:	fba1 2402 	umull	r2, r4, r1, r2
 800edce:	b94c      	cbnz	r4, 800ede4 <_calloc_r+0x1c>
 800edd0:	4611      	mov	r1, r2
 800edd2:	9201      	str	r2, [sp, #4]
 800edd4:	f7ff f93e 	bl	800e054 <_malloc_r>
 800edd8:	9a01      	ldr	r2, [sp, #4]
 800edda:	4605      	mov	r5, r0
 800eddc:	b930      	cbnz	r0, 800edec <_calloc_r+0x24>
 800edde:	4628      	mov	r0, r5
 800ede0:	b003      	add	sp, #12
 800ede2:	bd30      	pop	{r4, r5, pc}
 800ede4:	220c      	movs	r2, #12
 800ede6:	6002      	str	r2, [r0, #0]
 800ede8:	2500      	movs	r5, #0
 800edea:	e7f8      	b.n	800edde <_calloc_r+0x16>
 800edec:	4621      	mov	r1, r4
 800edee:	f7fe f9c3 	bl	800d178 <memset>
 800edf2:	e7f4      	b.n	800edde <_calloc_r+0x16>

0800edf4 <__ascii_mbtowc>:
 800edf4:	b082      	sub	sp, #8
 800edf6:	b901      	cbnz	r1, 800edfa <__ascii_mbtowc+0x6>
 800edf8:	a901      	add	r1, sp, #4
 800edfa:	b142      	cbz	r2, 800ee0e <__ascii_mbtowc+0x1a>
 800edfc:	b14b      	cbz	r3, 800ee12 <__ascii_mbtowc+0x1e>
 800edfe:	7813      	ldrb	r3, [r2, #0]
 800ee00:	600b      	str	r3, [r1, #0]
 800ee02:	7812      	ldrb	r2, [r2, #0]
 800ee04:	1e10      	subs	r0, r2, #0
 800ee06:	bf18      	it	ne
 800ee08:	2001      	movne	r0, #1
 800ee0a:	b002      	add	sp, #8
 800ee0c:	4770      	bx	lr
 800ee0e:	4610      	mov	r0, r2
 800ee10:	e7fb      	b.n	800ee0a <__ascii_mbtowc+0x16>
 800ee12:	f06f 0001 	mvn.w	r0, #1
 800ee16:	e7f8      	b.n	800ee0a <__ascii_mbtowc+0x16>

0800ee18 <__ascii_wctomb>:
 800ee18:	b149      	cbz	r1, 800ee2e <__ascii_wctomb+0x16>
 800ee1a:	2aff      	cmp	r2, #255	; 0xff
 800ee1c:	bf85      	ittet	hi
 800ee1e:	238a      	movhi	r3, #138	; 0x8a
 800ee20:	6003      	strhi	r3, [r0, #0]
 800ee22:	700a      	strbls	r2, [r1, #0]
 800ee24:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee28:	bf98      	it	ls
 800ee2a:	2001      	movls	r0, #1
 800ee2c:	4770      	bx	lr
 800ee2e:	4608      	mov	r0, r1
 800ee30:	4770      	bx	lr
	...

0800ee34 <fiprintf>:
 800ee34:	b40e      	push	{r1, r2, r3}
 800ee36:	b503      	push	{r0, r1, lr}
 800ee38:	4601      	mov	r1, r0
 800ee3a:	ab03      	add	r3, sp, #12
 800ee3c:	4805      	ldr	r0, [pc, #20]	; (800ee54 <fiprintf+0x20>)
 800ee3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee42:	6800      	ldr	r0, [r0, #0]
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	f7ff fd37 	bl	800e8b8 <_vfiprintf_r>
 800ee4a:	b002      	add	sp, #8
 800ee4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee50:	b003      	add	sp, #12
 800ee52:	4770      	bx	lr
 800ee54:	20000154 	.word	0x20000154

0800ee58 <abort>:
 800ee58:	b508      	push	{r3, lr}
 800ee5a:	2006      	movs	r0, #6
 800ee5c:	f000 f82c 	bl	800eeb8 <raise>
 800ee60:	2001      	movs	r0, #1
 800ee62:	f7f2 fc59 	bl	8001718 <_exit>

0800ee66 <_raise_r>:
 800ee66:	291f      	cmp	r1, #31
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	d904      	bls.n	800ee7a <_raise_r+0x14>
 800ee70:	2316      	movs	r3, #22
 800ee72:	6003      	str	r3, [r0, #0]
 800ee74:	f04f 30ff 	mov.w	r0, #4294967295
 800ee78:	bd38      	pop	{r3, r4, r5, pc}
 800ee7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ee7c:	b112      	cbz	r2, 800ee84 <_raise_r+0x1e>
 800ee7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee82:	b94b      	cbnz	r3, 800ee98 <_raise_r+0x32>
 800ee84:	4620      	mov	r0, r4
 800ee86:	f000 f831 	bl	800eeec <_getpid_r>
 800ee8a:	462a      	mov	r2, r5
 800ee8c:	4601      	mov	r1, r0
 800ee8e:	4620      	mov	r0, r4
 800ee90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee94:	f000 b818 	b.w	800eec8 <_kill_r>
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d00a      	beq.n	800eeb2 <_raise_r+0x4c>
 800ee9c:	1c59      	adds	r1, r3, #1
 800ee9e:	d103      	bne.n	800eea8 <_raise_r+0x42>
 800eea0:	2316      	movs	r3, #22
 800eea2:	6003      	str	r3, [r0, #0]
 800eea4:	2001      	movs	r0, #1
 800eea6:	e7e7      	b.n	800ee78 <_raise_r+0x12>
 800eea8:	2400      	movs	r4, #0
 800eeaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eeae:	4628      	mov	r0, r5
 800eeb0:	4798      	blx	r3
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	e7e0      	b.n	800ee78 <_raise_r+0x12>
	...

0800eeb8 <raise>:
 800eeb8:	4b02      	ldr	r3, [pc, #8]	; (800eec4 <raise+0xc>)
 800eeba:	4601      	mov	r1, r0
 800eebc:	6818      	ldr	r0, [r3, #0]
 800eebe:	f7ff bfd2 	b.w	800ee66 <_raise_r>
 800eec2:	bf00      	nop
 800eec4:	20000154 	.word	0x20000154

0800eec8 <_kill_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_kill_r+0x20>)
 800eecc:	2300      	movs	r3, #0
 800eece:	4604      	mov	r4, r0
 800eed0:	4608      	mov	r0, r1
 800eed2:	4611      	mov	r1, r2
 800eed4:	602b      	str	r3, [r5, #0]
 800eed6:	f7f2 fc0f 	bl	80016f8 <_kill>
 800eeda:	1c43      	adds	r3, r0, #1
 800eedc:	d102      	bne.n	800eee4 <_kill_r+0x1c>
 800eede:	682b      	ldr	r3, [r5, #0]
 800eee0:	b103      	cbz	r3, 800eee4 <_kill_r+0x1c>
 800eee2:	6023      	str	r3, [r4, #0]
 800eee4:	bd38      	pop	{r3, r4, r5, pc}
 800eee6:	bf00      	nop
 800eee8:	20004c5c 	.word	0x20004c5c

0800eeec <_getpid_r>:
 800eeec:	f7f2 bbfc 	b.w	80016e8 <_getpid>

0800eef0 <pow>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	ed2d 8b02 	vpush	{d8}
 800eef6:	eeb0 8a40 	vmov.f32	s16, s0
 800eefa:	eef0 8a60 	vmov.f32	s17, s1
 800eefe:	ec55 4b11 	vmov	r4, r5, d1
 800ef02:	f000 f891 	bl	800f028 <__ieee754_pow>
 800ef06:	4622      	mov	r2, r4
 800ef08:	462b      	mov	r3, r5
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	ec57 6b10 	vmov	r6, r7, d0
 800ef12:	f7f1 fe13 	bl	8000b3c <__aeabi_dcmpun>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d13b      	bne.n	800ef92 <pow+0xa2>
 800ef1a:	ec51 0b18 	vmov	r0, r1, d8
 800ef1e:	2200      	movs	r2, #0
 800ef20:	2300      	movs	r3, #0
 800ef22:	f7f1 fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef26:	b1b8      	cbz	r0, 800ef58 <pow+0x68>
 800ef28:	2200      	movs	r2, #0
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	4629      	mov	r1, r5
 800ef30:	f7f1 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d146      	bne.n	800efc6 <pow+0xd6>
 800ef38:	ec45 4b10 	vmov	d0, r4, r5
 800ef3c:	f000 f866 	bl	800f00c <finite>
 800ef40:	b338      	cbz	r0, 800ef92 <pow+0xa2>
 800ef42:	2200      	movs	r2, #0
 800ef44:	2300      	movs	r3, #0
 800ef46:	4620      	mov	r0, r4
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7f1 fdcf 	bl	8000aec <__aeabi_dcmplt>
 800ef4e:	b300      	cbz	r0, 800ef92 <pow+0xa2>
 800ef50:	f7fe f964 	bl	800d21c <__errno>
 800ef54:	2322      	movs	r3, #34	; 0x22
 800ef56:	e01b      	b.n	800ef90 <pow+0xa0>
 800ef58:	ec47 6b10 	vmov	d0, r6, r7
 800ef5c:	f000 f856 	bl	800f00c <finite>
 800ef60:	b9e0      	cbnz	r0, 800ef9c <pow+0xac>
 800ef62:	eeb0 0a48 	vmov.f32	s0, s16
 800ef66:	eef0 0a68 	vmov.f32	s1, s17
 800ef6a:	f000 f84f 	bl	800f00c <finite>
 800ef6e:	b1a8      	cbz	r0, 800ef9c <pow+0xac>
 800ef70:	ec45 4b10 	vmov	d0, r4, r5
 800ef74:	f000 f84a 	bl	800f00c <finite>
 800ef78:	b180      	cbz	r0, 800ef9c <pow+0xac>
 800ef7a:	4632      	mov	r2, r6
 800ef7c:	463b      	mov	r3, r7
 800ef7e:	4630      	mov	r0, r6
 800ef80:	4639      	mov	r1, r7
 800ef82:	f7f1 fddb 	bl	8000b3c <__aeabi_dcmpun>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d0e2      	beq.n	800ef50 <pow+0x60>
 800ef8a:	f7fe f947 	bl	800d21c <__errno>
 800ef8e:	2321      	movs	r3, #33	; 0x21
 800ef90:	6003      	str	r3, [r0, #0]
 800ef92:	ecbd 8b02 	vpop	{d8}
 800ef96:	ec47 6b10 	vmov	d0, r6, r7
 800ef9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2300      	movs	r3, #0
 800efa0:	4630      	mov	r0, r6
 800efa2:	4639      	mov	r1, r7
 800efa4:	f7f1 fd98 	bl	8000ad8 <__aeabi_dcmpeq>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d0f2      	beq.n	800ef92 <pow+0xa2>
 800efac:	eeb0 0a48 	vmov.f32	s0, s16
 800efb0:	eef0 0a68 	vmov.f32	s1, s17
 800efb4:	f000 f82a 	bl	800f00c <finite>
 800efb8:	2800      	cmp	r0, #0
 800efba:	d0ea      	beq.n	800ef92 <pow+0xa2>
 800efbc:	ec45 4b10 	vmov	d0, r4, r5
 800efc0:	f000 f824 	bl	800f00c <finite>
 800efc4:	e7c3      	b.n	800ef4e <pow+0x5e>
 800efc6:	4f01      	ldr	r7, [pc, #4]	; (800efcc <pow+0xdc>)
 800efc8:	2600      	movs	r6, #0
 800efca:	e7e2      	b.n	800ef92 <pow+0xa2>
 800efcc:	3ff00000 	.word	0x3ff00000

0800efd0 <sqrtf>:
 800efd0:	b508      	push	{r3, lr}
 800efd2:	ed2d 8b02 	vpush	{d8}
 800efd6:	eeb0 8a40 	vmov.f32	s16, s0
 800efda:	f000 f822 	bl	800f022 <__ieee754_sqrtf>
 800efde:	eeb4 8a48 	vcmp.f32	s16, s16
 800efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe6:	d60c      	bvs.n	800f002 <sqrtf+0x32>
 800efe8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f008 <sqrtf+0x38>
 800efec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff4:	d505      	bpl.n	800f002 <sqrtf+0x32>
 800eff6:	f7fe f911 	bl	800d21c <__errno>
 800effa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800effe:	2321      	movs	r3, #33	; 0x21
 800f000:	6003      	str	r3, [r0, #0]
 800f002:	ecbd 8b02 	vpop	{d8}
 800f006:	bd08      	pop	{r3, pc}
 800f008:	00000000 	.word	0x00000000

0800f00c <finite>:
 800f00c:	b082      	sub	sp, #8
 800f00e:	ed8d 0b00 	vstr	d0, [sp]
 800f012:	9801      	ldr	r0, [sp, #4]
 800f014:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f018:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f01c:	0fc0      	lsrs	r0, r0, #31
 800f01e:	b002      	add	sp, #8
 800f020:	4770      	bx	lr

0800f022 <__ieee754_sqrtf>:
 800f022:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f026:	4770      	bx	lr

0800f028 <__ieee754_pow>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	ed2d 8b06 	vpush	{d8-d10}
 800f030:	b089      	sub	sp, #36	; 0x24
 800f032:	ed8d 1b00 	vstr	d1, [sp]
 800f036:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f03a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f03e:	ea58 0102 	orrs.w	r1, r8, r2
 800f042:	ec57 6b10 	vmov	r6, r7, d0
 800f046:	d115      	bne.n	800f074 <__ieee754_pow+0x4c>
 800f048:	19b3      	adds	r3, r6, r6
 800f04a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f04e:	4152      	adcs	r2, r2
 800f050:	4299      	cmp	r1, r3
 800f052:	4b89      	ldr	r3, [pc, #548]	; (800f278 <__ieee754_pow+0x250>)
 800f054:	4193      	sbcs	r3, r2
 800f056:	f080 84d1 	bcs.w	800f9fc <__ieee754_pow+0x9d4>
 800f05a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f05e:	4630      	mov	r0, r6
 800f060:	4639      	mov	r1, r7
 800f062:	f7f1 f91b 	bl	800029c <__adddf3>
 800f066:	ec41 0b10 	vmov	d0, r0, r1
 800f06a:	b009      	add	sp, #36	; 0x24
 800f06c:	ecbd 8b06 	vpop	{d8-d10}
 800f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f074:	4b81      	ldr	r3, [pc, #516]	; (800f27c <__ieee754_pow+0x254>)
 800f076:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f07a:	429c      	cmp	r4, r3
 800f07c:	ee10 aa10 	vmov	sl, s0
 800f080:	463d      	mov	r5, r7
 800f082:	dc06      	bgt.n	800f092 <__ieee754_pow+0x6a>
 800f084:	d101      	bne.n	800f08a <__ieee754_pow+0x62>
 800f086:	2e00      	cmp	r6, #0
 800f088:	d1e7      	bne.n	800f05a <__ieee754_pow+0x32>
 800f08a:	4598      	cmp	r8, r3
 800f08c:	dc01      	bgt.n	800f092 <__ieee754_pow+0x6a>
 800f08e:	d10f      	bne.n	800f0b0 <__ieee754_pow+0x88>
 800f090:	b172      	cbz	r2, 800f0b0 <__ieee754_pow+0x88>
 800f092:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f096:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f09a:	ea55 050a 	orrs.w	r5, r5, sl
 800f09e:	d1dc      	bne.n	800f05a <__ieee754_pow+0x32>
 800f0a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f0a4:	18db      	adds	r3, r3, r3
 800f0a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f0aa:	4152      	adcs	r2, r2
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	e7d0      	b.n	800f052 <__ieee754_pow+0x2a>
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	da3b      	bge.n	800f12c <__ieee754_pow+0x104>
 800f0b4:	4b72      	ldr	r3, [pc, #456]	; (800f280 <__ieee754_pow+0x258>)
 800f0b6:	4598      	cmp	r8, r3
 800f0b8:	dc51      	bgt.n	800f15e <__ieee754_pow+0x136>
 800f0ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f0be:	4598      	cmp	r8, r3
 800f0c0:	f340 84ab 	ble.w	800fa1a <__ieee754_pow+0x9f2>
 800f0c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f0c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f0cc:	2b14      	cmp	r3, #20
 800f0ce:	dd0f      	ble.n	800f0f0 <__ieee754_pow+0xc8>
 800f0d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f0d4:	fa22 f103 	lsr.w	r1, r2, r3
 800f0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	f040 849c 	bne.w	800fa1a <__ieee754_pow+0x9f2>
 800f0e2:	f001 0101 	and.w	r1, r1, #1
 800f0e6:	f1c1 0302 	rsb	r3, r1, #2
 800f0ea:	9304      	str	r3, [sp, #16]
 800f0ec:	b182      	cbz	r2, 800f110 <__ieee754_pow+0xe8>
 800f0ee:	e05f      	b.n	800f1b0 <__ieee754_pow+0x188>
 800f0f0:	2a00      	cmp	r2, #0
 800f0f2:	d15b      	bne.n	800f1ac <__ieee754_pow+0x184>
 800f0f4:	f1c3 0314 	rsb	r3, r3, #20
 800f0f8:	fa48 f103 	asr.w	r1, r8, r3
 800f0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800f100:	4543      	cmp	r3, r8
 800f102:	f040 8487 	bne.w	800fa14 <__ieee754_pow+0x9ec>
 800f106:	f001 0101 	and.w	r1, r1, #1
 800f10a:	f1c1 0302 	rsb	r3, r1, #2
 800f10e:	9304      	str	r3, [sp, #16]
 800f110:	4b5c      	ldr	r3, [pc, #368]	; (800f284 <__ieee754_pow+0x25c>)
 800f112:	4598      	cmp	r8, r3
 800f114:	d132      	bne.n	800f17c <__ieee754_pow+0x154>
 800f116:	f1b9 0f00 	cmp.w	r9, #0
 800f11a:	f280 8477 	bge.w	800fa0c <__ieee754_pow+0x9e4>
 800f11e:	4959      	ldr	r1, [pc, #356]	; (800f284 <__ieee754_pow+0x25c>)
 800f120:	4632      	mov	r2, r6
 800f122:	463b      	mov	r3, r7
 800f124:	2000      	movs	r0, #0
 800f126:	f7f1 fb99 	bl	800085c <__aeabi_ddiv>
 800f12a:	e79c      	b.n	800f066 <__ieee754_pow+0x3e>
 800f12c:	2300      	movs	r3, #0
 800f12e:	9304      	str	r3, [sp, #16]
 800f130:	2a00      	cmp	r2, #0
 800f132:	d13d      	bne.n	800f1b0 <__ieee754_pow+0x188>
 800f134:	4b51      	ldr	r3, [pc, #324]	; (800f27c <__ieee754_pow+0x254>)
 800f136:	4598      	cmp	r8, r3
 800f138:	d1ea      	bne.n	800f110 <__ieee754_pow+0xe8>
 800f13a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f13e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f142:	ea53 030a 	orrs.w	r3, r3, sl
 800f146:	f000 8459 	beq.w	800f9fc <__ieee754_pow+0x9d4>
 800f14a:	4b4f      	ldr	r3, [pc, #316]	; (800f288 <__ieee754_pow+0x260>)
 800f14c:	429c      	cmp	r4, r3
 800f14e:	dd08      	ble.n	800f162 <__ieee754_pow+0x13a>
 800f150:	f1b9 0f00 	cmp.w	r9, #0
 800f154:	f2c0 8456 	blt.w	800fa04 <__ieee754_pow+0x9dc>
 800f158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f15c:	e783      	b.n	800f066 <__ieee754_pow+0x3e>
 800f15e:	2302      	movs	r3, #2
 800f160:	e7e5      	b.n	800f12e <__ieee754_pow+0x106>
 800f162:	f1b9 0f00 	cmp.w	r9, #0
 800f166:	f04f 0000 	mov.w	r0, #0
 800f16a:	f04f 0100 	mov.w	r1, #0
 800f16e:	f6bf af7a 	bge.w	800f066 <__ieee754_pow+0x3e>
 800f172:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f17a:	e774      	b.n	800f066 <__ieee754_pow+0x3e>
 800f17c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f180:	d106      	bne.n	800f190 <__ieee754_pow+0x168>
 800f182:	4632      	mov	r2, r6
 800f184:	463b      	mov	r3, r7
 800f186:	4630      	mov	r0, r6
 800f188:	4639      	mov	r1, r7
 800f18a:	f7f1 fa3d 	bl	8000608 <__aeabi_dmul>
 800f18e:	e76a      	b.n	800f066 <__ieee754_pow+0x3e>
 800f190:	4b3e      	ldr	r3, [pc, #248]	; (800f28c <__ieee754_pow+0x264>)
 800f192:	4599      	cmp	r9, r3
 800f194:	d10c      	bne.n	800f1b0 <__ieee754_pow+0x188>
 800f196:	2d00      	cmp	r5, #0
 800f198:	db0a      	blt.n	800f1b0 <__ieee754_pow+0x188>
 800f19a:	ec47 6b10 	vmov	d0, r6, r7
 800f19e:	b009      	add	sp, #36	; 0x24
 800f1a0:	ecbd 8b06 	vpop	{d8-d10}
 800f1a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	f000 bd20 	b.w	800fbec <__ieee754_sqrt>
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	9304      	str	r3, [sp, #16]
 800f1b0:	ec47 6b10 	vmov	d0, r6, r7
 800f1b4:	f000 fc62 	bl	800fa7c <fabs>
 800f1b8:	ec51 0b10 	vmov	r0, r1, d0
 800f1bc:	f1ba 0f00 	cmp.w	sl, #0
 800f1c0:	d129      	bne.n	800f216 <__ieee754_pow+0x1ee>
 800f1c2:	b124      	cbz	r4, 800f1ce <__ieee754_pow+0x1a6>
 800f1c4:	4b2f      	ldr	r3, [pc, #188]	; (800f284 <__ieee754_pow+0x25c>)
 800f1c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d123      	bne.n	800f216 <__ieee754_pow+0x1ee>
 800f1ce:	f1b9 0f00 	cmp.w	r9, #0
 800f1d2:	da05      	bge.n	800f1e0 <__ieee754_pow+0x1b8>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	2000      	movs	r0, #0
 800f1da:	492a      	ldr	r1, [pc, #168]	; (800f284 <__ieee754_pow+0x25c>)
 800f1dc:	f7f1 fb3e 	bl	800085c <__aeabi_ddiv>
 800f1e0:	2d00      	cmp	r5, #0
 800f1e2:	f6bf af40 	bge.w	800f066 <__ieee754_pow+0x3e>
 800f1e6:	9b04      	ldr	r3, [sp, #16]
 800f1e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f1ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f1f0:	431c      	orrs	r4, r3
 800f1f2:	d108      	bne.n	800f206 <__ieee754_pow+0x1de>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	f7f1 f84c 	bl	8000298 <__aeabi_dsub>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	e78f      	b.n	800f126 <__ieee754_pow+0xfe>
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	2b01      	cmp	r3, #1
 800f20a:	f47f af2c 	bne.w	800f066 <__ieee754_pow+0x3e>
 800f20e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f212:	4619      	mov	r1, r3
 800f214:	e727      	b.n	800f066 <__ieee754_pow+0x3e>
 800f216:	0feb      	lsrs	r3, r5, #31
 800f218:	3b01      	subs	r3, #1
 800f21a:	9306      	str	r3, [sp, #24]
 800f21c:	9a06      	ldr	r2, [sp, #24]
 800f21e:	9b04      	ldr	r3, [sp, #16]
 800f220:	4313      	orrs	r3, r2
 800f222:	d102      	bne.n	800f22a <__ieee754_pow+0x202>
 800f224:	4632      	mov	r2, r6
 800f226:	463b      	mov	r3, r7
 800f228:	e7e6      	b.n	800f1f8 <__ieee754_pow+0x1d0>
 800f22a:	4b19      	ldr	r3, [pc, #100]	; (800f290 <__ieee754_pow+0x268>)
 800f22c:	4598      	cmp	r8, r3
 800f22e:	f340 80fb 	ble.w	800f428 <__ieee754_pow+0x400>
 800f232:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f236:	4598      	cmp	r8, r3
 800f238:	4b13      	ldr	r3, [pc, #76]	; (800f288 <__ieee754_pow+0x260>)
 800f23a:	dd0c      	ble.n	800f256 <__ieee754_pow+0x22e>
 800f23c:	429c      	cmp	r4, r3
 800f23e:	dc0f      	bgt.n	800f260 <__ieee754_pow+0x238>
 800f240:	f1b9 0f00 	cmp.w	r9, #0
 800f244:	da0f      	bge.n	800f266 <__ieee754_pow+0x23e>
 800f246:	2000      	movs	r0, #0
 800f248:	b009      	add	sp, #36	; 0x24
 800f24a:	ecbd 8b06 	vpop	{d8-d10}
 800f24e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f252:	f000 bcc2 	b.w	800fbda <__math_oflow>
 800f256:	429c      	cmp	r4, r3
 800f258:	dbf2      	blt.n	800f240 <__ieee754_pow+0x218>
 800f25a:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <__ieee754_pow+0x25c>)
 800f25c:	429c      	cmp	r4, r3
 800f25e:	dd19      	ble.n	800f294 <__ieee754_pow+0x26c>
 800f260:	f1b9 0f00 	cmp.w	r9, #0
 800f264:	dcef      	bgt.n	800f246 <__ieee754_pow+0x21e>
 800f266:	2000      	movs	r0, #0
 800f268:	b009      	add	sp, #36	; 0x24
 800f26a:	ecbd 8b06 	vpop	{d8-d10}
 800f26e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f272:	f000 bca9 	b.w	800fbc8 <__math_uflow>
 800f276:	bf00      	nop
 800f278:	fff00000 	.word	0xfff00000
 800f27c:	7ff00000 	.word	0x7ff00000
 800f280:	433fffff 	.word	0x433fffff
 800f284:	3ff00000 	.word	0x3ff00000
 800f288:	3fefffff 	.word	0x3fefffff
 800f28c:	3fe00000 	.word	0x3fe00000
 800f290:	41e00000 	.word	0x41e00000
 800f294:	4b60      	ldr	r3, [pc, #384]	; (800f418 <__ieee754_pow+0x3f0>)
 800f296:	2200      	movs	r2, #0
 800f298:	f7f0 fffe 	bl	8000298 <__aeabi_dsub>
 800f29c:	a354      	add	r3, pc, #336	; (adr r3, 800f3f0 <__ieee754_pow+0x3c8>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	460d      	mov	r5, r1
 800f2a6:	f7f1 f9af 	bl	8000608 <__aeabi_dmul>
 800f2aa:	a353      	add	r3, pc, #332	; (adr r3, 800f3f8 <__ieee754_pow+0x3d0>)
 800f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b0:	4606      	mov	r6, r0
 800f2b2:	460f      	mov	r7, r1
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	f7f1 f9a6 	bl	8000608 <__aeabi_dmul>
 800f2bc:	4b57      	ldr	r3, [pc, #348]	; (800f41c <__ieee754_pow+0x3f4>)
 800f2be:	4682      	mov	sl, r0
 800f2c0:	468b      	mov	fp, r1
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	f7f1 f99e 	bl	8000608 <__aeabi_dmul>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	a14b      	add	r1, pc, #300	; (adr r1, 800f400 <__ieee754_pow+0x3d8>)
 800f2d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2d6:	f7f0 ffdf 	bl	8000298 <__aeabi_dsub>
 800f2da:	4622      	mov	r2, r4
 800f2dc:	462b      	mov	r3, r5
 800f2de:	f7f1 f993 	bl	8000608 <__aeabi_dmul>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	494d      	ldr	r1, [pc, #308]	; (800f420 <__ieee754_pow+0x3f8>)
 800f2ea:	f7f0 ffd5 	bl	8000298 <__aeabi_dsub>
 800f2ee:	4622      	mov	r2, r4
 800f2f0:	4680      	mov	r8, r0
 800f2f2:	4689      	mov	r9, r1
 800f2f4:	462b      	mov	r3, r5
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	f7f1 f985 	bl	8000608 <__aeabi_dmul>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	4640      	mov	r0, r8
 800f304:	4649      	mov	r1, r9
 800f306:	f7f1 f97f 	bl	8000608 <__aeabi_dmul>
 800f30a:	a33f      	add	r3, pc, #252	; (adr r3, 800f408 <__ieee754_pow+0x3e0>)
 800f30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f310:	f7f1 f97a 	bl	8000608 <__aeabi_dmul>
 800f314:	4602      	mov	r2, r0
 800f316:	460b      	mov	r3, r1
 800f318:	4650      	mov	r0, sl
 800f31a:	4659      	mov	r1, fp
 800f31c:	f7f0 ffbc 	bl	8000298 <__aeabi_dsub>
 800f320:	4602      	mov	r2, r0
 800f322:	460b      	mov	r3, r1
 800f324:	4680      	mov	r8, r0
 800f326:	4689      	mov	r9, r1
 800f328:	4630      	mov	r0, r6
 800f32a:	4639      	mov	r1, r7
 800f32c:	f7f0 ffb6 	bl	800029c <__adddf3>
 800f330:	2000      	movs	r0, #0
 800f332:	4632      	mov	r2, r6
 800f334:	463b      	mov	r3, r7
 800f336:	4604      	mov	r4, r0
 800f338:	460d      	mov	r5, r1
 800f33a:	f7f0 ffad 	bl	8000298 <__aeabi_dsub>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	4640      	mov	r0, r8
 800f344:	4649      	mov	r1, r9
 800f346:	f7f0 ffa7 	bl	8000298 <__aeabi_dsub>
 800f34a:	9b04      	ldr	r3, [sp, #16]
 800f34c:	9a06      	ldr	r2, [sp, #24]
 800f34e:	3b01      	subs	r3, #1
 800f350:	4313      	orrs	r3, r2
 800f352:	4682      	mov	sl, r0
 800f354:	468b      	mov	fp, r1
 800f356:	f040 81e7 	bne.w	800f728 <__ieee754_pow+0x700>
 800f35a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f410 <__ieee754_pow+0x3e8>
 800f35e:	eeb0 8a47 	vmov.f32	s16, s14
 800f362:	eef0 8a67 	vmov.f32	s17, s15
 800f366:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f36a:	2600      	movs	r6, #0
 800f36c:	4632      	mov	r2, r6
 800f36e:	463b      	mov	r3, r7
 800f370:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f374:	f7f0 ff90 	bl	8000298 <__aeabi_dsub>
 800f378:	4622      	mov	r2, r4
 800f37a:	462b      	mov	r3, r5
 800f37c:	f7f1 f944 	bl	8000608 <__aeabi_dmul>
 800f380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f384:	4680      	mov	r8, r0
 800f386:	4689      	mov	r9, r1
 800f388:	4650      	mov	r0, sl
 800f38a:	4659      	mov	r1, fp
 800f38c:	f7f1 f93c 	bl	8000608 <__aeabi_dmul>
 800f390:	4602      	mov	r2, r0
 800f392:	460b      	mov	r3, r1
 800f394:	4640      	mov	r0, r8
 800f396:	4649      	mov	r1, r9
 800f398:	f7f0 ff80 	bl	800029c <__adddf3>
 800f39c:	4632      	mov	r2, r6
 800f39e:	463b      	mov	r3, r7
 800f3a0:	4680      	mov	r8, r0
 800f3a2:	4689      	mov	r9, r1
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	4629      	mov	r1, r5
 800f3a8:	f7f1 f92e 	bl	8000608 <__aeabi_dmul>
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	460d      	mov	r5, r1
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	4649      	mov	r1, r9
 800f3b6:	4640      	mov	r0, r8
 800f3b8:	f7f0 ff70 	bl	800029c <__adddf3>
 800f3bc:	4b19      	ldr	r3, [pc, #100]	; (800f424 <__ieee754_pow+0x3fc>)
 800f3be:	4299      	cmp	r1, r3
 800f3c0:	ec45 4b19 	vmov	d9, r4, r5
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	460f      	mov	r7, r1
 800f3c8:	468b      	mov	fp, r1
 800f3ca:	f340 82f0 	ble.w	800f9ae <__ieee754_pow+0x986>
 800f3ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f3d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f3d6:	4303      	orrs	r3, r0
 800f3d8:	f000 81e4 	beq.w	800f7a4 <__ieee754_pow+0x77c>
 800f3dc:	ec51 0b18 	vmov	r0, r1, d8
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	f7f1 fb82 	bl	8000aec <__aeabi_dcmplt>
 800f3e8:	3800      	subs	r0, #0
 800f3ea:	bf18      	it	ne
 800f3ec:	2001      	movne	r0, #1
 800f3ee:	e72b      	b.n	800f248 <__ieee754_pow+0x220>
 800f3f0:	60000000 	.word	0x60000000
 800f3f4:	3ff71547 	.word	0x3ff71547
 800f3f8:	f85ddf44 	.word	0xf85ddf44
 800f3fc:	3e54ae0b 	.word	0x3e54ae0b
 800f400:	55555555 	.word	0x55555555
 800f404:	3fd55555 	.word	0x3fd55555
 800f408:	652b82fe 	.word	0x652b82fe
 800f40c:	3ff71547 	.word	0x3ff71547
 800f410:	00000000 	.word	0x00000000
 800f414:	bff00000 	.word	0xbff00000
 800f418:	3ff00000 	.word	0x3ff00000
 800f41c:	3fd00000 	.word	0x3fd00000
 800f420:	3fe00000 	.word	0x3fe00000
 800f424:	408fffff 	.word	0x408fffff
 800f428:	4bd5      	ldr	r3, [pc, #852]	; (800f780 <__ieee754_pow+0x758>)
 800f42a:	402b      	ands	r3, r5
 800f42c:	2200      	movs	r2, #0
 800f42e:	b92b      	cbnz	r3, 800f43c <__ieee754_pow+0x414>
 800f430:	4bd4      	ldr	r3, [pc, #848]	; (800f784 <__ieee754_pow+0x75c>)
 800f432:	f7f1 f8e9 	bl	8000608 <__aeabi_dmul>
 800f436:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f43a:	460c      	mov	r4, r1
 800f43c:	1523      	asrs	r3, r4, #20
 800f43e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f442:	4413      	add	r3, r2
 800f444:	9305      	str	r3, [sp, #20]
 800f446:	4bd0      	ldr	r3, [pc, #832]	; (800f788 <__ieee754_pow+0x760>)
 800f448:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f44c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f450:	429c      	cmp	r4, r3
 800f452:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f456:	dd08      	ble.n	800f46a <__ieee754_pow+0x442>
 800f458:	4bcc      	ldr	r3, [pc, #816]	; (800f78c <__ieee754_pow+0x764>)
 800f45a:	429c      	cmp	r4, r3
 800f45c:	f340 8162 	ble.w	800f724 <__ieee754_pow+0x6fc>
 800f460:	9b05      	ldr	r3, [sp, #20]
 800f462:	3301      	adds	r3, #1
 800f464:	9305      	str	r3, [sp, #20]
 800f466:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f46a:	2400      	movs	r4, #0
 800f46c:	00e3      	lsls	r3, r4, #3
 800f46e:	9307      	str	r3, [sp, #28]
 800f470:	4bc7      	ldr	r3, [pc, #796]	; (800f790 <__ieee754_pow+0x768>)
 800f472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f476:	ed93 7b00 	vldr	d7, [r3]
 800f47a:	4629      	mov	r1, r5
 800f47c:	ec53 2b17 	vmov	r2, r3, d7
 800f480:	eeb0 9a47 	vmov.f32	s18, s14
 800f484:	eef0 9a67 	vmov.f32	s19, s15
 800f488:	4682      	mov	sl, r0
 800f48a:	f7f0 ff05 	bl	8000298 <__aeabi_dsub>
 800f48e:	4652      	mov	r2, sl
 800f490:	4606      	mov	r6, r0
 800f492:	460f      	mov	r7, r1
 800f494:	462b      	mov	r3, r5
 800f496:	ec51 0b19 	vmov	r0, r1, d9
 800f49a:	f7f0 feff 	bl	800029c <__adddf3>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	49bb      	ldr	r1, [pc, #748]	; (800f794 <__ieee754_pow+0x76c>)
 800f4a6:	f7f1 f9d9 	bl	800085c <__aeabi_ddiv>
 800f4aa:	ec41 0b1a 	vmov	d10, r0, r1
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	f7f1 f8a7 	bl	8000608 <__aeabi_dmul>
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4c0:	9302      	str	r3, [sp, #8]
 800f4c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4c6:	46ab      	mov	fp, r5
 800f4c8:	106d      	asrs	r5, r5, #1
 800f4ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f4ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f4d2:	ec41 0b18 	vmov	d8, r0, r1
 800f4d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f4da:	2200      	movs	r2, #0
 800f4dc:	4640      	mov	r0, r8
 800f4de:	4649      	mov	r1, r9
 800f4e0:	4614      	mov	r4, r2
 800f4e2:	461d      	mov	r5, r3
 800f4e4:	f7f1 f890 	bl	8000608 <__aeabi_dmul>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	4639      	mov	r1, r7
 800f4f0:	f7f0 fed2 	bl	8000298 <__aeabi_dsub>
 800f4f4:	ec53 2b19 	vmov	r2, r3, d9
 800f4f8:	4606      	mov	r6, r0
 800f4fa:	460f      	mov	r7, r1
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	4629      	mov	r1, r5
 800f500:	f7f0 feca 	bl	8000298 <__aeabi_dsub>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	4650      	mov	r0, sl
 800f50a:	4659      	mov	r1, fp
 800f50c:	f7f0 fec4 	bl	8000298 <__aeabi_dsub>
 800f510:	4642      	mov	r2, r8
 800f512:	464b      	mov	r3, r9
 800f514:	f7f1 f878 	bl	8000608 <__aeabi_dmul>
 800f518:	4602      	mov	r2, r0
 800f51a:	460b      	mov	r3, r1
 800f51c:	4630      	mov	r0, r6
 800f51e:	4639      	mov	r1, r7
 800f520:	f7f0 feba 	bl	8000298 <__aeabi_dsub>
 800f524:	ec53 2b1a 	vmov	r2, r3, d10
 800f528:	f7f1 f86e 	bl	8000608 <__aeabi_dmul>
 800f52c:	ec53 2b18 	vmov	r2, r3, d8
 800f530:	ec41 0b19 	vmov	d9, r0, r1
 800f534:	ec51 0b18 	vmov	r0, r1, d8
 800f538:	f7f1 f866 	bl	8000608 <__aeabi_dmul>
 800f53c:	a37c      	add	r3, pc, #496	; (adr r3, 800f730 <__ieee754_pow+0x708>)
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	4604      	mov	r4, r0
 800f544:	460d      	mov	r5, r1
 800f546:	f7f1 f85f 	bl	8000608 <__aeabi_dmul>
 800f54a:	a37b      	add	r3, pc, #492	; (adr r3, 800f738 <__ieee754_pow+0x710>)
 800f54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f550:	f7f0 fea4 	bl	800029c <__adddf3>
 800f554:	4622      	mov	r2, r4
 800f556:	462b      	mov	r3, r5
 800f558:	f7f1 f856 	bl	8000608 <__aeabi_dmul>
 800f55c:	a378      	add	r3, pc, #480	; (adr r3, 800f740 <__ieee754_pow+0x718>)
 800f55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f562:	f7f0 fe9b 	bl	800029c <__adddf3>
 800f566:	4622      	mov	r2, r4
 800f568:	462b      	mov	r3, r5
 800f56a:	f7f1 f84d 	bl	8000608 <__aeabi_dmul>
 800f56e:	a376      	add	r3, pc, #472	; (adr r3, 800f748 <__ieee754_pow+0x720>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	f7f0 fe92 	bl	800029c <__adddf3>
 800f578:	4622      	mov	r2, r4
 800f57a:	462b      	mov	r3, r5
 800f57c:	f7f1 f844 	bl	8000608 <__aeabi_dmul>
 800f580:	a373      	add	r3, pc, #460	; (adr r3, 800f750 <__ieee754_pow+0x728>)
 800f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f586:	f7f0 fe89 	bl	800029c <__adddf3>
 800f58a:	4622      	mov	r2, r4
 800f58c:	462b      	mov	r3, r5
 800f58e:	f7f1 f83b 	bl	8000608 <__aeabi_dmul>
 800f592:	a371      	add	r3, pc, #452	; (adr r3, 800f758 <__ieee754_pow+0x730>)
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f7f0 fe80 	bl	800029c <__adddf3>
 800f59c:	4622      	mov	r2, r4
 800f59e:	4606      	mov	r6, r0
 800f5a0:	460f      	mov	r7, r1
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	f7f1 f82e 	bl	8000608 <__aeabi_dmul>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	4639      	mov	r1, r7
 800f5b4:	f7f1 f828 	bl	8000608 <__aeabi_dmul>
 800f5b8:	4642      	mov	r2, r8
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	460d      	mov	r5, r1
 800f5be:	464b      	mov	r3, r9
 800f5c0:	ec51 0b18 	vmov	r0, r1, d8
 800f5c4:	f7f0 fe6a 	bl	800029c <__adddf3>
 800f5c8:	ec53 2b19 	vmov	r2, r3, d9
 800f5cc:	f7f1 f81c 	bl	8000608 <__aeabi_dmul>
 800f5d0:	4622      	mov	r2, r4
 800f5d2:	462b      	mov	r3, r5
 800f5d4:	f7f0 fe62 	bl	800029c <__adddf3>
 800f5d8:	4642      	mov	r2, r8
 800f5da:	4682      	mov	sl, r0
 800f5dc:	468b      	mov	fp, r1
 800f5de:	464b      	mov	r3, r9
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	4649      	mov	r1, r9
 800f5e4:	f7f1 f810 	bl	8000608 <__aeabi_dmul>
 800f5e8:	4b6b      	ldr	r3, [pc, #428]	; (800f798 <__ieee754_pow+0x770>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	460f      	mov	r7, r1
 800f5f0:	f7f0 fe54 	bl	800029c <__adddf3>
 800f5f4:	4652      	mov	r2, sl
 800f5f6:	465b      	mov	r3, fp
 800f5f8:	f7f0 fe50 	bl	800029c <__adddf3>
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	4604      	mov	r4, r0
 800f600:	460d      	mov	r5, r1
 800f602:	4602      	mov	r2, r0
 800f604:	460b      	mov	r3, r1
 800f606:	4640      	mov	r0, r8
 800f608:	4649      	mov	r1, r9
 800f60a:	f7f0 fffd 	bl	8000608 <__aeabi_dmul>
 800f60e:	4b62      	ldr	r3, [pc, #392]	; (800f798 <__ieee754_pow+0x770>)
 800f610:	4680      	mov	r8, r0
 800f612:	4689      	mov	r9, r1
 800f614:	2200      	movs	r2, #0
 800f616:	4620      	mov	r0, r4
 800f618:	4629      	mov	r1, r5
 800f61a:	f7f0 fe3d 	bl	8000298 <__aeabi_dsub>
 800f61e:	4632      	mov	r2, r6
 800f620:	463b      	mov	r3, r7
 800f622:	f7f0 fe39 	bl	8000298 <__aeabi_dsub>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	4650      	mov	r0, sl
 800f62c:	4659      	mov	r1, fp
 800f62e:	f7f0 fe33 	bl	8000298 <__aeabi_dsub>
 800f632:	ec53 2b18 	vmov	r2, r3, d8
 800f636:	f7f0 ffe7 	bl	8000608 <__aeabi_dmul>
 800f63a:	4622      	mov	r2, r4
 800f63c:	4606      	mov	r6, r0
 800f63e:	460f      	mov	r7, r1
 800f640:	462b      	mov	r3, r5
 800f642:	ec51 0b19 	vmov	r0, r1, d9
 800f646:	f7f0 ffdf 	bl	8000608 <__aeabi_dmul>
 800f64a:	4602      	mov	r2, r0
 800f64c:	460b      	mov	r3, r1
 800f64e:	4630      	mov	r0, r6
 800f650:	4639      	mov	r1, r7
 800f652:	f7f0 fe23 	bl	800029c <__adddf3>
 800f656:	4606      	mov	r6, r0
 800f658:	460f      	mov	r7, r1
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	4640      	mov	r0, r8
 800f660:	4649      	mov	r1, r9
 800f662:	f7f0 fe1b 	bl	800029c <__adddf3>
 800f666:	a33e      	add	r3, pc, #248	; (adr r3, 800f760 <__ieee754_pow+0x738>)
 800f668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66c:	2000      	movs	r0, #0
 800f66e:	4604      	mov	r4, r0
 800f670:	460d      	mov	r5, r1
 800f672:	f7f0 ffc9 	bl	8000608 <__aeabi_dmul>
 800f676:	4642      	mov	r2, r8
 800f678:	ec41 0b18 	vmov	d8, r0, r1
 800f67c:	464b      	mov	r3, r9
 800f67e:	4620      	mov	r0, r4
 800f680:	4629      	mov	r1, r5
 800f682:	f7f0 fe09 	bl	8000298 <__aeabi_dsub>
 800f686:	4602      	mov	r2, r0
 800f688:	460b      	mov	r3, r1
 800f68a:	4630      	mov	r0, r6
 800f68c:	4639      	mov	r1, r7
 800f68e:	f7f0 fe03 	bl	8000298 <__aeabi_dsub>
 800f692:	a335      	add	r3, pc, #212	; (adr r3, 800f768 <__ieee754_pow+0x740>)
 800f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f698:	f7f0 ffb6 	bl	8000608 <__aeabi_dmul>
 800f69c:	a334      	add	r3, pc, #208	; (adr r3, 800f770 <__ieee754_pow+0x748>)
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	460f      	mov	r7, r1
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	f7f0 ffad 	bl	8000608 <__aeabi_dmul>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	4639      	mov	r1, r7
 800f6b6:	f7f0 fdf1 	bl	800029c <__adddf3>
 800f6ba:	9a07      	ldr	r2, [sp, #28]
 800f6bc:	4b37      	ldr	r3, [pc, #220]	; (800f79c <__ieee754_pow+0x774>)
 800f6be:	4413      	add	r3, r2
 800f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c4:	f7f0 fdea 	bl	800029c <__adddf3>
 800f6c8:	4682      	mov	sl, r0
 800f6ca:	9805      	ldr	r0, [sp, #20]
 800f6cc:	468b      	mov	fp, r1
 800f6ce:	f7f0 ff31 	bl	8000534 <__aeabi_i2d>
 800f6d2:	9a07      	ldr	r2, [sp, #28]
 800f6d4:	4b32      	ldr	r3, [pc, #200]	; (800f7a0 <__ieee754_pow+0x778>)
 800f6d6:	4413      	add	r3, r2
 800f6d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6dc:	4606      	mov	r6, r0
 800f6de:	460f      	mov	r7, r1
 800f6e0:	4652      	mov	r2, sl
 800f6e2:	465b      	mov	r3, fp
 800f6e4:	ec51 0b18 	vmov	r0, r1, d8
 800f6e8:	f7f0 fdd8 	bl	800029c <__adddf3>
 800f6ec:	4642      	mov	r2, r8
 800f6ee:	464b      	mov	r3, r9
 800f6f0:	f7f0 fdd4 	bl	800029c <__adddf3>
 800f6f4:	4632      	mov	r2, r6
 800f6f6:	463b      	mov	r3, r7
 800f6f8:	f7f0 fdd0 	bl	800029c <__adddf3>
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	4632      	mov	r2, r6
 800f700:	463b      	mov	r3, r7
 800f702:	4604      	mov	r4, r0
 800f704:	460d      	mov	r5, r1
 800f706:	f7f0 fdc7 	bl	8000298 <__aeabi_dsub>
 800f70a:	4642      	mov	r2, r8
 800f70c:	464b      	mov	r3, r9
 800f70e:	f7f0 fdc3 	bl	8000298 <__aeabi_dsub>
 800f712:	ec53 2b18 	vmov	r2, r3, d8
 800f716:	f7f0 fdbf 	bl	8000298 <__aeabi_dsub>
 800f71a:	4602      	mov	r2, r0
 800f71c:	460b      	mov	r3, r1
 800f71e:	4650      	mov	r0, sl
 800f720:	4659      	mov	r1, fp
 800f722:	e610      	b.n	800f346 <__ieee754_pow+0x31e>
 800f724:	2401      	movs	r4, #1
 800f726:	e6a1      	b.n	800f46c <__ieee754_pow+0x444>
 800f728:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f778 <__ieee754_pow+0x750>
 800f72c:	e617      	b.n	800f35e <__ieee754_pow+0x336>
 800f72e:	bf00      	nop
 800f730:	4a454eef 	.word	0x4a454eef
 800f734:	3fca7e28 	.word	0x3fca7e28
 800f738:	93c9db65 	.word	0x93c9db65
 800f73c:	3fcd864a 	.word	0x3fcd864a
 800f740:	a91d4101 	.word	0xa91d4101
 800f744:	3fd17460 	.word	0x3fd17460
 800f748:	518f264d 	.word	0x518f264d
 800f74c:	3fd55555 	.word	0x3fd55555
 800f750:	db6fabff 	.word	0xdb6fabff
 800f754:	3fdb6db6 	.word	0x3fdb6db6
 800f758:	33333303 	.word	0x33333303
 800f75c:	3fe33333 	.word	0x3fe33333
 800f760:	e0000000 	.word	0xe0000000
 800f764:	3feec709 	.word	0x3feec709
 800f768:	dc3a03fd 	.word	0xdc3a03fd
 800f76c:	3feec709 	.word	0x3feec709
 800f770:	145b01f5 	.word	0x145b01f5
 800f774:	be3e2fe0 	.word	0xbe3e2fe0
 800f778:	00000000 	.word	0x00000000
 800f77c:	3ff00000 	.word	0x3ff00000
 800f780:	7ff00000 	.word	0x7ff00000
 800f784:	43400000 	.word	0x43400000
 800f788:	0003988e 	.word	0x0003988e
 800f78c:	000bb679 	.word	0x000bb679
 800f790:	08010428 	.word	0x08010428
 800f794:	3ff00000 	.word	0x3ff00000
 800f798:	40080000 	.word	0x40080000
 800f79c:	08010448 	.word	0x08010448
 800f7a0:	08010438 	.word	0x08010438
 800f7a4:	a3b3      	add	r3, pc, #716	; (adr r3, 800fa74 <__ieee754_pow+0xa4c>)
 800f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	4649      	mov	r1, r9
 800f7ae:	f7f0 fd75 	bl	800029c <__adddf3>
 800f7b2:	4622      	mov	r2, r4
 800f7b4:	ec41 0b1a 	vmov	d10, r0, r1
 800f7b8:	462b      	mov	r3, r5
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	4639      	mov	r1, r7
 800f7be:	f7f0 fd6b 	bl	8000298 <__aeabi_dsub>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	ec51 0b1a 	vmov	r0, r1, d10
 800f7ca:	f7f1 f9ad 	bl	8000b28 <__aeabi_dcmpgt>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	f47f ae04 	bne.w	800f3dc <__ieee754_pow+0x3b4>
 800f7d4:	4aa2      	ldr	r2, [pc, #648]	; (800fa60 <__ieee754_pow+0xa38>)
 800f7d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	f340 8107 	ble.w	800f9ee <__ieee754_pow+0x9c6>
 800f7e0:	151b      	asrs	r3, r3, #20
 800f7e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f7e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f7ea:	fa4a fa03 	asr.w	sl, sl, r3
 800f7ee:	44da      	add	sl, fp
 800f7f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f7f4:	489b      	ldr	r0, [pc, #620]	; (800fa64 <__ieee754_pow+0xa3c>)
 800f7f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f7fa:	4108      	asrs	r0, r1
 800f7fc:	ea00 030a 	and.w	r3, r0, sl
 800f800:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f804:	f1c1 0114 	rsb	r1, r1, #20
 800f808:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f80c:	fa4a fa01 	asr.w	sl, sl, r1
 800f810:	f1bb 0f00 	cmp.w	fp, #0
 800f814:	f04f 0200 	mov.w	r2, #0
 800f818:	4620      	mov	r0, r4
 800f81a:	4629      	mov	r1, r5
 800f81c:	bfb8      	it	lt
 800f81e:	f1ca 0a00 	rsblt	sl, sl, #0
 800f822:	f7f0 fd39 	bl	8000298 <__aeabi_dsub>
 800f826:	ec41 0b19 	vmov	d9, r0, r1
 800f82a:	4642      	mov	r2, r8
 800f82c:	464b      	mov	r3, r9
 800f82e:	ec51 0b19 	vmov	r0, r1, d9
 800f832:	f7f0 fd33 	bl	800029c <__adddf3>
 800f836:	a37a      	add	r3, pc, #488	; (adr r3, 800fa20 <__ieee754_pow+0x9f8>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	2000      	movs	r0, #0
 800f83e:	4604      	mov	r4, r0
 800f840:	460d      	mov	r5, r1
 800f842:	f7f0 fee1 	bl	8000608 <__aeabi_dmul>
 800f846:	ec53 2b19 	vmov	r2, r3, d9
 800f84a:	4606      	mov	r6, r0
 800f84c:	460f      	mov	r7, r1
 800f84e:	4620      	mov	r0, r4
 800f850:	4629      	mov	r1, r5
 800f852:	f7f0 fd21 	bl	8000298 <__aeabi_dsub>
 800f856:	4602      	mov	r2, r0
 800f858:	460b      	mov	r3, r1
 800f85a:	4640      	mov	r0, r8
 800f85c:	4649      	mov	r1, r9
 800f85e:	f7f0 fd1b 	bl	8000298 <__aeabi_dsub>
 800f862:	a371      	add	r3, pc, #452	; (adr r3, 800fa28 <__ieee754_pow+0xa00>)
 800f864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f868:	f7f0 fece 	bl	8000608 <__aeabi_dmul>
 800f86c:	a370      	add	r3, pc, #448	; (adr r3, 800fa30 <__ieee754_pow+0xa08>)
 800f86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f872:	4680      	mov	r8, r0
 800f874:	4689      	mov	r9, r1
 800f876:	4620      	mov	r0, r4
 800f878:	4629      	mov	r1, r5
 800f87a:	f7f0 fec5 	bl	8000608 <__aeabi_dmul>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	4640      	mov	r0, r8
 800f884:	4649      	mov	r1, r9
 800f886:	f7f0 fd09 	bl	800029c <__adddf3>
 800f88a:	4604      	mov	r4, r0
 800f88c:	460d      	mov	r5, r1
 800f88e:	4602      	mov	r2, r0
 800f890:	460b      	mov	r3, r1
 800f892:	4630      	mov	r0, r6
 800f894:	4639      	mov	r1, r7
 800f896:	f7f0 fd01 	bl	800029c <__adddf3>
 800f89a:	4632      	mov	r2, r6
 800f89c:	463b      	mov	r3, r7
 800f89e:	4680      	mov	r8, r0
 800f8a0:	4689      	mov	r9, r1
 800f8a2:	f7f0 fcf9 	bl	8000298 <__aeabi_dsub>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	f7f0 fcf3 	bl	8000298 <__aeabi_dsub>
 800f8b2:	4642      	mov	r2, r8
 800f8b4:	4606      	mov	r6, r0
 800f8b6:	460f      	mov	r7, r1
 800f8b8:	464b      	mov	r3, r9
 800f8ba:	4640      	mov	r0, r8
 800f8bc:	4649      	mov	r1, r9
 800f8be:	f7f0 fea3 	bl	8000608 <__aeabi_dmul>
 800f8c2:	a35d      	add	r3, pc, #372	; (adr r3, 800fa38 <__ieee754_pow+0xa10>)
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	460d      	mov	r5, r1
 800f8cc:	f7f0 fe9c 	bl	8000608 <__aeabi_dmul>
 800f8d0:	a35b      	add	r3, pc, #364	; (adr r3, 800fa40 <__ieee754_pow+0xa18>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fcdf 	bl	8000298 <__aeabi_dsub>
 800f8da:	4622      	mov	r2, r4
 800f8dc:	462b      	mov	r3, r5
 800f8de:	f7f0 fe93 	bl	8000608 <__aeabi_dmul>
 800f8e2:	a359      	add	r3, pc, #356	; (adr r3, 800fa48 <__ieee754_pow+0xa20>)
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	f7f0 fcd8 	bl	800029c <__adddf3>
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	462b      	mov	r3, r5
 800f8f0:	f7f0 fe8a 	bl	8000608 <__aeabi_dmul>
 800f8f4:	a356      	add	r3, pc, #344	; (adr r3, 800fa50 <__ieee754_pow+0xa28>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	f7f0 fccd 	bl	8000298 <__aeabi_dsub>
 800f8fe:	4622      	mov	r2, r4
 800f900:	462b      	mov	r3, r5
 800f902:	f7f0 fe81 	bl	8000608 <__aeabi_dmul>
 800f906:	a354      	add	r3, pc, #336	; (adr r3, 800fa58 <__ieee754_pow+0xa30>)
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	f7f0 fcc6 	bl	800029c <__adddf3>
 800f910:	4622      	mov	r2, r4
 800f912:	462b      	mov	r3, r5
 800f914:	f7f0 fe78 	bl	8000608 <__aeabi_dmul>
 800f918:	4602      	mov	r2, r0
 800f91a:	460b      	mov	r3, r1
 800f91c:	4640      	mov	r0, r8
 800f91e:	4649      	mov	r1, r9
 800f920:	f7f0 fcba 	bl	8000298 <__aeabi_dsub>
 800f924:	4604      	mov	r4, r0
 800f926:	460d      	mov	r5, r1
 800f928:	4602      	mov	r2, r0
 800f92a:	460b      	mov	r3, r1
 800f92c:	4640      	mov	r0, r8
 800f92e:	4649      	mov	r1, r9
 800f930:	f7f0 fe6a 	bl	8000608 <__aeabi_dmul>
 800f934:	2200      	movs	r2, #0
 800f936:	ec41 0b19 	vmov	d9, r0, r1
 800f93a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f0 fca9 	bl	8000298 <__aeabi_dsub>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	ec51 0b19 	vmov	r0, r1, d9
 800f94e:	f7f0 ff85 	bl	800085c <__aeabi_ddiv>
 800f952:	4632      	mov	r2, r6
 800f954:	4604      	mov	r4, r0
 800f956:	460d      	mov	r5, r1
 800f958:	463b      	mov	r3, r7
 800f95a:	4640      	mov	r0, r8
 800f95c:	4649      	mov	r1, r9
 800f95e:	f7f0 fe53 	bl	8000608 <__aeabi_dmul>
 800f962:	4632      	mov	r2, r6
 800f964:	463b      	mov	r3, r7
 800f966:	f7f0 fc99 	bl	800029c <__adddf3>
 800f96a:	4602      	mov	r2, r0
 800f96c:	460b      	mov	r3, r1
 800f96e:	4620      	mov	r0, r4
 800f970:	4629      	mov	r1, r5
 800f972:	f7f0 fc91 	bl	8000298 <__aeabi_dsub>
 800f976:	4642      	mov	r2, r8
 800f978:	464b      	mov	r3, r9
 800f97a:	f7f0 fc8d 	bl	8000298 <__aeabi_dsub>
 800f97e:	460b      	mov	r3, r1
 800f980:	4602      	mov	r2, r0
 800f982:	4939      	ldr	r1, [pc, #228]	; (800fa68 <__ieee754_pow+0xa40>)
 800f984:	2000      	movs	r0, #0
 800f986:	f7f0 fc87 	bl	8000298 <__aeabi_dsub>
 800f98a:	ec41 0b10 	vmov	d0, r0, r1
 800f98e:	ee10 3a90 	vmov	r3, s1
 800f992:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f99a:	da2b      	bge.n	800f9f4 <__ieee754_pow+0x9cc>
 800f99c:	4650      	mov	r0, sl
 800f99e:	f000 f877 	bl	800fa90 <scalbn>
 800f9a2:	ec51 0b10 	vmov	r0, r1, d0
 800f9a6:	ec53 2b18 	vmov	r2, r3, d8
 800f9aa:	f7ff bbee 	b.w	800f18a <__ieee754_pow+0x162>
 800f9ae:	4b2f      	ldr	r3, [pc, #188]	; (800fa6c <__ieee754_pow+0xa44>)
 800f9b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f9b4:	429e      	cmp	r6, r3
 800f9b6:	f77f af0d 	ble.w	800f7d4 <__ieee754_pow+0x7ac>
 800f9ba:	4b2d      	ldr	r3, [pc, #180]	; (800fa70 <__ieee754_pow+0xa48>)
 800f9bc:	440b      	add	r3, r1
 800f9be:	4303      	orrs	r3, r0
 800f9c0:	d009      	beq.n	800f9d6 <__ieee754_pow+0x9ae>
 800f9c2:	ec51 0b18 	vmov	r0, r1, d8
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f7f1 f88f 	bl	8000aec <__aeabi_dcmplt>
 800f9ce:	3800      	subs	r0, #0
 800f9d0:	bf18      	it	ne
 800f9d2:	2001      	movne	r0, #1
 800f9d4:	e448      	b.n	800f268 <__ieee754_pow+0x240>
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	462b      	mov	r3, r5
 800f9da:	f7f0 fc5d 	bl	8000298 <__aeabi_dsub>
 800f9de:	4642      	mov	r2, r8
 800f9e0:	464b      	mov	r3, r9
 800f9e2:	f7f1 f897 	bl	8000b14 <__aeabi_dcmpge>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	f43f aef4 	beq.w	800f7d4 <__ieee754_pow+0x7ac>
 800f9ec:	e7e9      	b.n	800f9c2 <__ieee754_pow+0x99a>
 800f9ee:	f04f 0a00 	mov.w	sl, #0
 800f9f2:	e71a      	b.n	800f82a <__ieee754_pow+0x802>
 800f9f4:	ec51 0b10 	vmov	r0, r1, d0
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	e7d4      	b.n	800f9a6 <__ieee754_pow+0x97e>
 800f9fc:	491a      	ldr	r1, [pc, #104]	; (800fa68 <__ieee754_pow+0xa40>)
 800f9fe:	2000      	movs	r0, #0
 800fa00:	f7ff bb31 	b.w	800f066 <__ieee754_pow+0x3e>
 800fa04:	2000      	movs	r0, #0
 800fa06:	2100      	movs	r1, #0
 800fa08:	f7ff bb2d 	b.w	800f066 <__ieee754_pow+0x3e>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	4639      	mov	r1, r7
 800fa10:	f7ff bb29 	b.w	800f066 <__ieee754_pow+0x3e>
 800fa14:	9204      	str	r2, [sp, #16]
 800fa16:	f7ff bb7b 	b.w	800f110 <__ieee754_pow+0xe8>
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	f7ff bb65 	b.w	800f0ea <__ieee754_pow+0xc2>
 800fa20:	00000000 	.word	0x00000000
 800fa24:	3fe62e43 	.word	0x3fe62e43
 800fa28:	fefa39ef 	.word	0xfefa39ef
 800fa2c:	3fe62e42 	.word	0x3fe62e42
 800fa30:	0ca86c39 	.word	0x0ca86c39
 800fa34:	be205c61 	.word	0xbe205c61
 800fa38:	72bea4d0 	.word	0x72bea4d0
 800fa3c:	3e663769 	.word	0x3e663769
 800fa40:	c5d26bf1 	.word	0xc5d26bf1
 800fa44:	3ebbbd41 	.word	0x3ebbbd41
 800fa48:	af25de2c 	.word	0xaf25de2c
 800fa4c:	3f11566a 	.word	0x3f11566a
 800fa50:	16bebd93 	.word	0x16bebd93
 800fa54:	3f66c16c 	.word	0x3f66c16c
 800fa58:	5555553e 	.word	0x5555553e
 800fa5c:	3fc55555 	.word	0x3fc55555
 800fa60:	3fe00000 	.word	0x3fe00000
 800fa64:	fff00000 	.word	0xfff00000
 800fa68:	3ff00000 	.word	0x3ff00000
 800fa6c:	4090cbff 	.word	0x4090cbff
 800fa70:	3f6f3400 	.word	0x3f6f3400
 800fa74:	652b82fe 	.word	0x652b82fe
 800fa78:	3c971547 	.word	0x3c971547

0800fa7c <fabs>:
 800fa7c:	ec51 0b10 	vmov	r0, r1, d0
 800fa80:	ee10 2a10 	vmov	r2, s0
 800fa84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa88:	ec43 2b10 	vmov	d0, r2, r3
 800fa8c:	4770      	bx	lr
	...

0800fa90 <scalbn>:
 800fa90:	b570      	push	{r4, r5, r6, lr}
 800fa92:	ec55 4b10 	vmov	r4, r5, d0
 800fa96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fa9a:	4606      	mov	r6, r0
 800fa9c:	462b      	mov	r3, r5
 800fa9e:	b999      	cbnz	r1, 800fac8 <scalbn+0x38>
 800faa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800faa4:	4323      	orrs	r3, r4
 800faa6:	d03f      	beq.n	800fb28 <scalbn+0x98>
 800faa8:	4b35      	ldr	r3, [pc, #212]	; (800fb80 <scalbn+0xf0>)
 800faaa:	4629      	mov	r1, r5
 800faac:	ee10 0a10 	vmov	r0, s0
 800fab0:	2200      	movs	r2, #0
 800fab2:	f7f0 fda9 	bl	8000608 <__aeabi_dmul>
 800fab6:	4b33      	ldr	r3, [pc, #204]	; (800fb84 <scalbn+0xf4>)
 800fab8:	429e      	cmp	r6, r3
 800faba:	4604      	mov	r4, r0
 800fabc:	460d      	mov	r5, r1
 800fabe:	da10      	bge.n	800fae2 <scalbn+0x52>
 800fac0:	a327      	add	r3, pc, #156	; (adr r3, 800fb60 <scalbn+0xd0>)
 800fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac6:	e01f      	b.n	800fb08 <scalbn+0x78>
 800fac8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800facc:	4291      	cmp	r1, r2
 800face:	d10c      	bne.n	800faea <scalbn+0x5a>
 800fad0:	ee10 2a10 	vmov	r2, s0
 800fad4:	4620      	mov	r0, r4
 800fad6:	4629      	mov	r1, r5
 800fad8:	f7f0 fbe0 	bl	800029c <__adddf3>
 800fadc:	4604      	mov	r4, r0
 800fade:	460d      	mov	r5, r1
 800fae0:	e022      	b.n	800fb28 <scalbn+0x98>
 800fae2:	460b      	mov	r3, r1
 800fae4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fae8:	3936      	subs	r1, #54	; 0x36
 800faea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800faee:	4296      	cmp	r6, r2
 800faf0:	dd0d      	ble.n	800fb0e <scalbn+0x7e>
 800faf2:	2d00      	cmp	r5, #0
 800faf4:	a11c      	add	r1, pc, #112	; (adr r1, 800fb68 <scalbn+0xd8>)
 800faf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fafa:	da02      	bge.n	800fb02 <scalbn+0x72>
 800fafc:	a11c      	add	r1, pc, #112	; (adr r1, 800fb70 <scalbn+0xe0>)
 800fafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb02:	a319      	add	r3, pc, #100	; (adr r3, 800fb68 <scalbn+0xd8>)
 800fb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb08:	f7f0 fd7e 	bl	8000608 <__aeabi_dmul>
 800fb0c:	e7e6      	b.n	800fadc <scalbn+0x4c>
 800fb0e:	1872      	adds	r2, r6, r1
 800fb10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fb14:	428a      	cmp	r2, r1
 800fb16:	dcec      	bgt.n	800faf2 <scalbn+0x62>
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	dd08      	ble.n	800fb2e <scalbn+0x9e>
 800fb1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb28:	ec45 4b10 	vmov	d0, r4, r5
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
 800fb2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fb32:	da08      	bge.n	800fb46 <scalbn+0xb6>
 800fb34:	2d00      	cmp	r5, #0
 800fb36:	a10a      	add	r1, pc, #40	; (adr r1, 800fb60 <scalbn+0xd0>)
 800fb38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb3c:	dac0      	bge.n	800fac0 <scalbn+0x30>
 800fb3e:	a10e      	add	r1, pc, #56	; (adr r1, 800fb78 <scalbn+0xe8>)
 800fb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb44:	e7bc      	b.n	800fac0 <scalbn+0x30>
 800fb46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb4a:	3236      	adds	r2, #54	; 0x36
 800fb4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fb54:	4620      	mov	r0, r4
 800fb56:	4b0c      	ldr	r3, [pc, #48]	; (800fb88 <scalbn+0xf8>)
 800fb58:	2200      	movs	r2, #0
 800fb5a:	e7d5      	b.n	800fb08 <scalbn+0x78>
 800fb5c:	f3af 8000 	nop.w
 800fb60:	c2f8f359 	.word	0xc2f8f359
 800fb64:	01a56e1f 	.word	0x01a56e1f
 800fb68:	8800759c 	.word	0x8800759c
 800fb6c:	7e37e43c 	.word	0x7e37e43c
 800fb70:	8800759c 	.word	0x8800759c
 800fb74:	fe37e43c 	.word	0xfe37e43c
 800fb78:	c2f8f359 	.word	0xc2f8f359
 800fb7c:	81a56e1f 	.word	0x81a56e1f
 800fb80:	43500000 	.word	0x43500000
 800fb84:	ffff3cb0 	.word	0xffff3cb0
 800fb88:	3c900000 	.word	0x3c900000

0800fb8c <with_errno>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	4604      	mov	r4, r0
 800fb90:	460d      	mov	r5, r1
 800fb92:	4616      	mov	r6, r2
 800fb94:	f7fd fb42 	bl	800d21c <__errno>
 800fb98:	4629      	mov	r1, r5
 800fb9a:	6006      	str	r6, [r0, #0]
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}

0800fba0 <xflow>:
 800fba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fba2:	4614      	mov	r4, r2
 800fba4:	461d      	mov	r5, r3
 800fba6:	b108      	cbz	r0, 800fbac <xflow+0xc>
 800fba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fbac:	e9cd 2300 	strd	r2, r3, [sp]
 800fbb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	f7f0 fd26 	bl	8000608 <__aeabi_dmul>
 800fbbc:	2222      	movs	r2, #34	; 0x22
 800fbbe:	b003      	add	sp, #12
 800fbc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbc4:	f7ff bfe2 	b.w	800fb8c <with_errno>

0800fbc8 <__math_uflow>:
 800fbc8:	b508      	push	{r3, lr}
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fbd0:	f7ff ffe6 	bl	800fba0 <xflow>
 800fbd4:	ec41 0b10 	vmov	d0, r0, r1
 800fbd8:	bd08      	pop	{r3, pc}

0800fbda <__math_oflow>:
 800fbda:	b508      	push	{r3, lr}
 800fbdc:	2200      	movs	r2, #0
 800fbde:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fbe2:	f7ff ffdd 	bl	800fba0 <xflow>
 800fbe6:	ec41 0b10 	vmov	d0, r0, r1
 800fbea:	bd08      	pop	{r3, pc}

0800fbec <__ieee754_sqrt>:
 800fbec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	ec55 4b10 	vmov	r4, r5, d0
 800fbf4:	4e67      	ldr	r6, [pc, #412]	; (800fd94 <__ieee754_sqrt+0x1a8>)
 800fbf6:	43ae      	bics	r6, r5
 800fbf8:	ee10 0a10 	vmov	r0, s0
 800fbfc:	ee10 2a10 	vmov	r2, s0
 800fc00:	4629      	mov	r1, r5
 800fc02:	462b      	mov	r3, r5
 800fc04:	d10d      	bne.n	800fc22 <__ieee754_sqrt+0x36>
 800fc06:	f7f0 fcff 	bl	8000608 <__aeabi_dmul>
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	4620      	mov	r0, r4
 800fc10:	4629      	mov	r1, r5
 800fc12:	f7f0 fb43 	bl	800029c <__adddf3>
 800fc16:	4604      	mov	r4, r0
 800fc18:	460d      	mov	r5, r1
 800fc1a:	ec45 4b10 	vmov	d0, r4, r5
 800fc1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc22:	2d00      	cmp	r5, #0
 800fc24:	dc0b      	bgt.n	800fc3e <__ieee754_sqrt+0x52>
 800fc26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc2a:	4326      	orrs	r6, r4
 800fc2c:	d0f5      	beq.n	800fc1a <__ieee754_sqrt+0x2e>
 800fc2e:	b135      	cbz	r5, 800fc3e <__ieee754_sqrt+0x52>
 800fc30:	f7f0 fb32 	bl	8000298 <__aeabi_dsub>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	f7f0 fe10 	bl	800085c <__aeabi_ddiv>
 800fc3c:	e7eb      	b.n	800fc16 <__ieee754_sqrt+0x2a>
 800fc3e:	1509      	asrs	r1, r1, #20
 800fc40:	f000 808d 	beq.w	800fd5e <__ieee754_sqrt+0x172>
 800fc44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc48:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fc4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc50:	07c9      	lsls	r1, r1, #31
 800fc52:	bf5c      	itt	pl
 800fc54:	005b      	lslpl	r3, r3, #1
 800fc56:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fc5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fc5e:	bf58      	it	pl
 800fc60:	0052      	lslpl	r2, r2, #1
 800fc62:	2500      	movs	r5, #0
 800fc64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fc68:	1076      	asrs	r6, r6, #1
 800fc6a:	0052      	lsls	r2, r2, #1
 800fc6c:	f04f 0e16 	mov.w	lr, #22
 800fc70:	46ac      	mov	ip, r5
 800fc72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc76:	eb0c 0001 	add.w	r0, ip, r1
 800fc7a:	4298      	cmp	r0, r3
 800fc7c:	bfde      	ittt	le
 800fc7e:	1a1b      	suble	r3, r3, r0
 800fc80:	eb00 0c01 	addle.w	ip, r0, r1
 800fc84:	186d      	addle	r5, r5, r1
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	f1be 0e01 	subs.w	lr, lr, #1
 800fc8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fc90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fc94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fc98:	d1ed      	bne.n	800fc76 <__ieee754_sqrt+0x8a>
 800fc9a:	4674      	mov	r4, lr
 800fc9c:	2720      	movs	r7, #32
 800fc9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fca2:	4563      	cmp	r3, ip
 800fca4:	eb01 000e 	add.w	r0, r1, lr
 800fca8:	dc02      	bgt.n	800fcb0 <__ieee754_sqrt+0xc4>
 800fcaa:	d113      	bne.n	800fcd4 <__ieee754_sqrt+0xe8>
 800fcac:	4290      	cmp	r0, r2
 800fcae:	d811      	bhi.n	800fcd4 <__ieee754_sqrt+0xe8>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	eb00 0e01 	add.w	lr, r0, r1
 800fcb6:	da57      	bge.n	800fd68 <__ieee754_sqrt+0x17c>
 800fcb8:	f1be 0f00 	cmp.w	lr, #0
 800fcbc:	db54      	blt.n	800fd68 <__ieee754_sqrt+0x17c>
 800fcbe:	f10c 0801 	add.w	r8, ip, #1
 800fcc2:	eba3 030c 	sub.w	r3, r3, ip
 800fcc6:	4290      	cmp	r0, r2
 800fcc8:	bf88      	it	hi
 800fcca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fcce:	1a12      	subs	r2, r2, r0
 800fcd0:	440c      	add	r4, r1
 800fcd2:	46c4      	mov	ip, r8
 800fcd4:	005b      	lsls	r3, r3, #1
 800fcd6:	3f01      	subs	r7, #1
 800fcd8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fcdc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fce0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fce4:	d1dd      	bne.n	800fca2 <__ieee754_sqrt+0xb6>
 800fce6:	4313      	orrs	r3, r2
 800fce8:	d01b      	beq.n	800fd22 <__ieee754_sqrt+0x136>
 800fcea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fd98 <__ieee754_sqrt+0x1ac>
 800fcee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fd9c <__ieee754_sqrt+0x1b0>
 800fcf2:	e9da 0100 	ldrd	r0, r1, [sl]
 800fcf6:	e9db 2300 	ldrd	r2, r3, [fp]
 800fcfa:	f7f0 facd 	bl	8000298 <__aeabi_dsub>
 800fcfe:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4640      	mov	r0, r8
 800fd08:	4649      	mov	r1, r9
 800fd0a:	f7f0 fef9 	bl	8000b00 <__aeabi_dcmple>
 800fd0e:	b140      	cbz	r0, 800fd22 <__ieee754_sqrt+0x136>
 800fd10:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fd14:	e9da 0100 	ldrd	r0, r1, [sl]
 800fd18:	e9db 2300 	ldrd	r2, r3, [fp]
 800fd1c:	d126      	bne.n	800fd6c <__ieee754_sqrt+0x180>
 800fd1e:	3501      	adds	r5, #1
 800fd20:	463c      	mov	r4, r7
 800fd22:	106a      	asrs	r2, r5, #1
 800fd24:	0863      	lsrs	r3, r4, #1
 800fd26:	07e9      	lsls	r1, r5, #31
 800fd28:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fd2c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fd30:	bf48      	it	mi
 800fd32:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fd36:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fd3a:	461c      	mov	r4, r3
 800fd3c:	e76d      	b.n	800fc1a <__ieee754_sqrt+0x2e>
 800fd3e:	0ad3      	lsrs	r3, r2, #11
 800fd40:	3815      	subs	r0, #21
 800fd42:	0552      	lsls	r2, r2, #21
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d0fa      	beq.n	800fd3e <__ieee754_sqrt+0x152>
 800fd48:	02dc      	lsls	r4, r3, #11
 800fd4a:	d50a      	bpl.n	800fd62 <__ieee754_sqrt+0x176>
 800fd4c:	f1c1 0420 	rsb	r4, r1, #32
 800fd50:	fa22 f404 	lsr.w	r4, r2, r4
 800fd54:	1e4d      	subs	r5, r1, #1
 800fd56:	408a      	lsls	r2, r1
 800fd58:	4323      	orrs	r3, r4
 800fd5a:	1b41      	subs	r1, r0, r5
 800fd5c:	e772      	b.n	800fc44 <__ieee754_sqrt+0x58>
 800fd5e:	4608      	mov	r0, r1
 800fd60:	e7f0      	b.n	800fd44 <__ieee754_sqrt+0x158>
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	3101      	adds	r1, #1
 800fd66:	e7ef      	b.n	800fd48 <__ieee754_sqrt+0x15c>
 800fd68:	46e0      	mov	r8, ip
 800fd6a:	e7aa      	b.n	800fcc2 <__ieee754_sqrt+0xd6>
 800fd6c:	f7f0 fa96 	bl	800029c <__adddf3>
 800fd70:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	4640      	mov	r0, r8
 800fd7a:	4649      	mov	r1, r9
 800fd7c:	f7f0 feb6 	bl	8000aec <__aeabi_dcmplt>
 800fd80:	b120      	cbz	r0, 800fd8c <__ieee754_sqrt+0x1a0>
 800fd82:	1ca0      	adds	r0, r4, #2
 800fd84:	bf08      	it	eq
 800fd86:	3501      	addeq	r5, #1
 800fd88:	3402      	adds	r4, #2
 800fd8a:	e7ca      	b.n	800fd22 <__ieee754_sqrt+0x136>
 800fd8c:	3401      	adds	r4, #1
 800fd8e:	f024 0401 	bic.w	r4, r4, #1
 800fd92:	e7c6      	b.n	800fd22 <__ieee754_sqrt+0x136>
 800fd94:	7ff00000 	.word	0x7ff00000
 800fd98:	200002c8 	.word	0x200002c8
 800fd9c:	200002d0 	.word	0x200002d0

0800fda0 <_init>:
 800fda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda2:	bf00      	nop
 800fda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fda6:	bc08      	pop	{r3}
 800fda8:	469e      	mov	lr, r3
 800fdaa:	4770      	bx	lr

0800fdac <_fini>:
 800fdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdae:	bf00      	nop
 800fdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdb2:	bc08      	pop	{r3}
 800fdb4:	469e      	mov	lr, r3
 800fdb6:	4770      	bx	lr
